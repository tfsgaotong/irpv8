package com.tfs.irp.advice.entity;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class IrpSuggestionExample {
    /**
     * This field was generated by Abator for iBATIS.
     * This field corresponds to the database table IRP_SUGGESTION
     *
     * @abatorgenerated Thu Aug 03 15:59:48 CST 2017
     */
    protected String orderByClause;

    /**
     * This field was generated by Abator for iBATIS.
     * This field corresponds to the database table IRP_SUGGESTION
     *
     * @abatorgenerated Thu Aug 03 15:59:48 CST 2017
     */
    protected List oredCriteria;

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table IRP_SUGGESTION
     *
     * @abatorgenerated Thu Aug 03 15:59:48 CST 2017
     */
    public IrpSuggestionExample() {
        oredCriteria = new ArrayList();
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table IRP_SUGGESTION
     *
     * @abatorgenerated Thu Aug 03 15:59:48 CST 2017
     */
    protected IrpSuggestionExample(IrpSuggestionExample example) {
        this.orderByClause = example.orderByClause;
        this.oredCriteria = example.oredCriteria;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table IRP_SUGGESTION
     *
     * @abatorgenerated Thu Aug 03 15:59:48 CST 2017
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table IRP_SUGGESTION
     *
     * @abatorgenerated Thu Aug 03 15:59:48 CST 2017
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table IRP_SUGGESTION
     *
     * @abatorgenerated Thu Aug 03 15:59:48 CST 2017
     */
    public List getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table IRP_SUGGESTION
     *
     * @abatorgenerated Thu Aug 03 15:59:48 CST 2017
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table IRP_SUGGESTION
     *
     * @abatorgenerated Thu Aug 03 15:59:48 CST 2017
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table IRP_SUGGESTION
     *
     * @abatorgenerated Thu Aug 03 15:59:48 CST 2017
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table IRP_SUGGESTION
     *
     * @abatorgenerated Thu Aug 03 15:59:48 CST 2017
     */
    public void clear() {
        oredCriteria.clear();
    }

    /**
     * This class was generated by Abator for iBATIS.
     * This class corresponds to the database table IRP_SUGGESTION
     *
     * @abatorgenerated Thu Aug 03 15:59:48 CST 2017
     */
    public static class Criteria {
        protected List criteriaWithoutValue;

        protected List criteriaWithSingleValue;

        protected List criteriaWithListValue;

        protected List criteriaWithBetweenValue;

        protected Criteria() {
            super();
            criteriaWithoutValue = new ArrayList();
            criteriaWithSingleValue = new ArrayList();
            criteriaWithListValue = new ArrayList();
            criteriaWithBetweenValue = new ArrayList();
        }

        public boolean isValid() {
            return criteriaWithoutValue.size() > 0
                || criteriaWithSingleValue.size() > 0
                || criteriaWithListValue.size() > 0
                || criteriaWithBetweenValue.size() > 0;
        }

        public List getCriteriaWithoutValue() {
            return criteriaWithoutValue;
        }

        public List getCriteriaWithSingleValue() {
            return criteriaWithSingleValue;
        }

        public List getCriteriaWithListValue() {
            return criteriaWithListValue;
        }

        public List getCriteriaWithBetweenValue() {
            return criteriaWithBetweenValue;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteriaWithoutValue.add(condition);
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("value", value);
            criteriaWithSingleValue.add(map);
        }

        protected void addCriterion(String condition, List values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("values", values);
            criteriaWithListValue.add(map);
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            List list = new ArrayList();
            list.add(value1);
            list.add(value2);
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("values", list);
            criteriaWithBetweenValue.add(map);
        }

        public Criteria andSuggestionidIsNull() {
            addCriterion("SUGGESTIONID is null");
            return this;
        }

        public Criteria andSuggestionidIsNotNull() {
            addCriterion("SUGGESTIONID is not null");
            return this;
        }

        public Criteria andSuggestionidEqualTo(Long value) {
            addCriterion("SUGGESTIONID =", value, "suggestionid");
            return this;
        }

        public Criteria andSuggestionidNotEqualTo(Long value) {
            addCriterion("SUGGESTIONID <>", value, "suggestionid");
            return this;
        }

        public Criteria andSuggestionidGreaterThan(Long value) {
            addCriterion("SUGGESTIONID >", value, "suggestionid");
            return this;
        }

        public Criteria andSuggestionidGreaterThanOrEqualTo(Long value) {
            addCriterion("SUGGESTIONID >=", value, "suggestionid");
            return this;
        }

        public Criteria andSuggestionidLessThan(Long value) {
            addCriterion("SUGGESTIONID <", value, "suggestionid");
            return this;
        }

        public Criteria andSuggestionidLessThanOrEqualTo(Long value) {
            addCriterion("SUGGESTIONID <=", value, "suggestionid");
            return this;
        }

        public Criteria andSuggestionidIn(List values) {
            addCriterion("SUGGESTIONID in", values, "suggestionid");
            return this;
        }

        public Criteria andSuggestionidNotIn(List values) {
            addCriterion("SUGGESTIONID not in", values, "suggestionid");
            return this;
        }

        public Criteria andSuggestionidBetween(Long value1, Long value2) {
            addCriterion("SUGGESTIONID between", value1, value2, "suggestionid");
            return this;
        }

        public Criteria andSuggestionidNotBetween(Long value1, Long value2) {
            addCriterion("SUGGESTIONID not between", value1, value2, "suggestionid");
            return this;
        }

        public Criteria andDevicetypeIsNull() {
            addCriterion("DEVICETYPE is null");
            return this;
        }

        public Criteria andDevicetypeIsNotNull() {
            addCriterion("DEVICETYPE is not null");
            return this;
        }

        public Criteria andDevicetypeEqualTo(Long value) {
            addCriterion("DEVICETYPE =", value, "devicetype");
            return this;
        }

        public Criteria andDevicetypeNotEqualTo(Long value) {
            addCriterion("DEVICETYPE <>", value, "devicetype");
            return this;
        }

        public Criteria andDevicetypeGreaterThan(Long value) {
            addCriterion("DEVICETYPE >", value, "devicetype");
            return this;
        }

        public Criteria andDevicetypeGreaterThanOrEqualTo(Long value) {
            addCriterion("DEVICETYPE >=", value, "devicetype");
            return this;
        }

        public Criteria andDevicetypeLessThan(Long value) {
            addCriterion("DEVICETYPE <", value, "devicetype");
            return this;
        }

        public Criteria andDevicetypeLessThanOrEqualTo(Long value) {
            addCriterion("DEVICETYPE <=", value, "devicetype");
            return this;
        }

        public Criteria andDevicetypeIn(List values) {
            addCriterion("DEVICETYPE in", values, "devicetype");
            return this;
        }

        public Criteria andDevicetypeNotIn(List values) {
            addCriterion("DEVICETYPE not in", values, "devicetype");
            return this;
        }

        public Criteria andDevicetypeBetween(Long value1, Long value2) {
            addCriterion("DEVICETYPE between", value1, value2, "devicetype");
            return this;
        }

        public Criteria andDevicetypeNotBetween(Long value1, Long value2) {
            addCriterion("DEVICETYPE not between", value1, value2, "devicetype");
            return this;
        }
    }
}