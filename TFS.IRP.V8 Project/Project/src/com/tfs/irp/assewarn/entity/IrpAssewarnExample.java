package com.tfs.irp.assewarn.entity;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class IrpAssewarnExample {

	/**
	 * This field was generated by Apache iBATIS ibator. This field corresponds to the database table IRP_ASSEWARN
	 * @ibatorgenerated  Thu Aug 25 16:52:31 CST 2016
	 */
	protected String orderByClause;
	/**
	 * This field was generated by Apache iBATIS ibator. This field corresponds to the database table IRP_ASSEWARN
	 * @ibatorgenerated  Thu Aug 25 16:52:31 CST 2016
	 */
	protected List<Criteria> oredCriteria;

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table IRP_ASSEWARN
	 * @ibatorgenerated  Thu Aug 25 16:52:31 CST 2016
	 */
	public IrpAssewarnExample() {
		oredCriteria = new ArrayList<Criteria>();
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table IRP_ASSEWARN
	 * @ibatorgenerated  Thu Aug 25 16:52:31 CST 2016
	 */
	protected IrpAssewarnExample(IrpAssewarnExample example) {
		this.orderByClause = example.orderByClause;
		this.oredCriteria = example.oredCriteria;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table IRP_ASSEWARN
	 * @ibatorgenerated  Thu Aug 25 16:52:31 CST 2016
	 */
	public void setOrderByClause(String orderByClause) {
		this.orderByClause = orderByClause;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table IRP_ASSEWARN
	 * @ibatorgenerated  Thu Aug 25 16:52:31 CST 2016
	 */
	public String getOrderByClause() {
		return orderByClause;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table IRP_ASSEWARN
	 * @ibatorgenerated  Thu Aug 25 16:52:31 CST 2016
	 */
	public List<Criteria> getOredCriteria() {
		return oredCriteria;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table IRP_ASSEWARN
	 * @ibatorgenerated  Thu Aug 25 16:52:31 CST 2016
	 */
	public void or(Criteria criteria) {
		oredCriteria.add(criteria);
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table IRP_ASSEWARN
	 * @ibatorgenerated  Thu Aug 25 16:52:31 CST 2016
	 */
	public Criteria createCriteria() {
		Criteria criteria = createCriteriaInternal();
		if (oredCriteria.size() == 0) {
			oredCriteria.add(criteria);
		}
		return criteria;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table IRP_ASSEWARN
	 * @ibatorgenerated  Thu Aug 25 16:52:31 CST 2016
	 */
	protected Criteria createCriteriaInternal() {
		Criteria criteria = new Criteria();
		return criteria;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table IRP_ASSEWARN
	 * @ibatorgenerated  Thu Aug 25 16:52:31 CST 2016
	 */
	public void clear() {
		oredCriteria.clear();
	}

	/**
	 * This class was generated by Apache iBATIS ibator. This class corresponds to the database table IRP_ASSEWARN
	 * @ibatorgenerated  Thu Aug 25 16:52:31 CST 2016
	 */
	public static class Criteria {
		protected List<String> criteriaWithoutValue;
		protected List<Map<String, Object>> criteriaWithSingleValue;
		protected List<Map<String, Object>> criteriaWithListValue;
		protected List<Map<String, Object>> criteriaWithBetweenValue;

		protected Criteria() {
			super();
			criteriaWithoutValue = new ArrayList<String>();
			criteriaWithSingleValue = new ArrayList<Map<String, Object>>();
			criteriaWithListValue = new ArrayList<Map<String, Object>>();
			criteriaWithBetweenValue = new ArrayList<Map<String, Object>>();
		}

		public boolean isValid() {
			return criteriaWithoutValue.size() > 0
					|| criteriaWithSingleValue.size() > 0
					|| criteriaWithListValue.size() > 0
					|| criteriaWithBetweenValue.size() > 0;
		}

		public List<String> getCriteriaWithoutValue() {
			return criteriaWithoutValue;
		}

		public List<Map<String, Object>> getCriteriaWithSingleValue() {
			return criteriaWithSingleValue;
		}

		public List<Map<String, Object>> getCriteriaWithListValue() {
			return criteriaWithListValue;
		}

		public List<Map<String, Object>> getCriteriaWithBetweenValue() {
			return criteriaWithBetweenValue;
		}

		protected void addCriterion(String condition) {
			if (condition == null) {
				throw new RuntimeException("Value for condition cannot be null");
			}
			criteriaWithoutValue.add(condition);
		}

		protected void addCriterion(String condition, Object value,
				String property) {
			if (value == null) {
				throw new RuntimeException("Value for " + property
						+ " cannot be null");
			}
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("condition", condition);
			map.put("value", value);
			criteriaWithSingleValue.add(map);
		}

		protected void addCriterion(String condition,
				List<? extends Object> values, String property) {
			if (values == null || values.size() == 0) {
				throw new RuntimeException("Value list for " + property
						+ " cannot be null or empty");
			}
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("condition", condition);
			map.put("values", values);
			criteriaWithListValue.add(map);
		}

		protected void addCriterion(String condition, Object value1,
				Object value2, String property) {
			if (value1 == null || value2 == null) {
				throw new RuntimeException("Between values for " + property
						+ " cannot be null");
			}
			List<Object> list = new ArrayList<Object>();
			list.add(value1);
			list.add(value2);
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("condition", condition);
			map.put("values", list);
			criteriaWithBetweenValue.add(map);
		}

		public Criteria andWarnidIsNull() {
			addCriterion("WARNID is null");
			return this;
		}

		public Criteria andWarnidIsNotNull() {
			addCriterion("WARNID is not null");
			return this;
		}

		public Criteria andWarnidEqualTo(Long value) {
			addCriterion("WARNID =", value, "warnid");
			return this;
		}

		public Criteria andWarnidNotEqualTo(Long value) {
			addCriterion("WARNID <>", value, "warnid");
			return this;
		}

		public Criteria andWarnidGreaterThan(Long value) {
			addCriterion("WARNID >", value, "warnid");
			return this;
		}

		public Criteria andWarnidGreaterThanOrEqualTo(Long value) {
			addCriterion("WARNID >=", value, "warnid");
			return this;
		}

		public Criteria andWarnidLessThan(Long value) {
			addCriterion("WARNID <", value, "warnid");
			return this;
		}

		public Criteria andWarnidLessThanOrEqualTo(Long value) {
			addCriterion("WARNID <=", value, "warnid");
			return this;
		}

		public Criteria andWarnidIn(List<Long> values) {
			addCriterion("WARNID in", values, "warnid");
			return this;
		}

		public Criteria andWarnidNotIn(List<Long> values) {
			addCriterion("WARNID not in", values, "warnid");
			return this;
		}

		public Criteria andWarnidBetween(Long value1, Long value2) {
			addCriterion("WARNID between", value1, value2, "warnid");
			return this;
		}

		public Criteria andWarnidNotBetween(Long value1, Long value2) {
			addCriterion("WARNID not between", value1, value2, "warnid");
			return this;
		}

		public Criteria andAssewarnnameIsNull() {
			addCriterion("ASSEWARNNAME is null");
			return this;
		}

		public Criteria andAssewarnnameIsNotNull() {
			addCriterion("ASSEWARNNAME is not null");
			return this;
		}

		public Criteria andAssewarnnameEqualTo(String value) {
			addCriterion("ASSEWARNNAME =", value, "assewarnname");
			return this;
		}

		public Criteria andAssewarnnameNotEqualTo(String value) {
			addCriterion("ASSEWARNNAME <>", value, "assewarnname");
			return this;
		}

		public Criteria andAssewarnnameGreaterThan(String value) {
			addCriterion("ASSEWARNNAME >", value, "assewarnname");
			return this;
		}

		public Criteria andAssewarnnameGreaterThanOrEqualTo(String value) {
			addCriterion("ASSEWARNNAME >=", value, "assewarnname");
			return this;
		}

		public Criteria andAssewarnnameLessThan(String value) {
			addCriterion("ASSEWARNNAME <", value, "assewarnname");
			return this;
		}

		public Criteria andAssewarnnameLessThanOrEqualTo(String value) {
			addCriterion("ASSEWARNNAME <=", value, "assewarnname");
			return this;
		}

		public Criteria andAssewarnnameLike(String value) {
			addCriterion("ASSEWARNNAME like", value, "assewarnname");
			return this;
		}

		public Criteria andAssewarnnameNotLike(String value) {
			addCriterion("ASSEWARNNAME not like", value, "assewarnname");
			return this;
		}

		public Criteria andAssewarnnameIn(List<String> values) {
			addCriterion("ASSEWARNNAME in", values, "assewarnname");
			return this;
		}

		public Criteria andAssewarnnameNotIn(List<String> values) {
			addCriterion("ASSEWARNNAME not in", values, "assewarnname");
			return this;
		}

		public Criteria andAssewarnnameBetween(String value1, String value2) {
			addCriterion("ASSEWARNNAME between", value1, value2, "assewarnname");
			return this;
		}

		public Criteria andAssewarnnameNotBetween(String value1, String value2) {
			addCriterion("ASSEWARNNAME not between", value1, value2,
					"assewarnname");
			return this;
		}

		public Criteria andCrtimeIsNull() {
			addCriterion("CRTIME is null");
			return this;
		}

		public Criteria andCrtimeIsNotNull() {
			addCriterion("CRTIME is not null");
			return this;
		}

		public Criteria andCrtimeEqualTo(Date value) {
			addCriterion("CRTIME =", value, "crtime");
			return this;
		}

		public Criteria andCrtimeNotEqualTo(Date value) {
			addCriterion("CRTIME <>", value, "crtime");
			return this;
		}

		public Criteria andCrtimeGreaterThan(Date value) {
			addCriterion("CRTIME >", value, "crtime");
			return this;
		}

		public Criteria andCrtimeGreaterThanOrEqualTo(Date value) {
			addCriterion("CRTIME >=", value, "crtime");
			return this;
		}

		public Criteria andCrtimeLessThan(Date value) {
			addCriterion("CRTIME <", value, "crtime");
			return this;
		}

		public Criteria andCrtimeLessThanOrEqualTo(Date value) {
			addCriterion("CRTIME <=", value, "crtime");
			return this;
		}

		public Criteria andCrtimeIn(List<Date> values) {
			addCriterion("CRTIME in", values, "crtime");
			return this;
		}

		public Criteria andCrtimeNotIn(List<Date> values) {
			addCriterion("CRTIME not in", values, "crtime");
			return this;
		}

		public Criteria andCrtimeBetween(Date value1, Date value2) {
			addCriterion("CRTIME between", value1, value2, "crtime");
			return this;
		}

		public Criteria andCrtimeNotBetween(Date value1, Date value2) {
			addCriterion("CRTIME not between", value1, value2, "crtime");
			return this;
		}

		public Criteria andCruseridIsNull() {
			addCriterion("CRUSERID is null");
			return this;
		}

		public Criteria andCruseridIsNotNull() {
			addCriterion("CRUSERID is not null");
			return this;
		}

		public Criteria andCruseridEqualTo(Long value) {
			addCriterion("CRUSERID =", value, "cruserid");
			return this;
		}

		public Criteria andCruseridNotEqualTo(Long value) {
			addCriterion("CRUSERID <>", value, "cruserid");
			return this;
		}

		public Criteria andCruseridGreaterThan(Long value) {
			addCriterion("CRUSERID >", value, "cruserid");
			return this;
		}

		public Criteria andCruseridGreaterThanOrEqualTo(Long value) {
			addCriterion("CRUSERID >=", value, "cruserid");
			return this;
		}

		public Criteria andCruseridLessThan(Long value) {
			addCriterion("CRUSERID <", value, "cruserid");
			return this;
		}

		public Criteria andCruseridLessThanOrEqualTo(Long value) {
			addCriterion("CRUSERID <=", value, "cruserid");
			return this;
		}

		public Criteria andCruseridIn(List<Long> values) {
			addCriterion("CRUSERID in", values, "cruserid");
			return this;
		}

		public Criteria andCruseridNotIn(List<Long> values) {
			addCriterion("CRUSERID not in", values, "cruserid");
			return this;
		}

		public Criteria andCruseridBetween(Long value1, Long value2) {
			addCriterion("CRUSERID between", value1, value2, "cruserid");
			return this;
		}

		public Criteria andCruseridNotBetween(Long value1, Long value2) {
			addCriterion("CRUSERID not between", value1, value2, "cruserid");
			return this;
		}
	}
}