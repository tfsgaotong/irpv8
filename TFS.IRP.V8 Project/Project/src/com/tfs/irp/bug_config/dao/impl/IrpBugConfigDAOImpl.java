package com.tfs.irp.bug_config.dao.impl;

import com.tfs.irp.bug_config.dao.IrpBugConfigDAO;
import com.tfs.irp.bug_config.entity.IrpBugConfig;
import com.tfs.irp.bug_config.entity.IrpBugConfigExample;
import java.sql.SQLException;
import java.util.List;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;

public class IrpBugConfigDAOImpl extends SqlMapClientDaoSupport implements IrpBugConfigDAO {
 
    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_BUG_CONFIG
     *
     * @ibatorgenerated Thu Jan 21 15:14:13 CST 2016
     */
    public int countByExample(IrpBugConfigExample example) throws SQLException {
        Integer count = (Integer)  getSqlMapClientTemplate().queryForObject("IRP_BUG_CONFIG.ibatorgenerated_countByExample", example);
        return count;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_BUG_CONFIG
     *
     * @ibatorgenerated Thu Jan 21 15:14:13 CST 2016
     */
    public int deleteByExample(IrpBugConfigExample example) throws SQLException {
        int rows = getSqlMapClientTemplate().delete("IRP_BUG_CONFIG.ibatorgenerated_deleteByExample", example);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_BUG_CONFIG
     *
     * @ibatorgenerated Thu Jan 21 15:14:13 CST 2016
     */
    public int deleteByPrimaryKey(Long bugconfigid) throws SQLException {
        IrpBugConfig key = new IrpBugConfig();
        key.setBugconfigid(bugconfigid);
        int rows = getSqlMapClientTemplate().delete("IRP_BUG_CONFIG.ibatorgenerated_deleteByPrimaryKey", key);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_BUG_CONFIG
     *
     * @ibatorgenerated Thu Jan 21 15:14:13 CST 2016
     */
    public void insert(IrpBugConfig record) throws SQLException {
        getSqlMapClientTemplate().insert("IRP_BUG_CONFIG.ibatorgenerated_insert", record);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_BUG_CONFIG
     *
     * @ibatorgenerated Thu Jan 21 15:14:13 CST 2016
     */
    public void insertSelective(IrpBugConfig record) throws SQLException {
        getSqlMapClientTemplate().insert("IRP_BUG_CONFIG.ibatorgenerated_insertSelective", record);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_BUG_CONFIG
     *
     * @ibatorgenerated Thu Jan 21 15:14:13 CST 2016
     */
    @SuppressWarnings("unchecked")
    public List<IrpBugConfig> selectByExample(IrpBugConfigExample example) throws SQLException {
        List<IrpBugConfig> list = getSqlMapClientTemplate().queryForList("IRP_BUG_CONFIG.ibatorgenerated_selectByExample", example);
        return list;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_BUG_CONFIG
     *
     * @ibatorgenerated Thu Jan 21 15:14:13 CST 2016
     */
    public IrpBugConfig selectByPrimaryKey(Long bugconfigid) throws SQLException {
        IrpBugConfig key = new IrpBugConfig();
        key.setBugconfigid(bugconfigid);
        IrpBugConfig record = (IrpBugConfig) getSqlMapClientTemplate().queryForObject("IRP_BUG_CONFIG.ibatorgenerated_selectByPrimaryKey", key);
        return record;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_BUG_CONFIG
     *
     * @ibatorgenerated Thu Jan 21 15:14:13 CST 2016
     */
    public int updateByExampleSelective(IrpBugConfig record, IrpBugConfigExample example) throws SQLException {
        UpdateByExampleParms parms = new UpdateByExampleParms(record, example);
        int rows = getSqlMapClientTemplate().update("IRP_BUG_CONFIG.ibatorgenerated_updateByExampleSelective", parms);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_BUG_CONFIG
     *
     * @ibatorgenerated Thu Jan 21 15:14:13 CST 2016
     */
    public int updateByExample(IrpBugConfig record, IrpBugConfigExample example) throws SQLException {
        UpdateByExampleParms parms = new UpdateByExampleParms(record, example);
        int rows = getSqlMapClientTemplate().update("IRP_BUG_CONFIG.ibatorgenerated_updateByExample", parms);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_BUG_CONFIG
     *
     * @ibatorgenerated Thu Jan 21 15:14:13 CST 2016
     */
    public int updateByPrimaryKeySelective(IrpBugConfig record) throws SQLException {
        int rows = getSqlMapClientTemplate().update("IRP_BUG_CONFIG.ibatorgenerated_updateByPrimaryKeySelective", record);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_BUG_CONFIG
     *
     * @ibatorgenerated Thu Jan 21 15:14:13 CST 2016
     */
    public int updateByPrimaryKey(IrpBugConfig record) throws SQLException {
        int rows = getSqlMapClientTemplate().update("IRP_BUG_CONFIG.ibatorgenerated_updateByPrimaryKey", record);
        return rows;
    }

    /**
     * This class was generated by Apache iBATIS ibator.
     * This class corresponds to the database table IRP_BUG_CONFIG
     *
     * @ibatorgenerated Thu Jan 21 15:14:13 CST 2016
     */
    private static class UpdateByExampleParms extends IrpBugConfigExample {
        private Object record;

        public UpdateByExampleParms(Object record, IrpBugConfigExample example) {
            super(example);
            this.record = record;
        }

        public Object getRecord() {
            return record;
        }
    }
}