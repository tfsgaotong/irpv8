package com.tfs.irp.chnl_doc_link.dao;

import com.tfs.irp.chnl_doc_link.entity.IrpChnlDocLink;
import com.tfs.irp.chnl_doc_link.entity.IrpChnlDocLinkExample; 
import com.tfs.irp.util.PageUtil;

import java.sql.SQLException;
import java.util.HashMap;
import java.util.List; 
import java.util.Map;
public interface IrpChnlDocLinkDAO {
   
    /**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table IRP_CHNL_DOC_LINK
	 * @ibatorgenerated  Fri Sep 27 15:45:21 CST 2013
	 */
	int countByExample(IrpChnlDocLinkExample example) throws SQLException;
	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table IRP_CHNL_DOC_LINK
	 * @ibatorgenerated  Fri Sep 27 15:45:21 CST 2013
	 */
	int deleteByExample(IrpChnlDocLinkExample example) throws SQLException;
	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table IRP_CHNL_DOC_LINK
	 * @ibatorgenerated  Fri Sep 27 15:45:21 CST 2013
	 */
	int deleteByPrimaryKey(Long chnldocid) throws SQLException;
	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table IRP_CHNL_DOC_LINK
	 * @ibatorgenerated  Fri Sep 27 15:45:21 CST 2013
	 */
	void insert(IrpChnlDocLink record) throws SQLException;
	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table IRP_CHNL_DOC_LINK
	 * @ibatorgenerated  Fri Sep 27 15:45:21 CST 2013
	 */
	void insertSelective(IrpChnlDocLink record) throws SQLException;
	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table IRP_CHNL_DOC_LINK
	 * @ibatorgenerated  Fri Sep 27 15:45:21 CST 2013
	 */
	List<IrpChnlDocLink> selectByExample(IrpChnlDocLinkExample example)
			throws SQLException;
	List<IrpChnlDocLink> selectByExample(IrpChnlDocLinkExample example,PageUtil pageUtil)
			throws SQLException;
	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table IRP_CHNL_DOC_LINK
	 * @ibatorgenerated  Fri Sep 27 15:45:21 CST 2013
	 */
	IrpChnlDocLink selectByPrimaryKey(Long chnldocid) throws SQLException;
	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table IRP_CHNL_DOC_LINK
	 * @ibatorgenerated  Fri Sep 27 15:45:21 CST 2013
	 */
	int updateByExampleSelective(IrpChnlDocLink record,
			IrpChnlDocLinkExample example) throws SQLException;
	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table IRP_CHNL_DOC_LINK
	 * @ibatorgenerated  Fri Sep 27 15:45:21 CST 2013
	 */
	int updateByExample(IrpChnlDocLink record, IrpChnlDocLinkExample example)
			throws SQLException;
	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table IRP_CHNL_DOC_LINK
	 * @ibatorgenerated  Fri Sep 27 15:45:21 CST 2013
	 */
	int updateByPrimaryKeySelective(IrpChnlDocLink record) throws SQLException;
	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table IRP_CHNL_DOC_LINK
	 * @ibatorgenerated  Fri Sep 27 15:45:21 CST 2013
	 */
	int updateByPrimaryKey(IrpChnlDocLink record) throws SQLException;
	List<IrpChnlDocLink> chan_AllDocLink(PageUtil pageUtil,IrpChnlDocLinkExample example)throws SQLException;
    List<IrpChnlDocLink> site_AllDocLink(PageUtil pageUtil,IrpChnlDocLinkExample example)throws SQLException;
    /**
     * 修改当前数据所属栏目的值为相反值（用在栏目的删除，级联删除栏目中的知识，或者栏目的恢复，级联恢复栏目的知识）
     * @param map
     * @throws SQLException
     */
    int updateChan_Doc_ChannelidByChannelid(HashMap<String,Long> map)throws SQLException;
    Long findChan_Doc_ChannelidByChannelid(Long channelid)throws SQLException;
    List< Long> findChanDocIdByDocid(Long docid)throws SQLException;
    int updateStatusByChnlDocid(HashMap<String,Long> map)throws SQLException;
    Long selectStatusByChnlDocid(Long chnldocid)throws SQLException;
    List<IrpChnlDocLink> chan_AllDocLinkGC(PageUtil pageUtil,IrpChnlDocLinkExample example)throws SQLException;
    List<IrpChnlDocLink> site_AllDocLinkGC(PageUtil pageUtil,IrpChnlDocLinkExample example) throws SQLException;
    public Long selectChnlDocidByDoctitle(String doctitle)throws SQLException ;
    public List<IrpChnlDocLink> chan_allDoctitle(Long channelid)throws SQLException ;
    public int selectCountByChannelidAndDocStatus(IrpChnlDocLinkExample example) throws SQLException;
    public int selectCountBySiteIdAndDocStatus(IrpChnlDocLinkExample example) throws SQLException;
    public int selectCountByChannelidAndDocStatusGC(IrpChnlDocLinkExample example) throws SQLException;
    public int selectCountBySiteIdAndDocStatusGC(IrpChnlDocLinkExample example) throws SQLException;
    /**
     * 得到前台，用户关注的某个人的�?��文档
     * @param example
     * @return
     * @throws SQLException
     */
	List<IrpChnlDocLink> getPersonLink(PageUtil pageUtil,IrpChnlDocLinkExample example)
			throws SQLException;
	/***
	 * 根据条件获取用户id
	 * @param chnlDocLinkExample
	 * @return
	 */
	List getCruSeridsByExample(IrpChnlDocLinkExample chnlDocLinkExample)throws SQLException ;
	/**
	 * 根据条件将文档移动到某个栏目下去
	 */
	 int updateByChannelidExampleSelective(IrpChnlDocLink record, IrpChnlDocLinkExample example)throws SQLException  ;
	 List<IrpChnlDocLink> monthDocument(Long _chnltype)throws SQLException;
	 /**
	  * 经典案例
	  */
	 List<IrpChnlDocLink> typicalDocLink(IrpChnlDocLinkExample example,PageUtil pageUtil)throws SQLException;
	int sumByExample(IrpChnlDocLinkExample example) throws SQLException;
	List<Long> findDocidsByExample(IrpChnlDocLinkExample chnlDocLinkExample) throws SQLException;
	/**
	 * 查询根据所给条件查询举报知识或者非法知识
	 * @param map
	 * @param pageUtil
	 * @return
	 * @throws SQLException
	 */
	List<HashMap<String, Object>> findJuBaoDocument(
			HashMap<String, Object> map, PageUtil pageUtil) throws SQLException;
	/**
	 * 查询举报或者非法知识的数量
	 * @param map
	 * @return
	 * @throws SQLException
	 */
	Integer findJuBaoDocumentCount(HashMap<String, Object> map)
			throws SQLException;
	/**
	 * 精华知识列表的数量
	 * @param example
	 * @return
	 * @throws SQLException
	 */
	int typicalDocLinkAmount(IrpChnlDocLinkExample example) throws SQLException;
	
	/**
	 * 查询最新的评论数据
	 * @param _mParam
	 * @param nDataCount
	 * @return
	 * @throws SQLException
	 */
	List<Map<String, Object>> findNewCommentDatas(Map<String, Object> _mParam, int nDataCount) throws SQLException;
	
	/**
	 * 查询精华知识
	 * @param _mParam
	 * @param pageUtil
	 * @return
	 * @throws SQLException
	 */
	List<IrpChnlDocLink> selectEssenceDocs(Map<String, Object> _mParam, PageUtil pageUtil) throws SQLException;
	
	/**
	 * 查询精华知识数量
	 * @param _mParam
	 * @return
	 * @throws SQLException
	 */
	int countEssenceDocs(Map<String, Object> _mParam) throws SQLException;
}