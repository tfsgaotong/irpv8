package com.tfs.irp.complain.entity;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

public class IrpComplainExample {
    /**
     * This field was generated by Apache iBATIS ibator.
     * This field corresponds to the database table IRP_COMPLAIN
     *
     * @ibatorgenerated Tue Sep 24 10:03:35 CST 2013
     */
    protected String orderByClause;

    /**
     * This field was generated by Apache iBATIS ibator.
     * This field corresponds to the database table IRP_COMPLAIN
     *
     * @ibatorgenerated Tue Sep 24 10:03:35 CST 2013
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_COMPLAIN
     *
     * @ibatorgenerated Tue Sep 24 10:03:35 CST 2013
     */
    public IrpComplainExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_COMPLAIN
     *
     * @ibatorgenerated Tue Sep 24 10:03:35 CST 2013
     */
    protected IrpComplainExample(IrpComplainExample example) {
        this.orderByClause = example.orderByClause;
        this.oredCriteria = example.oredCriteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_COMPLAIN
     *
     * @ibatorgenerated Tue Sep 24 10:03:35 CST 2013
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_COMPLAIN
     *
     * @ibatorgenerated Tue Sep 24 10:03:35 CST 2013
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_COMPLAIN
     *
     * @ibatorgenerated Tue Sep 24 10:03:35 CST 2013
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_COMPLAIN
     *
     * @ibatorgenerated Tue Sep 24 10:03:35 CST 2013
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_COMPLAIN
     *
     * @ibatorgenerated Tue Sep 24 10:03:35 CST 2013
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_COMPLAIN
     *
     * @ibatorgenerated Tue Sep 24 10:03:35 CST 2013
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_COMPLAIN
     *
     * @ibatorgenerated Tue Sep 24 10:03:35 CST 2013
     */
    public void clear() {
        oredCriteria.clear();
    }

    /**
     * This class was generated by Apache iBATIS ibator.
     * This class corresponds to the database table IRP_COMPLAIN
     *
     * @ibatorgenerated Tue Sep 24 10:03:35 CST 2013
     */
    public static class Criteria {
        protected List<String> criteriaWithoutValue;

        protected List<Map<String, Object>> criteriaWithSingleValue;

        protected List<Map<String, Object>> criteriaWithListValue;

        protected List<Map<String, Object>> criteriaWithBetweenValue;

        protected Criteria() {
            super();
            criteriaWithoutValue = new ArrayList<String>();
            criteriaWithSingleValue = new ArrayList<Map<String, Object>>();
            criteriaWithListValue = new ArrayList<Map<String, Object>>();
            criteriaWithBetweenValue = new ArrayList<Map<String, Object>>();
        }

        public boolean isValid() {
            return criteriaWithoutValue.size() > 0
                || criteriaWithSingleValue.size() > 0
                || criteriaWithListValue.size() > 0
                || criteriaWithBetweenValue.size() > 0;
        }

        public List<String> getCriteriaWithoutValue() {
            return criteriaWithoutValue;
        }

        public List<Map<String, Object>> getCriteriaWithSingleValue() {
            return criteriaWithSingleValue;
        }

        public List<Map<String, Object>> getCriteriaWithListValue() {
            return criteriaWithListValue;
        }

        public List<Map<String, Object>> getCriteriaWithBetweenValue() {
            return criteriaWithBetweenValue;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteriaWithoutValue.add(condition);
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("condition", condition);
            map.put("value", value);
            criteriaWithSingleValue.add(map);
        }

        protected void addCriterion(String condition, List<? extends Object> values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("condition", condition);
            map.put("values", values);
            criteriaWithListValue.add(map);
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            List<Object> list = new ArrayList<Object>();
            list.add(value1);
            list.add(value2);
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("condition", condition);
            map.put("values", list);
            criteriaWithBetweenValue.add(map);
        }

        protected void addCriterionForJDBCDate(String condition, Date value, String property) {
            addCriterion(condition, new java.sql.Date(value.getTime()), property);
        }

        protected void addCriterionForJDBCDate(String condition, List<Date> values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            List<java.sql.Date> dateList = new ArrayList<java.sql.Date>();
            Iterator<Date> iter = values.iterator();
            while (iter.hasNext()) {
                dateList.add(new java.sql.Date(iter.next().getTime()));
            }
            addCriterion(condition, dateList, property);
        }

        protected void addCriterionForJDBCDate(String condition, Date value1, Date value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            addCriterion(condition, new java.sql.Date(value1.getTime()), new java.sql.Date(value2.getTime()), property);
        }

        public Criteria andComplainidIsNull() {
            addCriterion("COMPLAINID is null");
            return this;
        }

        public Criteria andComplainidIsNotNull() {
            addCriterion("COMPLAINID is not null");
            return this;
        }

        public Criteria andComplainidEqualTo(Long value) {
            addCriterion("COMPLAINID =", value, "complainid");
            return this;
        }

        public Criteria andComplainidNotEqualTo(Long value) {
            addCriterion("COMPLAINID <>", value, "complainid");
            return this;
        }

        public Criteria andComplainidGreaterThan(Long value) {
            addCriterion("COMPLAINID >", value, "complainid");
            return this;
        }

        public Criteria andComplainidGreaterThanOrEqualTo(Long value) {
            addCriterion("COMPLAINID >=", value, "complainid");
            return this;
        }

        public Criteria andComplainidLessThan(Long value) {
            addCriterion("COMPLAINID <", value, "complainid");
            return this;
        }

        public Criteria andComplainidLessThanOrEqualTo(Long value) {
            addCriterion("COMPLAINID <=", value, "complainid");
            return this;
        }

        public Criteria andComplainidIn(List<Long> values) {
            addCriterion("COMPLAINID in", values, "complainid");
            return this;
        }

        public Criteria andComplainidNotIn(List<Long> values) {
            addCriterion("COMPLAINID not in", values, "complainid");
            return this;
        }

        public Criteria andComplainidBetween(Long value1, Long value2) {
            addCriterion("COMPLAINID between", value1, value2, "complainid");
            return this;
        }

        public Criteria andComplainidNotBetween(Long value1, Long value2) {
            addCriterion("COMPLAINID not between", value1, value2, "complainid");
            return this;
        }

        public Criteria andComplaintypeidIsNull() {
            addCriterion("COMPLAINTYPEID is null");
            return this;
        }

        public Criteria andComplaintypeidIsNotNull() {
            addCriterion("COMPLAINTYPEID is not null");
            return this;
        }

        public Criteria andComplaintypeidEqualTo(Long value) {
            addCriterion("COMPLAINTYPEID =", value, "complaintypeid");
            return this;
        }

        public Criteria andComplaintypeidNotEqualTo(Long value) {
            addCriterion("COMPLAINTYPEID <>", value, "complaintypeid");
            return this;
        }

        public Criteria andComplaintypeidGreaterThan(Long value) {
            addCriterion("COMPLAINTYPEID >", value, "complaintypeid");
            return this;
        }

        public Criteria andComplaintypeidGreaterThanOrEqualTo(Long value) {
            addCriterion("COMPLAINTYPEID >=", value, "complaintypeid");
            return this;
        }

        public Criteria andComplaintypeidLessThan(Long value) {
            addCriterion("COMPLAINTYPEID <", value, "complaintypeid");
            return this;
        }

        public Criteria andComplaintypeidLessThanOrEqualTo(Long value) {
            addCriterion("COMPLAINTYPEID <=", value, "complaintypeid");
            return this;
        }

        public Criteria andComplaintypeidIn(List<Long> values) {
            addCriterion("COMPLAINTYPEID in", values, "complaintypeid");
            return this;
        }

        public Criteria andComplaintypeidNotIn(List<Long> values) {
            addCriterion("COMPLAINTYPEID not in", values, "complaintypeid");
            return this;
        }

        public Criteria andComplaintypeidBetween(Long value1, Long value2) {
            addCriterion("COMPLAINTYPEID between", value1, value2, "complaintypeid");
            return this;
        }

        public Criteria andComplaintypeidNotBetween(Long value1, Long value2) {
            addCriterion("COMPLAINTYPEID not between", value1, value2, "complaintypeid");
            return this;
        }

        public Criteria andComplaindescIsNull() {
            addCriterion("COMPLAINDESC is null");
            return this;
        }

        public Criteria andComplaindescIsNotNull() {
            addCriterion("COMPLAINDESC is not null");
            return this;
        }

        public Criteria andComplaindescEqualTo(String value) {
            addCriterion("COMPLAINDESC =", value, "complaindesc");
            return this;
        }

        public Criteria andComplaindescNotEqualTo(String value) {
            addCriterion("COMPLAINDESC <>", value, "complaindesc");
            return this;
        }

        public Criteria andComplaindescGreaterThan(String value) {
            addCriterion("COMPLAINDESC >", value, "complaindesc");
            return this;
        }

        public Criteria andComplaindescGreaterThanOrEqualTo(String value) {
            addCriterion("COMPLAINDESC >=", value, "complaindesc");
            return this;
        }

        public Criteria andComplaindescLessThan(String value) {
            addCriterion("COMPLAINDESC <", value, "complaindesc");
            return this;
        }

        public Criteria andComplaindescLessThanOrEqualTo(String value) {
            addCriterion("COMPLAINDESC <=", value, "complaindesc");
            return this;
        }

        public Criteria andComplaindescLike(String value) {
            addCriterion("COMPLAINDESC like", value, "complaindesc");
            return this;
        }

        public Criteria andComplaindescNotLike(String value) {
            addCriterion("COMPLAINDESC not like", value, "complaindesc");
            return this;
        }

        public Criteria andComplaindescIn(List<String> values) {
            addCriterion("COMPLAINDESC in", values, "complaindesc");
            return this;
        }

        public Criteria andComplaindescNotIn(List<String> values) {
            addCriterion("COMPLAINDESC not in", values, "complaindesc");
            return this;
        }

        public Criteria andComplaindescBetween(String value1, String value2) {
            addCriterion("COMPLAINDESC between", value1, value2, "complaindesc");
            return this;
        }

        public Criteria andComplaindescNotBetween(String value1, String value2) {
            addCriterion("COMPLAINDESC not between", value1, value2, "complaindesc");
            return this;
        }

        public Criteria andAnsquesIsNull() {
            addCriterion("ANSQUES is null");
            return this;
        }

        public Criteria andAnsquesIsNotNull() {
            addCriterion("ANSQUES is not null");
            return this;
        }

        public Criteria andAnsquesEqualTo(Short value) {
            addCriterion("ANSQUES =", value, "ansques");
            return this;
        }

        public Criteria andAnsquesNotEqualTo(Short value) {
            addCriterion("ANSQUES <>", value, "ansques");
            return this;
        }

        public Criteria andAnsquesGreaterThan(Short value) {
            addCriterion("ANSQUES >", value, "ansques");
            return this;
        }

        public Criteria andAnsquesGreaterThanOrEqualTo(Short value) {
            addCriterion("ANSQUES >=", value, "ansques");
            return this;
        }

        public Criteria andAnsquesLessThan(Short value) {
            addCriterion("ANSQUES <", value, "ansques");
            return this;
        }

        public Criteria andAnsquesLessThanOrEqualTo(Short value) {
            addCriterion("ANSQUES <=", value, "ansques");
            return this;
        }

        public Criteria andAnsquesIn(List<Short> values) {
            addCriterion("ANSQUES in", values, "ansques");
            return this;
        }

        public Criteria andAnsquesNotIn(List<Short> values) {
            addCriterion("ANSQUES not in", values, "ansques");
            return this;
        }

        public Criteria andAnsquesBetween(Short value1, Short value2) {
            addCriterion("ANSQUES between", value1, value2, "ansques");
            return this;
        }

        public Criteria andAnsquesNotBetween(Short value1, Short value2) {
            addCriterion("ANSQUES not between", value1, value2, "ansques");
            return this;
        }

        public Criteria andParentidIsNull() {
            addCriterion("PARENTID is null");
            return this;
        }

        public Criteria andParentidIsNotNull() {
            addCriterion("PARENTID is not null");
            return this;
        }

        public Criteria andParentidEqualTo(Long value) {
            addCriterion("PARENTID =", value, "parentid");
            return this;
        }

        public Criteria andParentidNotEqualTo(Long value) {
            addCriterion("PARENTID <>", value, "parentid");
            return this;
        }

        public Criteria andParentidGreaterThan(Long value) {
            addCriterion("PARENTID >", value, "parentid");
            return this;
        }

        public Criteria andParentidGreaterThanOrEqualTo(Long value) {
            addCriterion("PARENTID >=", value, "parentid");
            return this;
        }

        public Criteria andParentidLessThan(Long value) {
            addCriterion("PARENTID <", value, "parentid");
            return this;
        }

        public Criteria andParentidLessThanOrEqualTo(Long value) {
            addCriterion("PARENTID <=", value, "parentid");
            return this;
        }

        public Criteria andParentidIn(List<Long> values) {
            addCriterion("PARENTID in", values, "parentid");
            return this;
        }

        public Criteria andParentidNotIn(List<Long> values) {
            addCriterion("PARENTID not in", values, "parentid");
            return this;
        }

        public Criteria andParentidBetween(Long value1, Long value2) {
            addCriterion("PARENTID between", value1, value2, "parentid");
            return this;
        }

        public Criteria andParentidNotBetween(Long value1, Long value2) {
            addCriterion("PARENTID not between", value1, value2, "parentid");
            return this;
        }

        public Criteria andCreatuserIsNull() {
            addCriterion("CREATUSER is null");
            return this;
        }

        public Criteria andCreatuserIsNotNull() {
            addCriterion("CREATUSER is not null");
            return this;
        }

        public Criteria andCreatuserEqualTo(String value) {
            addCriterion("CREATUSER =", value, "creatuser");
            return this;
        }

        public Criteria andCreatuserNotEqualTo(String value) {
            addCriterion("CREATUSER <>", value, "creatuser");
            return this;
        }

        public Criteria andCreatuserGreaterThan(String value) {
            addCriterion("CREATUSER >", value, "creatuser");
            return this;
        }

        public Criteria andCreatuserGreaterThanOrEqualTo(String value) {
            addCriterion("CREATUSER >=", value, "creatuser");
            return this;
        }

        public Criteria andCreatuserLessThan(String value) {
            addCriterion("CREATUSER <", value, "creatuser");
            return this;
        }

        public Criteria andCreatuserLessThanOrEqualTo(String value) {
            addCriterion("CREATUSER <=", value, "creatuser");
            return this;
        }

        public Criteria andCreatuserLike(String value) {
            addCriterion("CREATUSER like", value, "creatuser");
            return this;
        }

        public Criteria andCreatuserNotLike(String value) {
            addCriterion("CREATUSER not like", value, "creatuser");
            return this;
        }

        public Criteria andCreatuserIn(List<String> values) {
            addCriterion("CREATUSER in", values, "creatuser");
            return this;
        }

        public Criteria andCreatuserNotIn(List<String> values) {
            addCriterion("CREATUSER not in", values, "creatuser");
            return this;
        }

        public Criteria andCreatuserBetween(String value1, String value2) {
            addCriterion("CREATUSER between", value1, value2, "creatuser");
            return this;
        }

        public Criteria andCreatuserNotBetween(String value1, String value2) {
            addCriterion("CREATUSER not between", value1, value2, "creatuser");
            return this;
        }

        public Criteria andCreattimeIsNull() {
            addCriterion("CREATTIME is null");
            return this;
        }

        public Criteria andCreattimeIsNotNull() {
            addCriterion("CREATTIME is not null");
            return this;
        }

        public Criteria andCreattimeEqualTo(Date value) {
            addCriterionForJDBCDate("CREATTIME =", value, "creattime");
            return this;
        }

        public Criteria andCreattimeNotEqualTo(Date value) {
            addCriterionForJDBCDate("CREATTIME <>", value, "creattime");
            return this;
        }

        public Criteria andCreattimeGreaterThan(Date value) {
            addCriterionForJDBCDate("CREATTIME >", value, "creattime");
            return this;
        }

        public Criteria andCreattimeGreaterThanOrEqualTo(Date value) {
            addCriterionForJDBCDate("CREATTIME >=", value, "creattime");
            return this;
        }

        public Criteria andCreattimeLessThan(Date value) {
            addCriterionForJDBCDate("CREATTIME <", value, "creattime");
            return this;
        }

        public Criteria andCreattimeLessThanOrEqualTo(Date value) {
            addCriterionForJDBCDate("CREATTIME <=", value, "creattime");
            return this;
        }

        public Criteria andCreattimeIn(List<Date> values) {
            addCriterionForJDBCDate("CREATTIME in", values, "creattime");
            return this;
        }

        public Criteria andCreattimeNotIn(List<Date> values) {
            addCriterionForJDBCDate("CREATTIME not in", values, "creattime");
            return this;
        }

        public Criteria andCreattimeBetween(Date value1, Date value2) {
            addCriterionForJDBCDate("CREATTIME between", value1, value2, "creattime");
            return this;
        }

        public Criteria andCreattimeNotBetween(Date value1, Date value2) {
            addCriterionForJDBCDate("CREATTIME not between", value1, value2, "creattime");
            return this;
        }

        public Criteria andAnswuserIsNull() {
            addCriterion("ANSWUSER is null");
            return this;
        }

        public Criteria andAnswuserIsNotNull() {
            addCriterion("ANSWUSER is not null");
            return this;
        }

        public Criteria andAnswuserEqualTo(String value) {
            addCriterion("ANSWUSER =", value, "answuser");
            return this;
        }

        public Criteria andAnswuserNotEqualTo(String value) {
            addCriterion("ANSWUSER <>", value, "answuser");
            return this;
        }

        public Criteria andAnswuserGreaterThan(String value) {
            addCriterion("ANSWUSER >", value, "answuser");
            return this;
        }

        public Criteria andAnswuserGreaterThanOrEqualTo(String value) {
            addCriterion("ANSWUSER >=", value, "answuser");
            return this;
        }

        public Criteria andAnswuserLessThan(String value) {
            addCriterion("ANSWUSER <", value, "answuser");
            return this;
        }

        public Criteria andAnswuserLessThanOrEqualTo(String value) {
            addCriterion("ANSWUSER <=", value, "answuser");
            return this;
        }

        public Criteria andAnswuserLike(String value) {
            addCriterion("ANSWUSER like", value, "answuser");
            return this;
        }

        public Criteria andAnswuserNotLike(String value) {
            addCriterion("ANSWUSER not like", value, "answuser");
            return this;
        }

        public Criteria andAnswuserIn(List<String> values) {
            addCriterion("ANSWUSER in", values, "answuser");
            return this;
        }

        public Criteria andAnswuserNotIn(List<String> values) {
            addCriterion("ANSWUSER not in", values, "answuser");
            return this;
        }

        public Criteria andAnswuserBetween(String value1, String value2) {
            addCriterion("ANSWUSER between", value1, value2, "answuser");
            return this;
        }

        public Criteria andAnswuserNotBetween(String value1, String value2) {
            addCriterion("ANSWUSER not between", value1, value2, "answuser");
            return this;
        }
    }
}