package com.tfs.irp.configType.entity;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class IrpConfigTypeExample {
    /**
     * This field was generated by Apache iBATIS ibator.
     * This field corresponds to the database table IRP.IRP_CONFIG_TYPE
     *
     * @ibatorgenerated Fri Mar 22 16:24:53 CST 2013
     */
    protected String orderByClause;

    /**
     * This field was generated by Apache iBATIS ibator.
     * This field corresponds to the database table IRP.IRP_CONFIG_TYPE
     *
     * @ibatorgenerated Fri Mar 22 16:24:53 CST 2013
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP.IRP_CONFIG_TYPE
     *
     * @ibatorgenerated Fri Mar 22 16:24:53 CST 2013
     */
    public IrpConfigTypeExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP.IRP_CONFIG_TYPE
     *
     * @ibatorgenerated Fri Mar 22 16:24:53 CST 2013
     */
    protected IrpConfigTypeExample(IrpConfigTypeExample example) {
        this.orderByClause = example.orderByClause;
        this.oredCriteria = example.oredCriteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP.IRP_CONFIG_TYPE
     *
     * @ibatorgenerated Fri Mar 22 16:24:53 CST 2013
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP.IRP_CONFIG_TYPE
     *
     * @ibatorgenerated Fri Mar 22 16:24:53 CST 2013
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP.IRP_CONFIG_TYPE
     *
     * @ibatorgenerated Fri Mar 22 16:24:53 CST 2013
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP.IRP_CONFIG_TYPE
     *
     * @ibatorgenerated Fri Mar 22 16:24:53 CST 2013
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP.IRP_CONFIG_TYPE
     *
     * @ibatorgenerated Fri Mar 22 16:24:53 CST 2013
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP.IRP_CONFIG_TYPE
     *
     * @ibatorgenerated Fri Mar 22 16:24:53 CST 2013
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP.IRP_CONFIG_TYPE
     *
     * @ibatorgenerated Fri Mar 22 16:24:53 CST 2013
     */
    public void clear() {
        oredCriteria.clear();
    }

    /**
     * This class was generated by Apache iBATIS ibator.
     * This class corresponds to the database table IRP.IRP_CONFIG_TYPE
     *
     * @ibatorgenerated Fri Mar 22 16:24:53 CST 2013
     */
    public static class Criteria {
        protected List<String> criteriaWithoutValue;

        protected List<Map<String, Object>> criteriaWithSingleValue;

        protected List<Map<String, Object>> criteriaWithListValue;

        protected List<Map<String, Object>> criteriaWithBetweenValue;

        protected Criteria() {
            super();
            criteriaWithoutValue = new ArrayList<String>();
            criteriaWithSingleValue = new ArrayList<Map<String, Object>>();
            criteriaWithListValue = new ArrayList<Map<String, Object>>();
            criteriaWithBetweenValue = new ArrayList<Map<String, Object>>();
        }

        public boolean isValid() {
            return criteriaWithoutValue.size() > 0
                || criteriaWithSingleValue.size() > 0
                || criteriaWithListValue.size() > 0
                || criteriaWithBetweenValue.size() > 0;
        }

        public List<String> getCriteriaWithoutValue() {
            return criteriaWithoutValue;
        }

        public List<Map<String, Object>> getCriteriaWithSingleValue() {
            return criteriaWithSingleValue;
        }

        public List<Map<String, Object>> getCriteriaWithListValue() {
            return criteriaWithListValue;
        }

        public List<Map<String, Object>> getCriteriaWithBetweenValue() {
            return criteriaWithBetweenValue;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteriaWithoutValue.add(condition);
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("condition", condition);
            map.put("value", value);
            criteriaWithSingleValue.add(map);
        }

        protected void addCriterion(String condition, List<? extends Object> values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("condition", condition);
            map.put("values", values);
            criteriaWithListValue.add(map);
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            List<Object> list = new ArrayList<Object>();
            list.add(value1);
            list.add(value2);
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("condition", condition);
            map.put("values", list);
            criteriaWithBetweenValue.add(map);
        }

        public Criteria andConfigtypeidIsNull() {
            addCriterion("CONFIGTYPEID is null");
            return this;
        }

        public Criteria andConfigtypeidIsNotNull() {
            addCriterion("CONFIGTYPEID is not null");
            return this;
        }

        public Criteria andConfigtypeidEqualTo(Long value) {
            addCriterion("CONFIGTYPEID =", value, "configtypeid");
            return this;
        }

        public Criteria andConfigtypeidNotEqualTo(Long value) {
            addCriterion("CONFIGTYPEID <>", value, "configtypeid");
            return this;
        }

        public Criteria andConfigtypeidGreaterThan(Long value) {
            addCriterion("CONFIGTYPEID >", value, "configtypeid");
            return this;
        }

        public Criteria andConfigtypeidGreaterThanOrEqualTo(Long value) {
            addCriterion("CONFIGTYPEID >=", value, "configtypeid");
            return this;
        }

        public Criteria andConfigtypeidLessThan(Long value) {
            addCriterion("CONFIGTYPEID <", value, "configtypeid");
            return this;
        }

        public Criteria andConfigtypeidLessThanOrEqualTo(Long value) {
            addCriterion("CONFIGTYPEID <=", value, "configtypeid");
            return this;
        }

        public Criteria andConfigtypeidIn(List<Long> values) {
            addCriterion("CONFIGTYPEID in", values, "configtypeid");
            return this;
        }

        public Criteria andConfigtypeidNotIn(List<Long> values) {
            addCriterion("CONFIGTYPEID not in", values, "configtypeid");
            return this;
        }

        public Criteria andConfigtypeidBetween(Long value1, Long value2) {
            addCriterion("CONFIGTYPEID between", value1, value2, "configtypeid");
            return this;
        }

        public Criteria andConfigtypeidNotBetween(Long value1, Long value2) {
            addCriterion("CONFIGTYPEID not between", value1, value2, "configtypeid");
            return this;
        }

        public Criteria andConfignameIsNull() {
            addCriterion("CONFIGNAME is null");
            return this;
        }

        public Criteria andConfignameIsNotNull() {
            addCriterion("CONFIGNAME is not null");
            return this;
        }

        public Criteria andConfignameEqualTo(String value) {
            addCriterion("CONFIGNAME =", value, "configname");
            return this;
        }

        public Criteria andConfignameNotEqualTo(String value) {
            addCriterion("CONFIGNAME <>", value, "configname");
            return this;
        }

        public Criteria andConfignameGreaterThan(String value) {
            addCriterion("CONFIGNAME >", value, "configname");
            return this;
        }

        public Criteria andConfignameGreaterThanOrEqualTo(String value) {
            addCriterion("CONFIGNAME >=", value, "configname");
            return this;
        }

        public Criteria andConfignameLessThan(String value) {
            addCriterion("CONFIGNAME <", value, "configname");
            return this;
        }

        public Criteria andConfignameLessThanOrEqualTo(String value) {
            addCriterion("CONFIGNAME <=", value, "configname");
            return this;
        }

        public Criteria andConfignameLike(String value) {
            addCriterion("CONFIGNAME like", value, "configname");
            return this;
        }

        public Criteria andConfignameNotLike(String value) {
            addCriterion("CONFIGNAME not like", value, "configname");
            return this;
        }

        public Criteria andConfignameIn(List<String> values) {
            addCriterion("CONFIGNAME in", values, "configname");
            return this;
        }

        public Criteria andConfignameNotIn(List<String> values) {
            addCriterion("CONFIGNAME not in", values, "configname");
            return this;
        }

        public Criteria andConfignameBetween(String value1, String value2) {
            addCriterion("CONFIGNAME between", value1, value2, "configname");
            return this;
        }

        public Criteria andConfignameNotBetween(String value1, String value2) {
            addCriterion("CONFIGNAME not between", value1, value2, "configname");
            return this;
        }

        public Criteria andConfigdescIsNull() {
            addCriterion("CONFIGDESC is null");
            return this;
        }

        public Criteria andConfigdescIsNotNull() {
            addCriterion("CONFIGDESC is not null");
            return this;
        }

        public Criteria andConfigdescEqualTo(String value) {
            addCriterion("CONFIGDESC =", value, "configdesc");
            return this;
        }

        public Criteria andConfigdescNotEqualTo(String value) {
            addCriterion("CONFIGDESC <>", value, "configdesc");
            return this;
        }

        public Criteria andConfigdescGreaterThan(String value) {
            addCriterion("CONFIGDESC >", value, "configdesc");
            return this;
        }

        public Criteria andConfigdescGreaterThanOrEqualTo(String value) {
            addCriterion("CONFIGDESC >=", value, "configdesc");
            return this;
        }

        public Criteria andConfigdescLessThan(String value) {
            addCriterion("CONFIGDESC <", value, "configdesc");
            return this;
        }

        public Criteria andConfigdescLessThanOrEqualTo(String value) {
            addCriterion("CONFIGDESC <=", value, "configdesc");
            return this;
        }

        public Criteria andConfigdescLike(String value) {
            addCriterion("CONFIGDESC like", value, "configdesc");
            return this;
        }

        public Criteria andConfigdescNotLike(String value) {
            addCriterion("CONFIGDESC not like", value, "configdesc");
            return this;
        }

        public Criteria andConfigdescIn(List<String> values) {
            addCriterion("CONFIGDESC in", values, "configdesc");
            return this;
        }

        public Criteria andConfigdescNotIn(List<String> values) {
            addCriterion("CONFIGDESC not in", values, "configdesc");
            return this;
        }

        public Criteria andConfigdescBetween(String value1, String value2) {
            addCriterion("CONFIGDESC between", value1, value2, "configdesc");
            return this;
        }

        public Criteria andConfigdescNotBetween(String value1, String value2) {
            addCriterion("CONFIGDESC not between", value1, value2, "configdesc");
            return this;
        }
    }
}