package com.tfs.irp.doc_tag.entity;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

public class IrpDocTagExample {
    /**
     * This field was generated by Apache iBATIS ibator.
     * This field corresponds to the database table IRP_DOC_TAG
     *
     * @ibatorgenerated Mon Apr 22 09:11:56 CST 2013
     */
    protected String orderByClause;

    /**
     * This field was generated by Apache iBATIS ibator.
     * This field corresponds to the database table IRP_DOC_TAG
     *
     * @ibatorgenerated Mon Apr 22 09:11:56 CST 2013
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_DOC_TAG
     *
     * @ibatorgenerated Mon Apr 22 09:11:56 CST 2013
     */
    public IrpDocTagExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_DOC_TAG
     *
     * @ibatorgenerated Mon Apr 22 09:11:56 CST 2013
     */
    protected IrpDocTagExample(IrpDocTagExample example) {
        this.orderByClause = example.orderByClause;
        this.oredCriteria = example.oredCriteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_DOC_TAG
     *
     * @ibatorgenerated Mon Apr 22 09:11:56 CST 2013
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_DOC_TAG
     *
     * @ibatorgenerated Mon Apr 22 09:11:56 CST 2013
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_DOC_TAG
     *
     * @ibatorgenerated Mon Apr 22 09:11:56 CST 2013
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_DOC_TAG
     *
     * @ibatorgenerated Mon Apr 22 09:11:56 CST 2013
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_DOC_TAG
     *
     * @ibatorgenerated Mon Apr 22 09:11:56 CST 2013
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_DOC_TAG
     *
     * @ibatorgenerated Mon Apr 22 09:11:56 CST 2013
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_DOC_TAG
     *
     * @ibatorgenerated Mon Apr 22 09:11:56 CST 2013
     */
    public void clear() {
        oredCriteria.clear();
    }

    /**
     * This class was generated by Apache iBATIS ibator.
     * This class corresponds to the database table IRP_DOC_TAG
     *
     * @ibatorgenerated Mon Apr 22 09:11:56 CST 2013
     */
    public static class Criteria {
        protected List<String> criteriaWithoutValue;

        protected List<Map<String, Object>> criteriaWithSingleValue;

        protected List<Map<String, Object>> criteriaWithListValue;

        protected List<Map<String, Object>> criteriaWithBetweenValue;

        protected Criteria() {
            super();
            criteriaWithoutValue = new ArrayList<String>();
            criteriaWithSingleValue = new ArrayList<Map<String, Object>>();
            criteriaWithListValue = new ArrayList<Map<String, Object>>();
            criteriaWithBetweenValue = new ArrayList<Map<String, Object>>();
        }

        public boolean isValid() {
            return criteriaWithoutValue.size() > 0
                || criteriaWithSingleValue.size() > 0
                || criteriaWithListValue.size() > 0
                || criteriaWithBetweenValue.size() > 0;
        }

        public List<String> getCriteriaWithoutValue() {
            return criteriaWithoutValue;
        }

        public List<Map<String, Object>> getCriteriaWithSingleValue() {
            return criteriaWithSingleValue;
        }

        public List<Map<String, Object>> getCriteriaWithListValue() {
            return criteriaWithListValue;
        }

        public List<Map<String, Object>> getCriteriaWithBetweenValue() {
            return criteriaWithBetweenValue;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteriaWithoutValue.add(condition);
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("condition", condition);
            map.put("value", value);
            criteriaWithSingleValue.add(map);
        }

        protected void addCriterion(String condition, List<? extends Object> values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("condition", condition);
            map.put("values", values);
            criteriaWithListValue.add(map);
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            List<Object> list = new ArrayList<Object>();
            list.add(value1);
            list.add(value2);
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("condition", condition);
            map.put("values", list);
            criteriaWithBetweenValue.add(map);
        }

        protected void addCriterionForJDBCDate(String condition, Date value, String property) {
            addCriterion(condition, new java.sql.Date(value.getTime()), property);
        }

        protected void addCriterionForJDBCDate(String condition, List<Date> values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            List<java.sql.Date> dateList = new ArrayList<java.sql.Date>();
            Iterator<Date> iter = values.iterator();
            while (iter.hasNext()) {
                dateList.add(new java.sql.Date(iter.next().getTime()));
            }
            addCriterion(condition, dateList, property);
        }

        protected void addCriterionForJDBCDate(String condition, Date value1, Date value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            addCriterion(condition, new java.sql.Date(value1.getTime()), new java.sql.Date(value2.getTime()), property);
        }

        public Criteria andDoctagidIsNull() {
            addCriterion("DOCTAGID is null");
            return this;
        }

        public Criteria andDoctagidIsNotNull() {
            addCriterion("DOCTAGID is not null");
            return this;
        }

        public Criteria andDoctagidEqualTo(Long value) {
            addCriterion("DOCTAGID =", value, "doctagid");
            return this;
        }

        public Criteria andDoctagidNotEqualTo(Long value) {
            addCriterion("DOCTAGID <>", value, "doctagid");
            return this;
        }

        public Criteria andDoctagidGreaterThan(Long value) {
            addCriterion("DOCTAGID >", value, "doctagid");
            return this;
        }

        public Criteria andDoctagidGreaterThanOrEqualTo(Long value) {
            addCriterion("DOCTAGID >=", value, "doctagid");
            return this;
        }

        public Criteria andDoctagidLessThan(Long value) {
            addCriterion("DOCTAGID <", value, "doctagid");
            return this;
        }

        public Criteria andDoctagidLessThanOrEqualTo(Long value) {
            addCriterion("DOCTAGID <=", value, "doctagid");
            return this;
        }

        public Criteria andDoctagidIn(List<Long> values) {
            addCriterion("DOCTAGID in", values, "doctagid");
            return this;
        }

        public Criteria andDoctagidNotIn(List<Long> values) {
            addCriterion("DOCTAGID not in", values, "doctagid");
            return this;
        }

        public Criteria andDoctagidBetween(Long value1, Long value2) {
            addCriterion("DOCTAGID between", value1, value2, "doctagid");
            return this;
        }

        public Criteria andDoctagidNotBetween(Long value1, Long value2) {
            addCriterion("DOCTAGID not between", value1, value2, "doctagid");
            return this;
        }

        public Criteria andDocidIsNull() {
            addCriterion("DOCID is null");
            return this;
        }

        public Criteria andDocidIsNotNull() {
            addCriterion("DOCID is not null");
            return this;
        }

        public Criteria andDocidEqualTo(Long value) {
            addCriterion("DOCID =", value, "docid");
            return this;
        }

        public Criteria andDocidNotEqualTo(Long value) {
            addCriterion("DOCID <>", value, "docid");
            return this;
        }

        public Criteria andDocidGreaterThan(Long value) {
            addCriterion("DOCID >", value, "docid");
            return this;
        }

        public Criteria andDocidGreaterThanOrEqualTo(Long value) {
            addCriterion("DOCID >=", value, "docid");
            return this;
        }

        public Criteria andDocidLessThan(Long value) {
            addCriterion("DOCID <", value, "docid");
            return this;
        }

        public Criteria andDocidLessThanOrEqualTo(Long value) {
            addCriterion("DOCID <=", value, "docid");
            return this;
        }

        public Criteria andDocidIn(List<Long> values) {
            addCriterion("DOCID in", values, "docid");
            return this;
        }

        public Criteria andDocidNotIn(List<Long> values) {
            addCriterion("DOCID not in", values, "docid");
            return this;
        }

        public Criteria andDocidBetween(Long value1, Long value2) {
            addCriterion("DOCID between", value1, value2, "docid");
            return this;
        }

        public Criteria andDocidNotBetween(Long value1, Long value2) {
            addCriterion("DOCID not between", value1, value2, "docid");
            return this;
        }

        public Criteria andMarkuseridIsNull() {
            addCriterion("MARKUSERID is null");
            return this;
        }

        public Criteria andMarkuseridIsNotNull() {
            addCriterion("MARKUSERID is not null");
            return this;
        }

        public Criteria andMarkuseridEqualTo(Long value) {
            addCriterion("MARKUSERID =", value, "markuserid");
            return this;
        }

        public Criteria andMarkuseridNotEqualTo(Long value) {
            addCriterion("MARKUSERID <>", value, "markuserid");
            return this;
        }

        public Criteria andMarkuseridGreaterThan(Long value) {
            addCriterion("MARKUSERID >", value, "markuserid");
            return this;
        }

        public Criteria andMarkuseridGreaterThanOrEqualTo(Long value) {
            addCriterion("MARKUSERID >=", value, "markuserid");
            return this;
        }

        public Criteria andMarkuseridLessThan(Long value) {
            addCriterion("MARKUSERID <", value, "markuserid");
            return this;
        }

        public Criteria andMarkuseridLessThanOrEqualTo(Long value) {
            addCriterion("MARKUSERID <=", value, "markuserid");
            return this;
        }

        public Criteria andMarkuseridIn(List<Long> values) {
            addCriterion("MARKUSERID in", values, "markuserid");
            return this;
        }

        public Criteria andMarkuseridNotIn(List<Long> values) {
            addCriterion("MARKUSERID not in", values, "markuserid");
            return this;
        }

        public Criteria andMarkuseridBetween(Long value1, Long value2) {
            addCriterion("MARKUSERID between", value1, value2, "markuserid");
            return this;
        }

        public Criteria andMarkuseridNotBetween(Long value1, Long value2) {
            addCriterion("MARKUSERID not between", value1, value2, "markuserid");
            return this;
        }

        public Criteria andMarktimeIsNull() {
            addCriterion("MARKTIME is null");
            return this;
        }

        public Criteria andMarktimeIsNotNull() {
            addCriterion("MARKTIME is not null");
            return this;
        }

        public Criteria andMarktimeEqualTo(Date value) {
            addCriterionForJDBCDate("MARKTIME =", value, "marktime");
            return this;
        }

        public Criteria andMarktimeNotEqualTo(Date value) {
            addCriterionForJDBCDate("MARKTIME <>", value, "marktime");
            return this;
        }

        public Criteria andMarktimeGreaterThan(Date value) {
            addCriterionForJDBCDate("MARKTIME >", value, "marktime");
            return this;
        }

        public Criteria andMarktimeGreaterThanOrEqualTo(Date value) {
            addCriterionForJDBCDate("MARKTIME >=", value, "marktime");
            return this;
        }

        public Criteria andMarktimeLessThan(Date value) {
            addCriterionForJDBCDate("MARKTIME <", value, "marktime");
            return this;
        }

        public Criteria andMarktimeLessThanOrEqualTo(Date value) {
            addCriterionForJDBCDate("MARKTIME <=", value, "marktime");
            return this;
        }

        public Criteria andMarktimeIn(List<Date> values) {
            addCriterionForJDBCDate("MARKTIME in", values, "marktime");
            return this;
        }

        public Criteria andMarktimeNotIn(List<Date> values) {
            addCriterionForJDBCDate("MARKTIME not in", values, "marktime");
            return this;
        }

        public Criteria andMarktimeBetween(Date value1, Date value2) {
            addCriterionForJDBCDate("MARKTIME between", value1, value2, "marktime");
            return this;
        }

        public Criteria andMarktimeNotBetween(Date value1, Date value2) {
            addCriterionForJDBCDate("MARKTIME not between", value1, value2, "marktime");
            return this;
        }

        public Criteria andTagIsNull() {
            addCriterion("TAG is null");
            return this;
        }

        public Criteria andTagIsNotNull() {
            addCriterion("TAG is not null");
            return this;
        }

        public Criteria andTagEqualTo(String value) {
            addCriterion("TAG =", value, "tag");
            return this;
        }

        public Criteria andTagNotEqualTo(String value) {
            addCriterion("TAG <>", value, "tag");
            return this;
        }

        public Criteria andTagGreaterThan(String value) {
            addCriterion("TAG >", value, "tag");
            return this;
        }

        public Criteria andTagGreaterThanOrEqualTo(String value) {
            addCriterion("TAG >=", value, "tag");
            return this;
        }

        public Criteria andTagLessThan(String value) {
            addCriterion("TAG <", value, "tag");
            return this;
        }

        public Criteria andTagLessThanOrEqualTo(String value) {
            addCriterion("TAG <=", value, "tag");
            return this;
        }

        public Criteria andTagLike(String value) {
            addCriterion("TAG like", value, "tag");
            return this;
        }

        public Criteria andTagNotLike(String value) {
            addCriterion("TAG not like", value, "tag");
            return this;
        }

        public Criteria andTagIn(List<String> values) {
            addCriterion("TAG in", values, "tag");
            return this;
        }

        public Criteria andTagNotIn(List<String> values) {
            addCriterion("TAG not in", values, "tag");
            return this;
        }

        public Criteria andTagBetween(String value1, String value2) {
            addCriterion("TAG between", value1, value2, "tag");
            return this;
        }

        public Criteria andTagNotBetween(String value1, String value2) {
            addCriterion("TAG not between", value1, value2, "tag");
            return this;
        }
    }
}