package com.tfs.irp.docstatus.entity;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

public class IrpDocstatusExample {

	/**
	 * This field was generated by Apache iBATIS ibator. This field corresponds to the database table IRP_DOCSTATUS
	 * @ibatorgenerated  Wed Mar 27 15:51:57 CST 2013
	 */
	protected String orderByClause;
	/**
	 * This field was generated by Apache iBATIS ibator. This field corresponds to the database table IRP_DOCSTATUS
	 * @ibatorgenerated  Wed Mar 27 15:51:57 CST 2013
	 */
	protected List<Criteria> oredCriteria;

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table IRP_DOCSTATUS
	 * @ibatorgenerated  Wed Mar 27 15:51:57 CST 2013
	 */
	public IrpDocstatusExample() {
		oredCriteria = new ArrayList<Criteria>();
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table IRP_DOCSTATUS
	 * @ibatorgenerated  Wed Mar 27 15:51:57 CST 2013
	 */
	protected IrpDocstatusExample(IrpDocstatusExample example) {
		this.orderByClause = example.orderByClause;
		this.oredCriteria = example.oredCriteria;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table IRP_DOCSTATUS
	 * @ibatorgenerated  Wed Mar 27 15:51:57 CST 2013
	 */
	public void setOrderByClause(String orderByClause) {
		this.orderByClause = orderByClause;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table IRP_DOCSTATUS
	 * @ibatorgenerated  Wed Mar 27 15:51:57 CST 2013
	 */
	public String getOrderByClause() {
		return orderByClause;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table IRP_DOCSTATUS
	 * @ibatorgenerated  Wed Mar 27 15:51:57 CST 2013
	 */
	public List<Criteria> getOredCriteria() {
		return oredCriteria;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table IRP_DOCSTATUS
	 * @ibatorgenerated  Wed Mar 27 15:51:57 CST 2013
	 */
	public void or(Criteria criteria) {
		oredCriteria.add(criteria);
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table IRP_DOCSTATUS
	 * @ibatorgenerated  Wed Mar 27 15:51:57 CST 2013
	 */
	public Criteria createCriteria() {
		Criteria criteria = createCriteriaInternal();
		if (oredCriteria.size() == 0) {
			oredCriteria.add(criteria);
		}
		return criteria;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table IRP_DOCSTATUS
	 * @ibatorgenerated  Wed Mar 27 15:51:57 CST 2013
	 */
	protected Criteria createCriteriaInternal() {
		Criteria criteria = new Criteria();
		return criteria;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table IRP_DOCSTATUS
	 * @ibatorgenerated  Wed Mar 27 15:51:57 CST 2013
	 */
	public void clear() {
		oredCriteria.clear();
	}

	/**
	 * This class was generated by Apache iBATIS ibator. This class corresponds to the database table IRP_DOCSTATUS
	 * @ibatorgenerated  Wed Mar 27 15:51:57 CST 2013
	 */
	public static class Criteria {
		protected List<String> criteriaWithoutValue;
		protected List<Map<String, Object>> criteriaWithSingleValue;
		protected List<Map<String, Object>> criteriaWithListValue;
		protected List<Map<String, Object>> criteriaWithBetweenValue;

		protected Criteria() {
			super();
			criteriaWithoutValue = new ArrayList<String>();
			criteriaWithSingleValue = new ArrayList<Map<String, Object>>();
			criteriaWithListValue = new ArrayList<Map<String, Object>>();
			criteriaWithBetweenValue = new ArrayList<Map<String, Object>>();
		}

		public boolean isValid() {
			return criteriaWithoutValue.size() > 0
					|| criteriaWithSingleValue.size() > 0
					|| criteriaWithListValue.size() > 0
					|| criteriaWithBetweenValue.size() > 0;
		}

		public List<String> getCriteriaWithoutValue() {
			return criteriaWithoutValue;
		}

		public List<Map<String, Object>> getCriteriaWithSingleValue() {
			return criteriaWithSingleValue;
		}

		public List<Map<String, Object>> getCriteriaWithListValue() {
			return criteriaWithListValue;
		}

		public List<Map<String, Object>> getCriteriaWithBetweenValue() {
			return criteriaWithBetweenValue;
		}

		protected void addCriterion(String condition) {
			if (condition == null) {
				throw new RuntimeException("Value for condition cannot be null");
			}
			criteriaWithoutValue.add(condition);
		}

		protected void addCriterion(String condition, Object value,
				String property) {
			if (value == null) {
				throw new RuntimeException("Value for " + property
						+ " cannot be null");
			}
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("condition", condition);
			map.put("value", value);
			criteriaWithSingleValue.add(map);
		}

		protected void addCriterion(String condition,
				List<? extends Object> values, String property) {
			if (values == null || values.size() == 0) {
				throw new RuntimeException("Value list for " + property
						+ " cannot be null or empty");
			}
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("condition", condition);
			map.put("values", values);
			criteriaWithListValue.add(map);
		}

		protected void addCriterion(String condition, Object value1,
				Object value2, String property) {
			if (value1 == null || value2 == null) {
				throw new RuntimeException("Between values for " + property
						+ " cannot be null");
			}
			List<Object> list = new ArrayList<Object>();
			list.add(value1);
			list.add(value2);
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("condition", condition);
			map.put("values", list);
			criteriaWithBetweenValue.add(map);
		}

		protected void addCriterionForJDBCDate(String condition, Date value,
				String property) {
			addCriterion(condition, new java.sql.Date(value.getTime()),
					property);
		}

		protected void addCriterionForJDBCDate(String condition,
				List<Date> values, String property) {
			if (values == null || values.size() == 0) {
				throw new RuntimeException("Value list for " + property
						+ " cannot be null or empty");
			}
			List<java.sql.Date> dateList = new ArrayList<java.sql.Date>();
			Iterator<Date> iter = values.iterator();
			while (iter.hasNext()) {
				dateList.add(new java.sql.Date(iter.next().getTime()));
			}
			addCriterion(condition, dateList, property);
		}

		protected void addCriterionForJDBCDate(String condition, Date value1,
				Date value2, String property) {
			if (value1 == null || value2 == null) {
				throw new RuntimeException("Between values for " + property
						+ " cannot be null");
			}
			addCriterion(condition, new java.sql.Date(value1.getTime()),
					new java.sql.Date(value2.getTime()), property);
		}

		public Criteria andStatusidIsNull() {
			addCriterion("STATUSID is null");
			return this;
		}

		public Criteria andStatusidIsNotNull() {
			addCriterion("STATUSID is not null");
			return this;
		}

		public Criteria andStatusidEqualTo(Long value) {
			addCriterion("STATUSID =", value, "statusid");
			return this;
		}

		public Criteria andStatusidNotEqualTo(Long value) {
			addCriterion("STATUSID <>", value, "statusid");
			return this;
		}

		public Criteria andStatusidGreaterThan(Long value) {
			addCriterion("STATUSID >", value, "statusid");
			return this;
		}

		public Criteria andStatusidGreaterThanOrEqualTo(Long value) {
			addCriterion("STATUSID >=", value, "statusid");
			return this;
		}

		public Criteria andStatusidLessThan(Long value) {
			addCriterion("STATUSID <", value, "statusid");
			return this;
		}

		public Criteria andStatusidLessThanOrEqualTo(Long value) {
			addCriterion("STATUSID <=", value, "statusid");
			return this;
		}

		public Criteria andStatusidIn(List<Long> values) {
			addCriterion("STATUSID in", values, "statusid");
			return this;
		}

		public Criteria andStatusidNotIn(List<Long> values) {
			addCriterion("STATUSID not in", values, "statusid");
			return this;
		}

		public Criteria andStatusidBetween(Long value1, Long value2) {
			addCriterion("STATUSID between", value1, value2, "statusid");
			return this;
		}

		public Criteria andStatusidNotBetween(Long value1, Long value2) {
			addCriterion("STATUSID not between", value1, value2, "statusid");
			return this;
		}

		public Criteria andSnameIsNull() {
			addCriterion("SNAME is null");
			return this;
		}

		public Criteria andSnameIsNotNull() {
			addCriterion("SNAME is not null");
			return this;
		}

		public Criteria andSnameEqualTo(String value) {
			addCriterion("SNAME =", value, "sname");
			return this;
		}

		public Criteria andSnameNotEqualTo(String value) {
			addCriterion("SNAME <>", value, "sname");
			return this;
		}

		public Criteria andSnameGreaterThan(String value) {
			addCriterion("SNAME >", value, "sname");
			return this;
		}

		public Criteria andSnameGreaterThanOrEqualTo(String value) {
			addCriterion("SNAME >=", value, "sname");
			return this;
		}

		public Criteria andSnameLessThan(String value) {
			addCriterion("SNAME <", value, "sname");
			return this;
		}

		public Criteria andSnameLessThanOrEqualTo(String value) {
			addCriterion("SNAME <=", value, "sname");
			return this;
		}

		public Criteria andSnameLike(String value) {
			addCriterion("SNAME like", value, "sname");
			return this;
		}

		public Criteria andSnameNotLike(String value) {
			addCriterion("SNAME not like", value, "sname");
			return this;
		}

		public Criteria andSnameIn(List<String> values) {
			addCriterion("SNAME in", values, "sname");
			return this;
		}

		public Criteria andSnameNotIn(List<String> values) {
			addCriterion("SNAME not in", values, "sname");
			return this;
		}

		public Criteria andSnameBetween(String value1, String value2) {
			addCriterion("SNAME between", value1, value2, "sname");
			return this;
		}

		public Criteria andSnameNotBetween(String value1, String value2) {
			addCriterion("SNAME not between", value1, value2, "sname");
			return this;
		}

		public Criteria andSdescIsNull() {
			addCriterion("SDESC is null");
			return this;
		}

		public Criteria andSdescIsNotNull() {
			addCriterion("SDESC is not null");
			return this;
		}

		public Criteria andSdescEqualTo(String value) {
			addCriterion("SDESC =", value, "sdesc");
			return this;
		}

		public Criteria andSdescNotEqualTo(String value) {
			addCriterion("SDESC <>", value, "sdesc");
			return this;
		}

		public Criteria andSdescGreaterThan(String value) {
			addCriterion("SDESC >", value, "sdesc");
			return this;
		}

		public Criteria andSdescGreaterThanOrEqualTo(String value) {
			addCriterion("SDESC >=", value, "sdesc");
			return this;
		}

		public Criteria andSdescLessThan(String value) {
			addCriterion("SDESC <", value, "sdesc");
			return this;
		}

		public Criteria andSdescLessThanOrEqualTo(String value) {
			addCriterion("SDESC <=", value, "sdesc");
			return this;
		}

		public Criteria andSdescLike(String value) {
			addCriterion("SDESC like", value, "sdesc");
			return this;
		}

		public Criteria andSdescNotLike(String value) {
			addCriterion("SDESC not like", value, "sdesc");
			return this;
		}

		public Criteria andSdescIn(List<String> values) {
			addCriterion("SDESC in", values, "sdesc");
			return this;
		}

		public Criteria andSdescNotIn(List<String> values) {
			addCriterion("SDESC not in", values, "sdesc");
			return this;
		}

		public Criteria andSdescBetween(String value1, String value2) {
			addCriterion("SDESC between", value1, value2, "sdesc");
			return this;
		}

		public Criteria andSdescNotBetween(String value1, String value2) {
			addCriterion("SDESC not between", value1, value2, "sdesc");
			return this;
		}

		public Criteria andSdispIsNull() {
			addCriterion("SDISP is null");
			return this;
		}

		public Criteria andSdispIsNotNull() {
			addCriterion("SDISP is not null");
			return this;
		}

		public Criteria andSdispEqualTo(String value) {
			addCriterion("SDISP =", value, "sdisp");
			return this;
		}

		public Criteria andSdispNotEqualTo(String value) {
			addCriterion("SDISP <>", value, "sdisp");
			return this;
		}

		public Criteria andSdispGreaterThan(String value) {
			addCriterion("SDISP >", value, "sdisp");
			return this;
		}

		public Criteria andSdispGreaterThanOrEqualTo(String value) {
			addCriterion("SDISP >=", value, "sdisp");
			return this;
		}

		public Criteria andSdispLessThan(String value) {
			addCriterion("SDISP <", value, "sdisp");
			return this;
		}

		public Criteria andSdispLessThanOrEqualTo(String value) {
			addCriterion("SDISP <=", value, "sdisp");
			return this;
		}

		public Criteria andSdispLike(String value) {
			addCriterion("SDISP like", value, "sdisp");
			return this;
		}

		public Criteria andSdispNotLike(String value) {
			addCriterion("SDISP not like", value, "sdisp");
			return this;
		}

		public Criteria andSdispIn(List<String> values) {
			addCriterion("SDISP in", values, "sdisp");
			return this;
		}

		public Criteria andSdispNotIn(List<String> values) {
			addCriterion("SDISP not in", values, "sdisp");
			return this;
		}

		public Criteria andSdispBetween(String value1, String value2) {
			addCriterion("SDISP between", value1, value2, "sdisp");
			return this;
		}

		public Criteria andSdispNotBetween(String value1, String value2) {
			addCriterion("SDISP not between", value1, value2, "sdisp");
			return this;
		}

		public Criteria andSusedIsNull() {
			addCriterion("SUSED is null");
			return this;
		}

		public Criteria andSusedIsNotNull() {
			addCriterion("SUSED is not null");
			return this;
		}

		public Criteria andSusedEqualTo(Integer value) {
			addCriterion("SUSED =", value, "sused");
			return this;
		}

		public Criteria andSusedNotEqualTo(Integer value) {
			addCriterion("SUSED <>", value, "sused");
			return this;
		}

		public Criteria andSusedGreaterThan(Integer value) {
			addCriterion("SUSED >", value, "sused");
			return this;
		}

		public Criteria andSusedGreaterThanOrEqualTo(Integer value) {
			addCriterion("SUSED >=", value, "sused");
			return this;
		}

		public Criteria andSusedLessThan(Integer value) {
			addCriterion("SUSED <", value, "sused");
			return this;
		}

		public Criteria andSusedLessThanOrEqualTo(Integer value) {
			addCriterion("SUSED <=", value, "sused");
			return this;
		}

		public Criteria andSusedIn(List<Integer> values) {
			addCriterion("SUSED in", values, "sused");
			return this;
		}

		public Criteria andSusedNotIn(List<Integer> values) {
			addCriterion("SUSED not in", values, "sused");
			return this;
		}

		public Criteria andSusedBetween(Integer value1, Integer value2) {
			addCriterion("SUSED between", value1, value2, "sused");
			return this;
		}

		public Criteria andSusedNotBetween(Integer value1, Integer value2) {
			addCriterion("SUSED not between", value1, value2, "sused");
			return this;
		}

		public Criteria andCruserIsNull() {
			addCriterion("CRUSER is null");
			return this;
		}

		public Criteria andCruserIsNotNull() {
			addCriterion("CRUSER is not null");
			return this;
		}

		public Criteria andCruserEqualTo(String value) {
			addCriterion("CRUSER =", value, "cruser");
			return this;
		}

		public Criteria andCruserNotEqualTo(String value) {
			addCriterion("CRUSER <>", value, "cruser");
			return this;
		}

		public Criteria andCruserGreaterThan(String value) {
			addCriterion("CRUSER >", value, "cruser");
			return this;
		}

		public Criteria andCruserGreaterThanOrEqualTo(String value) {
			addCriterion("CRUSER >=", value, "cruser");
			return this;
		}

		public Criteria andCruserLessThan(String value) {
			addCriterion("CRUSER <", value, "cruser");
			return this;
		}

		public Criteria andCruserLessThanOrEqualTo(String value) {
			addCriterion("CRUSER <=", value, "cruser");
			return this;
		}

		public Criteria andCruserLike(String value) {
			addCriterion("CRUSER like", value, "cruser");
			return this;
		}

		public Criteria andCruserNotLike(String value) {
			addCriterion("CRUSER not like", value, "cruser");
			return this;
		}

		public Criteria andCruserIn(List<String> values) {
			addCriterion("CRUSER in", values, "cruser");
			return this;
		}

		public Criteria andCruserNotIn(List<String> values) {
			addCriterion("CRUSER not in", values, "cruser");
			return this;
		}

		public Criteria andCruserBetween(String value1, String value2) {
			addCriterion("CRUSER between", value1, value2, "cruser");
			return this;
		}

		public Criteria andCruserNotBetween(String value1, String value2) {
			addCriterion("CRUSER not between", value1, value2, "cruser");
			return this;
		}

		public Criteria andCrtimeIsNull() {
			addCriterion("CRTIME is null");
			return this;
		}

		public Criteria andCrtimeIsNotNull() {
			addCriterion("CRTIME is not null");
			return this;
		}

		public Criteria andCrtimeEqualTo(Date value) {
			addCriterionForJDBCDate("CRTIME =", value, "crtime");
			return this;
		}

		public Criteria andCrtimeNotEqualTo(Date value) {
			addCriterionForJDBCDate("CRTIME <>", value, "crtime");
			return this;
		}

		public Criteria andCrtimeGreaterThan(Date value) {
			addCriterionForJDBCDate("CRTIME >", value, "crtime");
			return this;
		}

		public Criteria andCrtimeGreaterThanOrEqualTo(Date value) {
			addCriterionForJDBCDate("CRTIME >=", value, "crtime");
			return this;
		}

		public Criteria andCrtimeLessThan(Date value) {
			addCriterionForJDBCDate("CRTIME <", value, "crtime");
			return this;
		}

		public Criteria andCrtimeLessThanOrEqualTo(Date value) {
			addCriterionForJDBCDate("CRTIME <=", value, "crtime");
			return this;
		}

		public Criteria andCrtimeIn(List<Date> values) {
			addCriterionForJDBCDate("CRTIME in", values, "crtime");
			return this;
		}

		public Criteria andCrtimeNotIn(List<Date> values) {
			addCriterionForJDBCDate("CRTIME not in", values, "crtime");
			return this;
		}

		public Criteria andCrtimeBetween(Date value1, Date value2) {
			addCriterionForJDBCDate("CRTIME between", value1, value2, "crtime");
			return this;
		}

		public Criteria andCrtimeNotBetween(Date value1, Date value2) {
			addCriterionForJDBCDate("CRTIME not between", value1, value2,
					"crtime");
			return this;
		}

		public Criteria andAttributeIsNull() {
			addCriterion("ATTRIBUTE is null");
			return this;
		}

		public Criteria andAttributeIsNotNull() {
			addCriterion("ATTRIBUTE is not null");
			return this;
		}

		public Criteria andAttributeEqualTo(String value) {
			addCriterion("ATTRIBUTE =", value, "attribute");
			return this;
		}

		public Criteria andAttributeNotEqualTo(String value) {
			addCriterion("ATTRIBUTE <>", value, "attribute");
			return this;
		}

		public Criteria andAttributeGreaterThan(String value) {
			addCriterion("ATTRIBUTE >", value, "attribute");
			return this;
		}

		public Criteria andAttributeGreaterThanOrEqualTo(String value) {
			addCriterion("ATTRIBUTE >=", value, "attribute");
			return this;
		}

		public Criteria andAttributeLessThan(String value) {
			addCriterion("ATTRIBUTE <", value, "attribute");
			return this;
		}

		public Criteria andAttributeLessThanOrEqualTo(String value) {
			addCriterion("ATTRIBUTE <=", value, "attribute");
			return this;
		}

		public Criteria andAttributeLike(String value) {
			addCriterion("ATTRIBUTE like", value, "attribute");
			return this;
		}

		public Criteria andAttributeNotLike(String value) {
			addCriterion("ATTRIBUTE not like", value, "attribute");
			return this;
		}

		public Criteria andAttributeIn(List<String> values) {
			addCriterion("ATTRIBUTE in", values, "attribute");
			return this;
		}

		public Criteria andAttributeNotIn(List<String> values) {
			addCriterion("ATTRIBUTE not in", values, "attribute");
			return this;
		}

		public Criteria andAttributeBetween(String value1, String value2) {
			addCriterion("ATTRIBUTE between", value1, value2, "attribute");
			return this;
		}

		public Criteria andAttributeNotBetween(String value1, String value2) {
			addCriterion("ATTRIBUTE not between", value1, value2, "attribute");
			return this;
		}

		public Criteria andCruseridIsNull() {
			addCriterion("CRUSERID is null");
			return this;
		}

		public Criteria andCruseridIsNotNull() {
			addCriterion("CRUSERID is not null");
			return this;
		}

		public Criteria andCruseridEqualTo(Long value) {
			addCriterion("CRUSERID =", value, "cruserid");
			return this;
		}

		public Criteria andCruseridNotEqualTo(Long value) {
			addCriterion("CRUSERID <>", value, "cruserid");
			return this;
		}

		public Criteria andCruseridGreaterThan(Long value) {
			addCriterion("CRUSERID >", value, "cruserid");
			return this;
		}

		public Criteria andCruseridGreaterThanOrEqualTo(Long value) {
			addCriterion("CRUSERID >=", value, "cruserid");
			return this;
		}

		public Criteria andCruseridLessThan(Long value) {
			addCriterion("CRUSERID <", value, "cruserid");
			return this;
		}

		public Criteria andCruseridLessThanOrEqualTo(Long value) {
			addCriterion("CRUSERID <=", value, "cruserid");
			return this;
		}

		public Criteria andCruseridIn(List<Long> values) {
			addCriterion("CRUSERID in", values, "cruserid");
			return this;
		}

		public Criteria andCruseridNotIn(List<Long> values) {
			addCriterion("CRUSERID not in", values, "cruserid");
			return this;
		}

		public Criteria andCruseridBetween(Long value1, Long value2) {
			addCriterion("CRUSERID between", value1, value2, "cruserid");
			return this;
		}

		public Criteria andCruseridNotBetween(Long value1, Long value2) {
			addCriterion("CRUSERID not between", value1, value2, "cruserid");
			return this;
		}
	}
}