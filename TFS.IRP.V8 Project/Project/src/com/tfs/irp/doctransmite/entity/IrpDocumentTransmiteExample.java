package com.tfs.irp.doctransmite.entity;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

public class IrpDocumentTransmiteExample {

	/**
	 * This field was generated by Apache iBATIS ibator. This field corresponds to the database table IRP_DOCUMENT_TRANSMITE
	 * @ibatorgenerated  Fri May 03 14:08:55 CST 2013
	 */
	protected String orderByClause;
	/**
	 * This field was generated by Apache iBATIS ibator. This field corresponds to the database table IRP_DOCUMENT_TRANSMITE
	 * @ibatorgenerated  Fri May 03 14:08:55 CST 2013
	 */
	protected List<Criteria> oredCriteria;

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table IRP_DOCUMENT_TRANSMITE
	 * @ibatorgenerated  Fri May 03 14:08:55 CST 2013
	 */
	public IrpDocumentTransmiteExample() {
		oredCriteria = new ArrayList<Criteria>();
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table IRP_DOCUMENT_TRANSMITE
	 * @ibatorgenerated  Fri May 03 14:08:55 CST 2013
	 */
	protected IrpDocumentTransmiteExample(IrpDocumentTransmiteExample example) {
		this.orderByClause = example.orderByClause;
		this.oredCriteria = example.oredCriteria;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table IRP_DOCUMENT_TRANSMITE
	 * @ibatorgenerated  Fri May 03 14:08:55 CST 2013
	 */
	public void setOrderByClause(String orderByClause) {
		this.orderByClause = orderByClause;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table IRP_DOCUMENT_TRANSMITE
	 * @ibatorgenerated  Fri May 03 14:08:55 CST 2013
	 */
	public String getOrderByClause() {
		return orderByClause;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table IRP_DOCUMENT_TRANSMITE
	 * @ibatorgenerated  Fri May 03 14:08:55 CST 2013
	 */
	public List<Criteria> getOredCriteria() {
		return oredCriteria;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table IRP_DOCUMENT_TRANSMITE
	 * @ibatorgenerated  Fri May 03 14:08:55 CST 2013
	 */
	public void or(Criteria criteria) {
		oredCriteria.add(criteria);
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table IRP_DOCUMENT_TRANSMITE
	 * @ibatorgenerated  Fri May 03 14:08:55 CST 2013
	 */
	public Criteria createCriteria() {
		Criteria criteria = createCriteriaInternal();
		if (oredCriteria.size() == 0) {
			oredCriteria.add(criteria);
		}
		return criteria;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table IRP_DOCUMENT_TRANSMITE
	 * @ibatorgenerated  Fri May 03 14:08:55 CST 2013
	 */
	protected Criteria createCriteriaInternal() {
		Criteria criteria = new Criteria();
		return criteria;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table IRP_DOCUMENT_TRANSMITE
	 * @ibatorgenerated  Fri May 03 14:08:55 CST 2013
	 */
	public void clear() {
		oredCriteria.clear();
	}

	/**
	 * This class was generated by Apache iBATIS ibator. This class corresponds to the database table IRP_DOCUMENT_TRANSMITE
	 * @ibatorgenerated  Fri May 03 14:08:55 CST 2013
	 */
	public static class Criteria {
		protected List<String> criteriaWithoutValue;
		protected List<Map<String, Object>> criteriaWithSingleValue;
		protected List<Map<String, Object>> criteriaWithListValue;
		protected List<Map<String, Object>> criteriaWithBetweenValue;

		protected Criteria() {
			super();
			criteriaWithoutValue = new ArrayList<String>();
			criteriaWithSingleValue = new ArrayList<Map<String, Object>>();
			criteriaWithListValue = new ArrayList<Map<String, Object>>();
			criteriaWithBetweenValue = new ArrayList<Map<String, Object>>();
		}

		public boolean isValid() {
			return criteriaWithoutValue.size() > 0
					|| criteriaWithSingleValue.size() > 0
					|| criteriaWithListValue.size() > 0
					|| criteriaWithBetweenValue.size() > 0;
		}

		public List<String> getCriteriaWithoutValue() {
			return criteriaWithoutValue;
		}

		public List<Map<String, Object>> getCriteriaWithSingleValue() {
			return criteriaWithSingleValue;
		}

		public List<Map<String, Object>> getCriteriaWithListValue() {
			return criteriaWithListValue;
		}

		public List<Map<String, Object>> getCriteriaWithBetweenValue() {
			return criteriaWithBetweenValue;
		}

		protected void addCriterion(String condition) {
			if (condition == null) {
				throw new RuntimeException("Value for condition cannot be null");
			}
			criteriaWithoutValue.add(condition);
		}

		protected void addCriterion(String condition, Object value,
				String property) {
			if (value == null) {
				throw new RuntimeException("Value for " + property
						+ " cannot be null");
			}
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("condition", condition);
			map.put("value", value);
			criteriaWithSingleValue.add(map);
		}

		protected void addCriterion(String condition,
				List<? extends Object> values, String property) {
			if (values == null || values.size() == 0) {
				throw new RuntimeException("Value list for " + property
						+ " cannot be null or empty");
			}
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("condition", condition);
			map.put("values", values);
			criteriaWithListValue.add(map);
		}

		protected void addCriterion(String condition, Object value1,
				Object value2, String property) {
			if (value1 == null || value2 == null) {
				throw new RuntimeException("Between values for " + property
						+ " cannot be null");
			}
			List<Object> list = new ArrayList<Object>();
			list.add(value1);
			list.add(value2);
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("condition", condition);
			map.put("values", list);
			criteriaWithBetweenValue.add(map);
		}

		protected void addCriterionForJDBCDate(String condition, Date value,
				String property) {
			addCriterion(condition, new java.sql.Date(value.getTime()),
					property);
		}

		protected void addCriterionForJDBCDate(String condition,
				List<Date> values, String property) {
			if (values == null || values.size() == 0) {
				throw new RuntimeException("Value list for " + property
						+ " cannot be null or empty");
			}
			List<java.sql.Date> dateList = new ArrayList<java.sql.Date>();
			Iterator<Date> iter = values.iterator();
			while (iter.hasNext()) {
				dateList.add(new java.sql.Date(iter.next().getTime()));
			}
			addCriterion(condition, dateList, property);
		}

		protected void addCriterionForJDBCDate(String condition, Date value1,
				Date value2, String property) {
			if (value1 == null || value2 == null) {
				throw new RuntimeException("Between values for " + property
						+ " cannot be null");
			}
			addCriterion(condition, new java.sql.Date(value1.getTime()),
					new java.sql.Date(value2.getTime()), property);
		}

		public Criteria andFromuseridIsNull() {
			addCriterion("fromuserid is null");
			return this;
		}

		public Criteria andFromuseridIsNotNull() {
			addCriterion("fromuserid is not null");
			return this;
		}

		public Criteria andFromuseridEqualTo(Long value) {
			addCriterion("fromuserid =", value, "fromuserid");
			return this;
		}

		public Criteria andFromuseridNotEqualTo(Long value) {
			addCriterion("fromuserid <>", value, "fromuserid");
			return this;
		}

		public Criteria andFromuseridGreaterThan(Long value) {
			addCriterion("fromuserid >", value, "fromuserid");
			return this;
		}

		public Criteria andFromuseridGreaterThanOrEqualTo(Long value) {
			addCriterion("fromuserid >=", value, "fromuserid");
			return this;
		}

		public Criteria andFromuseridLessThan(Long value) {
			addCriterion("fromuserid <", value, "fromuserid");
			return this;
		}

		public Criteria andFromuseridLessThanOrEqualTo(Long value) {
			addCriterion("fromuserid <=", value, "fromuserid");
			return this;
		}

		public Criteria andFromuseridIn(List<Long> values) {
			addCriterion("fromuserid in", values, "fromuserid");
			return this;
		}

		public Criteria andFromuseridNotIn(List<Long> values) {
			addCriterion("fromuserid not in", values, "fromuserid");
			return this;
		}

		public Criteria andFromuseridBetween(Long value1, Long value2) {
			addCriterion("fromuserid between", value1, value2, "fromuserid");
			return this;
		}

		public Criteria andFromuseridNotBetween(Long value1, Long value2) {
			addCriterion("fromuserid not between", value1, value2, "fromuserid");
			return this;
		}

		public Criteria andTouseridIsNull() {
			addCriterion("touserid is null");
			return this;
		}

		public Criteria andTouseridIsNotNull() {
			addCriterion("touserid is not null");
			return this;
		}

		public Criteria andTouseridEqualTo(Long value) {
			addCriterion("touserid =", value, "touserid");
			return this;
		}

		public Criteria andTouseridNotEqualTo(Long value) {
			addCriterion("touserid <>", value, "touserid");
			return this;
		}

		public Criteria andTouseridGreaterThan(Long value) {
			addCriterion("touserid >", value, "touserid");
			return this;
		}

		public Criteria andTouseridGreaterThanOrEqualTo(Long value) {
			addCriterion("touserid >=", value, "touserid");
			return this;
		}

		public Criteria andTouseridLessThan(Long value) {
			addCriterion("touserid <", value, "touserid");
			return this;
		}

		public Criteria andTouseridLessThanOrEqualTo(Long value) {
			addCriterion("touserid <=", value, "touserid");
			return this;
		}

		public Criteria andTouseridIn(List<Long> values) {
			addCriterion("touserid in", values, "touserid");
			return this;
		}

		public Criteria andTouseridNotIn(List<Long> values) {
			addCriterion("touserid not in", values, "touserid");
			return this;
		}

		public Criteria andTouseridBetween(Long value1, Long value2) {
			addCriterion("touserid between", value1, value2, "touserid");
			return this;
		}

		public Criteria andTouseridNotBetween(Long value1, Long value2) {
			addCriterion("touserid not between", value1, value2, "touserid");
			return this;
		}

		public Criteria andDocidIsNull() {
			addCriterion("docid is null");
			return this;
		}

		public Criteria andDocidIsNotNull() {
			addCriterion("docid is not null");
			return this;
		}

		public Criteria andDocidEqualTo(Long value) {
			addCriterion("docid =", value, "docid");
			return this;
		}

		public Criteria andDocidNotEqualTo(Long value) {
			addCriterion("docid <>", value, "docid");
			return this;
		}

		public Criteria andDocidGreaterThan(Long value) {
			addCriterion("docid >", value, "docid");
			return this;
		}

		public Criteria andDocidGreaterThanOrEqualTo(Long value) {
			addCriterion("docid >=", value, "docid");
			return this;
		}

		public Criteria andDocidLessThan(Long value) {
			addCriterion("docid <", value, "docid");
			return this;
		}

		public Criteria andDocidLessThanOrEqualTo(Long value) {
			addCriterion("docid <=", value, "docid");
			return this;
		}

		public Criteria andDocidIn(List<Long> values) {
			addCriterion("docid in", values, "docid");
			return this;
		}

		public Criteria andDocidNotIn(List<Long> values) {
			addCriterion("docid not in", values, "docid");
			return this;
		}

		public Criteria andDocidBetween(Long value1, Long value2) {
			addCriterion("docid between", value1, value2, "docid");
			return this;
		}

		public Criteria andDocidNotBetween(Long value1, Long value2) {
			addCriterion("docid not between", value1, value2, "docid");
			return this;
		}

		public Criteria andTypeIsNull() {
			addCriterion("type is null");
			return this;
		}

		public Criteria andTypeIsNotNull() {
			addCriterion("type is not null");
			return this;
		}

		public Criteria andTypeEqualTo(Long value) {
			addCriterion("type =", value, "type");
			return this;
		}

		public Criteria andTypeNotEqualTo(Long value) {
			addCriterion("type <>", value, "type");
			return this;
		}

		public Criteria andTypeGreaterThan(Long value) {
			addCriterion("type >", value, "type");
			return this;
		}

		public Criteria andTypeGreaterThanOrEqualTo(Long value) {
			addCriterion("type >=", value, "type");
			return this;
		}

		public Criteria andTypeLessThan(Long value) {
			addCriterion("type <", value, "type");
			return this;
		}

		public Criteria andTypeLessThanOrEqualTo(Long value) {
			addCriterion("type <=", value, "type");
			return this;
		}

		public Criteria andTypeIn(List<Long> values) {
			addCriterion("type in", values, "type");
			return this;
		}

		public Criteria andTypeNotIn(List<Long> values) {
			addCriterion("type not in", values, "type");
			return this;
		}

		public Criteria andTypeBetween(Long value1, Long value2) {
			addCriterion("type between", value1, value2, "type");
			return this;
		}

		public Criteria andTypeNotBetween(Long value1, Long value2) {
			addCriterion("type not between", value1, value2, "type");
			return this;
		}

		public Criteria andCrtimeIsNull() {
			addCriterion("CRTIME is null");
			return this;
		}

		public Criteria andCrtimeIsNotNull() {
			addCriterion("CRTIME is not null");
			return this;
		}

		public Criteria andCrtimeEqualTo(Date value) {
			addCriterionForJDBCDate("CRTIME =", value, "crtime");
			return this;
		}

		public Criteria andCrtimeNotEqualTo(Date value) {
			addCriterionForJDBCDate("CRTIME <>", value, "crtime");
			return this;
		}

		public Criteria andCrtimeGreaterThan(Date value) {
			addCriterionForJDBCDate("CRTIME >", value, "crtime");
			return this;
		}

		public Criteria andCrtimeGreaterThanOrEqualTo(Date value) {
			addCriterionForJDBCDate("CRTIME >=", value, "crtime");
			return this;
		}

		public Criteria andCrtimeLessThan(Date value) {
			addCriterionForJDBCDate("CRTIME <", value, "crtime");
			return this;
		}

		public Criteria andCrtimeLessThanOrEqualTo(Date value) {
			addCriterionForJDBCDate("CRTIME <=", value, "crtime");
			return this;
		}

		public Criteria andCrtimeIn(List<Date> values) {
			addCriterionForJDBCDate("CRTIME in", values, "crtime");
			return this;
		}

		public Criteria andCrtimeNotIn(List<Date> values) {
			addCriterionForJDBCDate("CRTIME not in", values, "crtime");
			return this;
		}

		public Criteria andCrtimeBetween(Date value1, Date value2) {
			addCriterionForJDBCDate("CRTIME between", value1, value2, "crtime");
			return this;
		}

		public Criteria andCrtimeNotBetween(Date value1, Date value2) {
			addCriterionForJDBCDate("CRTIME not between", value1, value2,
					"crtime");
			return this;
		}

		public Criteria andSummaryIsNull() {
			addCriterion("summary is null");
			return this;
		}

		public Criteria andSummaryIsNotNull() {
			addCriterion("summary is not null");
			return this;
		}

		public Criteria andSummaryEqualTo(String value) {
			addCriterion("summary =", value, "summary");
			return this;
		}

		public Criteria andSummaryNotEqualTo(String value) {
			addCriterion("summary <>", value, "summary");
			return this;
		}

		public Criteria andSummaryGreaterThan(String value) {
			addCriterion("summary >", value, "summary");
			return this;
		}

		public Criteria andSummaryGreaterThanOrEqualTo(String value) {
			addCriterion("summary >=", value, "summary");
			return this;
		}

		public Criteria andSummaryLessThan(String value) {
			addCriterion("summary <", value, "summary");
			return this;
		}

		public Criteria andSummaryLessThanOrEqualTo(String value) {
			addCriterion("summary <=", value, "summary");
			return this;
		}

		public Criteria andSummaryLike(String value) {
			addCriterion("summary like", value, "summary");
			return this;
		}

		public Criteria andSummaryNotLike(String value) {
			addCriterion("summary not like", value, "summary");
			return this;
		}

		public Criteria andSummaryIn(List<String> values) {
			addCriterion("summary in", values, "summary");
			return this;
		}

		public Criteria andSummaryNotIn(List<String> values) {
			addCriterion("summary not in", values, "summary");
			return this;
		}

		public Criteria andSummaryBetween(String value1, String value2) {
			addCriterion("summary between", value1, value2, "summary");
			return this;
		}

		public Criteria andSummaryNotBetween(String value1, String value2) {
			addCriterion("summary not between", value1, value2, "summary");
			return this;
		}
	}
}