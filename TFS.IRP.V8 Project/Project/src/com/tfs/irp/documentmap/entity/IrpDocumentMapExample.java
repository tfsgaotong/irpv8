package com.tfs.irp.documentmap.entity;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

public class IrpDocumentMapExample {
    /**
     * This field was generated by Apache iBATIS ibator.
     * This field corresponds to the database table irp_document_map
     *
     * @ibatorgenerated Thu Feb 20 13:05:52 CST 2014
     */
    protected String orderByClause;

    /**
     * This field was generated by Apache iBATIS ibator.
     * This field corresponds to the database table irp_document_map
     *
     * @ibatorgenerated Thu Feb 20 13:05:52 CST 2014
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table irp_document_map
     *
     * @ibatorgenerated Thu Feb 20 13:05:52 CST 2014
     */
    public IrpDocumentMapExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table irp_document_map
     *
     * @ibatorgenerated Thu Feb 20 13:05:52 CST 2014
     */
    protected IrpDocumentMapExample(IrpDocumentMapExample example) {
        this.orderByClause = example.orderByClause;
        this.oredCriteria = example.oredCriteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table irp_document_map
     *
     * @ibatorgenerated Thu Feb 20 13:05:52 CST 2014
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table irp_document_map
     *
     * @ibatorgenerated Thu Feb 20 13:05:52 CST 2014
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table irp_document_map
     *
     * @ibatorgenerated Thu Feb 20 13:05:52 CST 2014
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table irp_document_map
     *
     * @ibatorgenerated Thu Feb 20 13:05:52 CST 2014
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table irp_document_map
     *
     * @ibatorgenerated Thu Feb 20 13:05:52 CST 2014
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table irp_document_map
     *
     * @ibatorgenerated Thu Feb 20 13:05:52 CST 2014
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table irp_document_map
     *
     * @ibatorgenerated Thu Feb 20 13:05:52 CST 2014
     */
    public void clear() {
        oredCriteria.clear();
    }

    /**
     * This class was generated by Apache iBATIS ibator.
     * This class corresponds to the database table irp_document_map
     *
     * @ibatorgenerated Thu Feb 20 13:05:52 CST 2014
     */
    public static class Criteria {
        protected List<String> criteriaWithoutValue;

        protected List<Map<String, Object>> criteriaWithSingleValue;

        protected List<Map<String, Object>> criteriaWithListValue;

        protected List<Map<String, Object>> criteriaWithBetweenValue;

        protected Criteria() {
            super();
            criteriaWithoutValue = new ArrayList<String>();
            criteriaWithSingleValue = new ArrayList<Map<String, Object>>();
            criteriaWithListValue = new ArrayList<Map<String, Object>>();
            criteriaWithBetweenValue = new ArrayList<Map<String, Object>>();
        }

        public boolean isValid() {
            return criteriaWithoutValue.size() > 0
                || criteriaWithSingleValue.size() > 0
                || criteriaWithListValue.size() > 0
                || criteriaWithBetweenValue.size() > 0;
        }

        public List<String> getCriteriaWithoutValue() {
            return criteriaWithoutValue;
        }

        public List<Map<String, Object>> getCriteriaWithSingleValue() {
            return criteriaWithSingleValue;
        }

        public List<Map<String, Object>> getCriteriaWithListValue() {
            return criteriaWithListValue;
        }

        public List<Map<String, Object>> getCriteriaWithBetweenValue() {
            return criteriaWithBetweenValue;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteriaWithoutValue.add(condition);
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("condition", condition);
            map.put("value", value);
            criteriaWithSingleValue.add(map);
        }

        protected void addCriterion(String condition, List<? extends Object> values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("condition", condition);
            map.put("values", values);
            criteriaWithListValue.add(map);
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            List<Object> list = new ArrayList<Object>();
            list.add(value1);
            list.add(value2);
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("condition", condition);
            map.put("values", list);
            criteriaWithBetweenValue.add(map);
        }

        protected void addCriterionForJDBCDate(String condition, Date value, String property) {
            addCriterion(condition, new java.sql.Date(value.getTime()), property);
        }

        protected void addCriterionForJDBCDate(String condition, List<Date> values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            List<java.sql.Date> dateList = new ArrayList<java.sql.Date>();
            Iterator<Date> iter = values.iterator();
            while (iter.hasNext()) {
                dateList.add(new java.sql.Date(iter.next().getTime()));
            }
            addCriterion(condition, dateList, property);
        }

        protected void addCriterionForJDBCDate(String condition, Date value1, Date value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            addCriterion(condition, new java.sql.Date(value1.getTime()), new java.sql.Date(value2.getTime()), property);
        }

        public Criteria andMidIsNull() {
            addCriterion("MID is null");
            return this;
        }

        public Criteria andMidIsNotNull() {
            addCriterion("MID is not null");
            return this;
        }

        public Criteria andMidEqualTo(Long value) {
            addCriterion("MID =", value, "mid");
            return this;
        }

        public Criteria andMidNotEqualTo(Long value) {
            addCriterion("MID <>", value, "mid");
            return this;
        }

        public Criteria andMidGreaterThan(Long value) {
            addCriterion("MID >", value, "mid");
            return this;
        }

        public Criteria andMidGreaterThanOrEqualTo(Long value) {
            addCriterion("MID >=", value, "mid");
            return this;
        }

        public Criteria andMidLessThan(Long value) {
            addCriterion("MID <", value, "mid");
            return this;
        }

        public Criteria andMidLessThanOrEqualTo(Long value) {
            addCriterion("MID <=", value, "mid");
            return this;
        }

        public Criteria andMidIn(List<Long> values) {
            addCriterion("MID in", values, "mid");
            return this;
        }

        public Criteria andMidNotIn(List<Long> values) {
            addCriterion("MID not in", values, "mid");
            return this;
        }

        public Criteria andMidBetween(Long value1, Long value2) {
            addCriterion("MID between", value1, value2, "mid");
            return this;
        }

        public Criteria andMidNotBetween(Long value1, Long value2) {
            addCriterion("MID not between", value1, value2, "mid");
            return this;
        }

        public Criteria andDocidIsNull() {
            addCriterion("DOCID is null");
            return this;
        }

        public Criteria andDocidIsNotNull() {
            addCriterion("DOCID is not null");
            return this;
        }

        public Criteria andDocidEqualTo(Long value) {
            addCriterion("DOCID =", value, "docid");
            return this;
        }

        public Criteria andDocidNotEqualTo(Long value) {
            addCriterion("DOCID <>", value, "docid");
            return this;
        }

        public Criteria andDocidGreaterThan(Long value) {
            addCriterion("DOCID >", value, "docid");
            return this;
        }

        public Criteria andDocidGreaterThanOrEqualTo(Long value) {
            addCriterion("DOCID >=", value, "docid");
            return this;
        }

        public Criteria andDocidLessThan(Long value) {
            addCriterion("DOCID <", value, "docid");
            return this;
        }

        public Criteria andDocidLessThanOrEqualTo(Long value) {
            addCriterion("DOCID <=", value, "docid");
            return this;
        }

        public Criteria andDocidIn(List<Long> values) {
            addCriterion("DOCID in", values, "docid");
            return this;
        }

        public Criteria andDocidNotIn(List<Long> values) {
            addCriterion("DOCID not in", values, "docid");
            return this;
        }

        public Criteria andDocidBetween(Long value1, Long value2) {
            addCriterion("DOCID between", value1, value2, "docid");
            return this;
        }

        public Criteria andDocidNotBetween(Long value1, Long value2) {
            addCriterion("DOCID not between", value1, value2, "docid");
            return this;
        }

        public Criteria andChannelidIsNull() {
            addCriterion("CHANNELID is null");
            return this;
        }

        public Criteria andChannelidIsNotNull() {
            addCriterion("CHANNELID is not null");
            return this;
        }

        public Criteria andChannelidEqualTo(Long value) {
            addCriterion("CHANNELID =", value, "channelid");
            return this;
        }

        public Criteria andChannelidNotEqualTo(Long value) {
            addCriterion("CHANNELID <>", value, "channelid");
            return this;
        }

        public Criteria andChannelidGreaterThan(Long value) {
            addCriterion("CHANNELID >", value, "channelid");
            return this;
        }

        public Criteria andChannelidGreaterThanOrEqualTo(Long value) {
            addCriterion("CHANNELID >=", value, "channelid");
            return this;
        }

        public Criteria andChannelidLessThan(Long value) {
            addCriterion("CHANNELID <", value, "channelid");
            return this;
        }

        public Criteria andChannelidLessThanOrEqualTo(Long value) {
            addCriterion("CHANNELID <=", value, "channelid");
            return this;
        }

        public Criteria andChannelidIn(List<Long> values) {
            addCriterion("CHANNELID in", values, "channelid");
            return this;
        }

        public Criteria andChannelidNotIn(List<Long> values) {
            addCriterion("CHANNELID not in", values, "channelid");
            return this;
        }

        public Criteria andChannelidBetween(Long value1, Long value2) {
            addCriterion("CHANNELID between", value1, value2, "channelid");
            return this;
        }

        public Criteria andChannelidNotBetween(Long value1, Long value2) {
            addCriterion("CHANNELID not between", value1, value2, "channelid");
            return this;
        }

        public Criteria andCrtimeIsNull() {
            addCriterion("CRTIME is null");
            return this;
        }

        public Criteria andCrtimeIsNotNull() {
            addCriterion("CRTIME is not null");
            return this;
        }

        public Criteria andCrtimeEqualTo(Date value) {
            addCriterionForJDBCDate("CRTIME =", value, "crtime");
            return this;
        }

        public Criteria andCrtimeNotEqualTo(Date value) {
            addCriterionForJDBCDate("CRTIME <>", value, "crtime");
            return this;
        }

        public Criteria andCrtimeGreaterThan(Date value) {
            addCriterionForJDBCDate("CRTIME >", value, "crtime");
            return this;
        }

        public Criteria andCrtimeGreaterThanOrEqualTo(Date value) {
            addCriterionForJDBCDate("CRTIME >=", value, "crtime");
            return this;
        }

        public Criteria andCrtimeLessThan(Date value) {
            addCriterionForJDBCDate("CRTIME <", value, "crtime");
            return this;
        }

        public Criteria andCrtimeLessThanOrEqualTo(Date value) {
            addCriterionForJDBCDate("CRTIME <=", value, "crtime");
            return this;
        }

        public Criteria andCrtimeIn(List<Date> values) {
            addCriterionForJDBCDate("CRTIME in", values, "crtime");
            return this;
        }

        public Criteria andCrtimeNotIn(List<Date> values) {
            addCriterionForJDBCDate("CRTIME not in", values, "crtime");
            return this;
        }

        public Criteria andCrtimeBetween(Date value1, Date value2) {
            addCriterionForJDBCDate("CRTIME between", value1, value2, "crtime");
            return this;
        }

        public Criteria andCrtimeNotBetween(Date value1, Date value2) {
            addCriterionForJDBCDate("CRTIME not between", value1, value2, "crtime");
            return this;
        }

        public Criteria andTypeIsNull() {
            addCriterion("TYPE is null");
            return this;
        }

        public Criteria andTypeIsNotNull() {
            addCriterion("TYPE is not null");
            return this;
        }

        public Criteria andTypeEqualTo(String value) {
            addCriterion("TYPE =", value, "type");
            return this;
        }

        public Criteria andTypeNotEqualTo(String value) {
            addCriterion("TYPE <>", value, "type");
            return this;
        }

        public Criteria andTypeGreaterThan(String value) {
            addCriterion("TYPE >", value, "type");
            return this;
        }

        public Criteria andTypeGreaterThanOrEqualTo(String value) {
            addCriterion("TYPE >=", value, "type");
            return this;
        }

        public Criteria andTypeLessThan(String value) {
            addCriterion("TYPE <", value, "type");
            return this;
        }

        public Criteria andTypeLessThanOrEqualTo(String value) {
            addCriterion("TYPE <=", value, "type");
            return this;
        }

        public Criteria andTypeLike(String value) {
            addCriterion("TYPE like", value, "type");
            return this;
        }

        public Criteria andTypeNotLike(String value) {
            addCriterion("TYPE not like", value, "type");
            return this;
        }

        public Criteria andTypeIn(List<String> values) {
            addCriterion("TYPE in", values, "type");
            return this;
        }

        public Criteria andTypeNotIn(List<String> values) {
            addCriterion("TYPE not in", values, "type");
            return this;
        }

        public Criteria andTypeBetween(String value1, String value2) {
            addCriterion("TYPE between", value1, value2, "type");
            return this;
        }

        public Criteria andTypeNotBetween(String value1, String value2) {
            addCriterion("TYPE not between", value1, value2, "type");
            return this;
        }
    }
}