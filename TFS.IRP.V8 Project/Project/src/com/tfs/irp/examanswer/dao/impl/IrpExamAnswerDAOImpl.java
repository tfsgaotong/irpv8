package com.tfs.irp.examanswer.dao.impl;

import com.tfs.irp.examanswer.dao.IrpExamAnswerDAO;
import com.tfs.irp.examanswer.entity.IrpExamAnswer;
import com.tfs.irp.examanswer.entity.IrpExamAnswerExample;
import java.sql.SQLException;
import java.util.List;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;

public class IrpExamAnswerDAOImpl extends SqlMapClientDaoSupport  implements IrpExamAnswerDAO {
    
    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table irp_exam_answer
     *
     * @ibatorgenerated Thu Oct 30 09:55:51 CST 2014
     */
    public int countByExample(IrpExamAnswerExample example) throws SQLException {
        Integer count = (Integer)   getSqlMapClientTemplate().queryForObject("irp_exam_answer.ibatorgenerated_countByExample", example);
        return count;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table irp_exam_answer
     *
     * @ibatorgenerated Thu Oct 30 09:55:51 CST 2014
     */
    public int deleteByExample(IrpExamAnswerExample example) throws SQLException {
        int rows =  getSqlMapClientTemplate().delete("irp_exam_answer.ibatorgenerated_deleteByExample", example);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table irp_exam_answer
     *
     * @ibatorgenerated Thu Oct 30 09:55:51 CST 2014
     */
    public int deleteByPrimaryKey(Long answerid) throws SQLException {
        IrpExamAnswer key = new IrpExamAnswer();
        key.setAnswerid(answerid);
        int rows =  getSqlMapClientTemplate().delete("irp_exam_answer.ibatorgenerated_deleteByPrimaryKey", key);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table irp_exam_answer
     *
     * @ibatorgenerated Thu Oct 30 09:55:51 CST 2014
     */
    public void insert(IrpExamAnswer record) throws SQLException {
         getSqlMapClientTemplate().insert("irp_exam_answer.ibatorgenerated_insert", record);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table irp_exam_answer
     *
     * @ibatorgenerated Thu Oct 30 09:55:51 CST 2014
     */
    public void insertSelective(IrpExamAnswer record) throws SQLException {
         getSqlMapClientTemplate().insert("irp_exam_answer.ibatorgenerated_insertSelective", record);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table irp_exam_answer
     *
     * @ibatorgenerated Thu Oct 30 09:55:51 CST 2014
     */
    @SuppressWarnings("unchecked")
    public List<IrpExamAnswer> selectByExample(IrpExamAnswerExample example) throws SQLException {
        List<IrpExamAnswer> list =  getSqlMapClientTemplate().queryForList("irp_exam_answer.ibatorgenerated_selectByExample", example);
        return list;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table irp_exam_answer
     *
     * @ibatorgenerated Thu Oct 30 09:55:51 CST 2014
     */
    public IrpExamAnswer selectByPrimaryKey(Long answerid) throws SQLException {
        IrpExamAnswer key = new IrpExamAnswer();
        key.setAnswerid(answerid);
        IrpExamAnswer record = (IrpExamAnswer)  getSqlMapClientTemplate().queryForObject("irp_exam_answer.ibatorgenerated_selectByPrimaryKey", key);
        return record;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table irp_exam_answer
     *
     * @ibatorgenerated Thu Oct 30 09:55:51 CST 2014
     */
    public int updateByExampleSelective(IrpExamAnswer record, IrpExamAnswerExample example) throws SQLException {
        UpdateByExampleParms parms = new UpdateByExampleParms(record, example);
        int rows =  getSqlMapClientTemplate().update("irp_exam_answer.ibatorgenerated_updateByExampleSelective", parms);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table irp_exam_answer
     *
     * @ibatorgenerated Thu Oct 30 09:55:51 CST 2014
     */
    public int updateByExample(IrpExamAnswer record, IrpExamAnswerExample example) throws SQLException {
        UpdateByExampleParms parms = new UpdateByExampleParms(record, example);
        int rows =  getSqlMapClientTemplate().update("irp_exam_answer.ibatorgenerated_updateByExample", parms);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table irp_exam_answer
     *
     * @ibatorgenerated Thu Oct 30 09:55:51 CST 2014
     */
    public int updateByPrimaryKeySelective(IrpExamAnswer record) throws SQLException {
        int rows =  getSqlMapClientTemplate().update("irp_exam_answer.ibatorgenerated_updateByPrimaryKeySelective", record);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table irp_exam_answer
     *
     * @ibatorgenerated Thu Oct 30 09:55:51 CST 2014
     */
    public int updateByPrimaryKey(IrpExamAnswer record) throws SQLException {
        int rows =  getSqlMapClientTemplate().update("irp_exam_answer.ibatorgenerated_updateByPrimaryKey", record);
        return rows;
    }

    /**
     * This class was generated by Apache iBATIS ibator.
     * This class corresponds to the database table irp_exam_answer
     *
     * @ibatorgenerated Thu Oct 30 09:55:51 CST 2014
     */
    private static class UpdateByExampleParms extends IrpExamAnswerExample {
        private Object record;

        public UpdateByExampleParms(Object record, IrpExamAnswerExample example) {
            super(example);
            this.record = record;
        }

        public Object getRecord() {
            return record;
        }
    }
}