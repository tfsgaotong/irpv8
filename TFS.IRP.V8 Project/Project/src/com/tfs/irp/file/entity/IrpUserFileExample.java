package com.tfs.irp.file.entity;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

public class IrpUserFileExample {
    /**
     * This field was generated by Apache iBATIS ibator.
     * This field corresponds to the database table IRP_USER_FILE
     *
     * @ibatorgenerated Thu May 16 10:06:59 CST 2013
     */
    protected String orderByClause;

    /**
     * This field was generated by Apache iBATIS ibator.
     * This field corresponds to the database table IRP_USER_FILE
     *
     * @ibatorgenerated Thu May 16 10:06:59 CST 2013
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_USER_FILE
     *
     * @ibatorgenerated Thu May 16 10:06:59 CST 2013
     */
    public IrpUserFileExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_USER_FILE
     *
     * @ibatorgenerated Thu May 16 10:06:59 CST 2013
     */
    protected IrpUserFileExample(IrpUserFileExample example) {
        this.orderByClause = example.orderByClause;
        this.oredCriteria = example.oredCriteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_USER_FILE
     *
     * @ibatorgenerated Thu May 16 10:06:59 CST 2013
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_USER_FILE
     *
     * @ibatorgenerated Thu May 16 10:06:59 CST 2013
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_USER_FILE
     *
     * @ibatorgenerated Thu May 16 10:06:59 CST 2013
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_USER_FILE
     *
     * @ibatorgenerated Thu May 16 10:06:59 CST 2013
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_USER_FILE
     *
     * @ibatorgenerated Thu May 16 10:06:59 CST 2013
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_USER_FILE
     *
     * @ibatorgenerated Thu May 16 10:06:59 CST 2013
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_USER_FILE
     *
     * @ibatorgenerated Thu May 16 10:06:59 CST 2013
     */
    public void clear() {
        oredCriteria.clear();
    }

    /**
     * This class was generated by Apache iBATIS ibator.
     * This class corresponds to the database table IRP_USER_FILE
     *
     * @ibatorgenerated Thu May 16 10:06:59 CST 2013
     */
    public static class Criteria {
        protected List<String> criteriaWithoutValue;

        protected List<Map<String, Object>> criteriaWithSingleValue;

        protected List<Map<String, Object>> criteriaWithListValue;

        protected List<Map<String, Object>> criteriaWithBetweenValue;

        protected Criteria() {
            super();
            criteriaWithoutValue = new ArrayList<String>();
            criteriaWithSingleValue = new ArrayList<Map<String, Object>>();
            criteriaWithListValue = new ArrayList<Map<String, Object>>();
            criteriaWithBetweenValue = new ArrayList<Map<String, Object>>();
        }

        public boolean isValid() {
            return criteriaWithoutValue.size() > 0
                || criteriaWithSingleValue.size() > 0
                || criteriaWithListValue.size() > 0
                || criteriaWithBetweenValue.size() > 0;
        }

        public List<String> getCriteriaWithoutValue() {
            return criteriaWithoutValue;
        }

        public List<Map<String, Object>> getCriteriaWithSingleValue() {
            return criteriaWithSingleValue;
        }

        public List<Map<String, Object>> getCriteriaWithListValue() {
            return criteriaWithListValue;
        }

        public List<Map<String, Object>> getCriteriaWithBetweenValue() {
            return criteriaWithBetweenValue;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteriaWithoutValue.add(condition);
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("condition", condition);
            map.put("value", value);
            criteriaWithSingleValue.add(map);
        }

        protected void addCriterion(String condition, List<? extends Object> values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("condition", condition);
            map.put("values", values);
            criteriaWithListValue.add(map);
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            List<Object> list = new ArrayList<Object>();
            list.add(value1);
            list.add(value2);
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("condition", condition);
            map.put("values", list);
            criteriaWithBetweenValue.add(map);
        }

        protected void addCriterionForJDBCDate(String condition, Date value, String property) {
            addCriterion(condition, new java.sql.Date(value.getTime()), property);
        }

        protected void addCriterionForJDBCDate(String condition, List<Date> values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            List<java.sql.Date> dateList = new ArrayList<java.sql.Date>();
            Iterator<Date> iter = values.iterator();
            while (iter.hasNext()) {
                dateList.add(new java.sql.Date(iter.next().getTime()));
            }
            addCriterion(condition, dateList, property);
        }

        protected void addCriterionForJDBCDate(String condition, Date value1, Date value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            addCriterion(condition, new java.sql.Date(value1.getTime()), new java.sql.Date(value2.getTime()), property);
        }

        public Criteria andUserfileidIsNull() {
            addCriterion("USERFILEID is null");
            return this;
        }

        public Criteria andUserfileidIsNotNull() {
            addCriterion("USERFILEID is not null");
            return this;
        }

        public Criteria andUserfileidEqualTo(Long value) {
            addCriterion("USERFILEID =", value, "userfileid");
            return this;
        }

        public Criteria andUserfileidNotEqualTo(Long value) {
            addCriterion("USERFILEID <>", value, "userfileid");
            return this;
        }

        public Criteria andUserfileidGreaterThan(Long value) {
            addCriterion("USERFILEID >", value, "userfileid");
            return this;
        }

        public Criteria andUserfileidGreaterThanOrEqualTo(Long value) {
            addCriterion("USERFILEID >=", value, "userfileid");
            return this;
        }

        public Criteria andUserfileidLessThan(Long value) {
            addCriterion("USERFILEID <", value, "userfileid");
            return this;
        }

        public Criteria andUserfileidLessThanOrEqualTo(Long value) {
            addCriterion("USERFILEID <=", value, "userfileid");
            return this;
        }

        public Criteria andUserfileidIn(List<Long> values) {
            addCriterion("USERFILEID in", values, "userfileid");
            return this;
        }

        public Criteria andUserfileidNotIn(List<Long> values) {
            addCriterion("USERFILEID not in", values, "userfileid");
            return this;
        }

        public Criteria andUserfileidBetween(Long value1, Long value2) {
            addCriterion("USERFILEID between", value1, value2, "userfileid");
            return this;
        }

        public Criteria andUserfileidNotBetween(Long value1, Long value2) {
            addCriterion("USERFILEID not between", value1, value2, "userfileid");
            return this;
        }

        public Criteria andFilenameIsNull() {
            addCriterion("FILENAME is null");
            return this;
        }

        public Criteria andFilenameIsNotNull() {
            addCriterion("FILENAME is not null");
            return this;
        }

        public Criteria andFilenameEqualTo(String value) {
            addCriterion("FILENAME =", value, "filename");
            return this;
        }

        public Criteria andFilenameNotEqualTo(String value) {
            addCriterion("FILENAME <>", value, "filename");
            return this;
        }

        public Criteria andFilenameGreaterThan(String value) {
            addCriterion("FILENAME >", value, "filename");
            return this;
        }

        public Criteria andFilenameGreaterThanOrEqualTo(String value) {
            addCriterion("FILENAME >=", value, "filename");
            return this;
        }

        public Criteria andFilenameLessThan(String value) {
            addCriterion("FILENAME <", value, "filename");
            return this;
        }

        public Criteria andFilenameLessThanOrEqualTo(String value) {
            addCriterion("FILENAME <=", value, "filename");
            return this;
        }

        public Criteria andFilenameLike(String value) {
            addCriterion("FILENAME like", value, "filename");
            return this;
        }

        public Criteria andFilenameNotLike(String value) {
            addCriterion("FILENAME not like", value, "filename");
            return this;
        }

        public Criteria andFilenameIn(List<String> values) {
            addCriterion("FILENAME in", values, "filename");
            return this;
        }

        public Criteria andFilenameNotIn(List<String> values) {
            addCriterion("FILENAME not in", values, "filename");
            return this;
        }

        public Criteria andFilenameBetween(String value1, String value2) {
            addCriterion("FILENAME between", value1, value2, "filename");
            return this;
        }

        public Criteria andFilenameNotBetween(String value1, String value2) {
            addCriterion("FILENAME not between", value1, value2, "filename");
            return this;
        }

        public Criteria andFileextIsNull() {
            addCriterion("FILEEXT is null");
            return this;
        }

        public Criteria andFileextIsNotNull() {
            addCriterion("FILEEXT is not null");
            return this;
        }

        public Criteria andFileextEqualTo(String value) {
            addCriterion("FILEEXT =", value, "fileext");
            return this;
        }

        public Criteria andFileextNotEqualTo(String value) {
            addCriterion("FILEEXT <>", value, "fileext");
            return this;
        }

        public Criteria andFileextGreaterThan(String value) {
            addCriterion("FILEEXT >", value, "fileext");
            return this;
        }

        public Criteria andFileextGreaterThanOrEqualTo(String value) {
            addCriterion("FILEEXT >=", value, "fileext");
            return this;
        }

        public Criteria andFileextLessThan(String value) {
            addCriterion("FILEEXT <", value, "fileext");
            return this;
        }

        public Criteria andFileextLessThanOrEqualTo(String value) {
            addCriterion("FILEEXT <=", value, "fileext");
            return this;
        }

        public Criteria andFileextLike(String value) {
            addCriterion("FILEEXT like", value, "fileext");
            return this;
        }

        public Criteria andFileextNotLike(String value) {
            addCriterion("FILEEXT not like", value, "fileext");
            return this;
        }

        public Criteria andFileextIn(List<String> values) {
            addCriterion("FILEEXT in", values, "fileext");
            return this;
        }

        public Criteria andFileextNotIn(List<String> values) {
            addCriterion("FILEEXT not in", values, "fileext");
            return this;
        }

        public Criteria andFileextBetween(String value1, String value2) {
            addCriterion("FILEEXT between", value1, value2, "fileext");
            return this;
        }

        public Criteria andFileextNotBetween(String value1, String value2) {
            addCriterion("FILEEXT not between", value1, value2, "fileext");
            return this;
        }

        public Criteria andFiletypeidIsNull() {
            addCriterion("FILETYPEID is null");
            return this;
        }

        public Criteria andFiletypeidIsNotNull() {
            addCriterion("FILETYPEID is not null");
            return this;
        }

        public Criteria andFiletypeidEqualTo(Long value) {
            addCriterion("FILETYPEID =", value, "filetypeid");
            return this;
        }

        public Criteria andFiletypeidNotEqualTo(Long value) {
            addCriterion("FILETYPEID <>", value, "filetypeid");
            return this;
        }

        public Criteria andFiletypeidGreaterThan(Long value) {
            addCriterion("FILETYPEID >", value, "filetypeid");
            return this;
        }

        public Criteria andFiletypeidGreaterThanOrEqualTo(Long value) {
            addCriterion("FILETYPEID >=", value, "filetypeid");
            return this;
        }

        public Criteria andFiletypeidLessThan(Long value) {
            addCriterion("FILETYPEID <", value, "filetypeid");
            return this;
        }

        public Criteria andFiletypeidLessThanOrEqualTo(Long value) {
            addCriterion("FILETYPEID <=", value, "filetypeid");
            return this;
        }

        public Criteria andFiletypeidIn(List<Long> values) {
            addCriterion("FILETYPEID in", values, "filetypeid");
            return this;
        }

        public Criteria andFiletypeidNotIn(List<Long> values) {
            addCriterion("FILETYPEID not in", values, "filetypeid");
            return this;
        }

        public Criteria andFiletypeidBetween(Long value1, Long value2) {
            addCriterion("FILETYPEID between", value1, value2, "filetypeid");
            return this;
        }

        public Criteria andFiletypeidNotBetween(Long value1, Long value2) {
            addCriterion("FILETYPEID not between", value1, value2, "filetypeid");
            return this;
        }

        public Criteria andCruseridIsNull() {
            addCriterion("CRUSERID is null");
            return this;
        }

        public Criteria andCruseridIsNotNull() {
            addCriterion("CRUSERID is not null");
            return this;
        }

        public Criteria andCruseridEqualTo(Long value) {
            addCriterion("CRUSERID =", value, "cruserid");
            return this;
        }

        public Criteria andCruseridNotEqualTo(Long value) {
            addCriterion("CRUSERID <>", value, "cruserid");
            return this;
        }

        public Criteria andCruseridGreaterThan(Long value) {
            addCriterion("CRUSERID >", value, "cruserid");
            return this;
        }

        public Criteria andCruseridGreaterThanOrEqualTo(Long value) {
            addCriterion("CRUSERID >=", value, "cruserid");
            return this;
        }

        public Criteria andCruseridLessThan(Long value) {
            addCriterion("CRUSERID <", value, "cruserid");
            return this;
        }

        public Criteria andCruseridLessThanOrEqualTo(Long value) {
            addCriterion("CRUSERID <=", value, "cruserid");
            return this;
        }

        public Criteria andCruseridIn(List<Long> values) {
            addCriterion("CRUSERID in", values, "cruserid");
            return this;
        }

        public Criteria andCruseridNotIn(List<Long> values) {
            addCriterion("CRUSERID not in", values, "cruserid");
            return this;
        }

        public Criteria andCruseridBetween(Long value1, Long value2) {
            addCriterion("CRUSERID between", value1, value2, "cruserid");
            return this;
        }

        public Criteria andCruseridNotBetween(Long value1, Long value2) {
            addCriterion("CRUSERID not between", value1, value2, "cruserid");
            return this;
        }

        public Criteria andCruserIsNull() {
            addCriterion("CRUSER is null");
            return this;
        }

        public Criteria andCruserIsNotNull() {
            addCriterion("CRUSER is not null");
            return this;
        }

        public Criteria andCruserEqualTo(String value) {
            addCriterion("CRUSER =", value, "cruser");
            return this;
        }

        public Criteria andCruserNotEqualTo(String value) {
            addCriterion("CRUSER <>", value, "cruser");
            return this;
        }

        public Criteria andCruserGreaterThan(String value) {
            addCriterion("CRUSER >", value, "cruser");
            return this;
        }

        public Criteria andCruserGreaterThanOrEqualTo(String value) {
            addCriterion("CRUSER >=", value, "cruser");
            return this;
        }

        public Criteria andCruserLessThan(String value) {
            addCriterion("CRUSER <", value, "cruser");
            return this;
        }

        public Criteria andCruserLessThanOrEqualTo(String value) {
            addCriterion("CRUSER <=", value, "cruser");
            return this;
        }

        public Criteria andCruserLike(String value) {
            addCriterion("CRUSER like", value, "cruser");
            return this;
        }

        public Criteria andCruserNotLike(String value) {
            addCriterion("CRUSER not like", value, "cruser");
            return this;
        }

        public Criteria andCruserIn(List<String> values) {
            addCriterion("CRUSER in", values, "cruser");
            return this;
        }

        public Criteria andCruserNotIn(List<String> values) {
            addCriterion("CRUSER not in", values, "cruser");
            return this;
        }

        public Criteria andCruserBetween(String value1, String value2) {
            addCriterion("CRUSER between", value1, value2, "cruser");
            return this;
        }

        public Criteria andCruserNotBetween(String value1, String value2) {
            addCriterion("CRUSER not between", value1, value2, "cruser");
            return this;
        }

        public Criteria andCrtimeIsNull() {
            addCriterion("CRTIME is null");
            return this;
        }

        public Criteria andCrtimeIsNotNull() {
            addCriterion("CRTIME is not null");
            return this;
        }

        public Criteria andCrtimeEqualTo(Date value) {
            addCriterionForJDBCDate("CRTIME =", value, "crtime");
            return this;
        }

        public Criteria andCrtimeNotEqualTo(Date value) {
            addCriterionForJDBCDate("CRTIME <>", value, "crtime");
            return this;
        }

        public Criteria andCrtimeGreaterThan(Date value) {
            addCriterionForJDBCDate("CRTIME >", value, "crtime");
            return this;
        }

        public Criteria andCrtimeGreaterThanOrEqualTo(Date value) {
            addCriterionForJDBCDate("CRTIME >=", value, "crtime");
            return this;
        }

        public Criteria andCrtimeLessThan(Date value) {
            addCriterionForJDBCDate("CRTIME <", value, "crtime");
            return this;
        }

        public Criteria andCrtimeLessThanOrEqualTo(Date value) {
            addCriterionForJDBCDate("CRTIME <=", value, "crtime");
            return this;
        }

        public Criteria andCrtimeIn(List<Date> values) {
            addCriterionForJDBCDate("CRTIME in", values, "crtime");
            return this;
        }

        public Criteria andCrtimeNotIn(List<Date> values) {
            addCriterionForJDBCDate("CRTIME not in", values, "crtime");
            return this;
        }

        public Criteria andCrtimeBetween(Date value1, Date value2) {
            addCriterionForJDBCDate("CRTIME between", value1, value2, "crtime");
            return this;
        }

        public Criteria andCrtimeNotBetween(Date value1, Date value2) {
            addCriterionForJDBCDate("CRTIME not between", value1, value2, "crtime");
            return this;
        }
    }
}