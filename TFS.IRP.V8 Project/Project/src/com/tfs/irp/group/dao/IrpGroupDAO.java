package com.tfs.irp.group.dao;

import com.tfs.irp.group.entity.IrpGroup;
import com.tfs.irp.group.entity.IrpGroupExample;
import com.tfs.irp.user.entity.IrpUser;
import com.tfs.irp.user.entity.IrpUserExample;
import com.tfs.irp.util.PageUtil;

import java.sql.SQLException;
import java.util.List;
import java.util.Map;

public interface IrpGroupDAO {
    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_GROUP
     *
     * @ibatorgenerated Thu Feb 28 16:10:30 CST 2013
     */
    int countByExample(IrpGroupExample example) throws SQLException;

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_GROUP
     *
     * @ibatorgenerated Thu Feb 28 16:10:30 CST 2013
     */
    int deleteByExample(IrpGroupExample example) throws SQLException;

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_GROUP
     *
     * @ibatorgenerated Thu Feb 28 16:10:30 CST 2013
     */
    int deleteByPrimaryKey(Long groupid) throws SQLException;

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_GROUP
     *
     * @ibatorgenerated Thu Feb 28 16:10:30 CST 2013
     */
    void insert(IrpGroup record) throws SQLException;

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_GROUP
     *
     * @ibatorgenerated Thu Feb 28 16:10:30 CST 2013
     */
    void insertSelective(IrpGroup record) throws SQLException;

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_GROUP
     *
     * @ibatorgenerated Thu Feb 28 16:10:30 CST 2013
     */
    List<IrpGroup> selectByExample(IrpGroupExample example) throws SQLException;
    
    List<IrpGroup> selectByExample(IrpGroupExample example, PageUtil pageUtil) throws SQLException;

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_GROUP
     *
     * @ibatorgenerated Thu Feb 28 16:10:30 CST 2013
     */
    IrpGroup selectByPrimaryKey(Long groupid) throws SQLException;

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_GROUP
     *
     * @ibatorgenerated Thu Feb 28 16:10:30 CST 2013
     */
    int updateByExampleSelective(IrpGroup record, IrpGroupExample example) throws SQLException;

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_GROUP
     *
     * @ibatorgenerated Thu Feb 28 16:10:30 CST 2013
     */
    int updateByExample(IrpGroup record, IrpGroupExample example) throws SQLException;

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_GROUP
     *
     * @ibatorgenerated Thu Feb 28 16:10:30 CST 2013
     */
    int updateByPrimaryKeySelective(IrpGroup record) throws SQLException;

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_GROUP
     *
     * @ibatorgenerated Thu Feb 28 16:10:30 CST 2013
     */
    int updateByPrimaryKey(IrpGroup record) throws SQLException;
    
    /**
	 * 根据组织Id查询所属的用户集合
	 * @param _mParam (Map的Key为:groupId,orderStr)
	 * @param pageUtil
	 * @return
	 * @throws SQLException
	 */
    List<IrpUser> findUsersOfPageByGroupId(Map<String, Object> _mParam,	PageUtil pageUtil) throws SQLException;
    List<IrpUser> findUsersByGroupIdAndSm(Map<String, Object> _mParam,	PageUtil pageUtil) throws SQLException;
    /**
     * 根据组织Id查询所属的用户集合
     * @param _mParam
     * @return
     * @throws SQLException
     */
    List<IrpUser> findUsersByGroupId(Map<String, Object> _mParam) throws SQLException;
    
    /**
     * 根据组织ID获得所属组织的用户总数
     * @param _nGroupId
     * @return
     * @throws SQLException
     */
	int findUsersCountByGroupId(Map<String, Object> _mParam) throws SQLException;
	
	/**
	 * 根据组织Id集合删除组织对象
	 * @param arrGroupIds
	 * @param _nParentId
	 * @return
	 * @throws SQLException
	 */
	int deleteByGroupIds(List<Long> arrGroupIds, Long _nParentId) throws SQLException; 

}