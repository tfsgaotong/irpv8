package com.tfs.irp.leaveoper.entity;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class IrpLeaveoperExample {

	/**
	 * This field was generated by Apache iBATIS ibator. This field corresponds to the database table IRP_LEAVEOPER
	 * @ibatorgenerated  Wed Aug 24 17:57:42 CST 2016
	 */
	protected String orderByClause;
	/**
	 * This field was generated by Apache iBATIS ibator. This field corresponds to the database table IRP_LEAVEOPER
	 * @ibatorgenerated  Wed Aug 24 17:57:42 CST 2016
	 */
	protected List<Criteria> oredCriteria;

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table IRP_LEAVEOPER
	 * @ibatorgenerated  Wed Aug 24 17:57:42 CST 2016
	 */
	public IrpLeaveoperExample() {
		oredCriteria = new ArrayList<Criteria>();
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table IRP_LEAVEOPER
	 * @ibatorgenerated  Wed Aug 24 17:57:42 CST 2016
	 */
	protected IrpLeaveoperExample(IrpLeaveoperExample example) {
		this.orderByClause = example.orderByClause;
		this.oredCriteria = example.oredCriteria;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table IRP_LEAVEOPER
	 * @ibatorgenerated  Wed Aug 24 17:57:42 CST 2016
	 */
	public void setOrderByClause(String orderByClause) {
		this.orderByClause = orderByClause;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table IRP_LEAVEOPER
	 * @ibatorgenerated  Wed Aug 24 17:57:42 CST 2016
	 */
	public String getOrderByClause() {
		return orderByClause;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table IRP_LEAVEOPER
	 * @ibatorgenerated  Wed Aug 24 17:57:42 CST 2016
	 */
	public List<Criteria> getOredCriteria() {
		return oredCriteria;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table IRP_LEAVEOPER
	 * @ibatorgenerated  Wed Aug 24 17:57:42 CST 2016
	 */
	public void or(Criteria criteria) {
		oredCriteria.add(criteria);
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table IRP_LEAVEOPER
	 * @ibatorgenerated  Wed Aug 24 17:57:42 CST 2016
	 */
	public Criteria createCriteria() {
		Criteria criteria = createCriteriaInternal();
		if (oredCriteria.size() == 0) {
			oredCriteria.add(criteria);
		}
		return criteria;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table IRP_LEAVEOPER
	 * @ibatorgenerated  Wed Aug 24 17:57:42 CST 2016
	 */
	protected Criteria createCriteriaInternal() {
		Criteria criteria = new Criteria();
		return criteria;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table IRP_LEAVEOPER
	 * @ibatorgenerated  Wed Aug 24 17:57:42 CST 2016
	 */
	public void clear() {
		oredCriteria.clear();
	}

	/**
	 * This class was generated by Apache iBATIS ibator. This class corresponds to the database table IRP_LEAVEOPER
	 * @ibatorgenerated  Wed Aug 24 17:57:42 CST 2016
	 */
	public static class Criteria {
		protected List<String> criteriaWithoutValue;
		protected List<Map<String, Object>> criteriaWithSingleValue;
		protected List<Map<String, Object>> criteriaWithListValue;
		protected List<Map<String, Object>> criteriaWithBetweenValue;

		protected Criteria() {
			super();
			criteriaWithoutValue = new ArrayList<String>();
			criteriaWithSingleValue = new ArrayList<Map<String, Object>>();
			criteriaWithListValue = new ArrayList<Map<String, Object>>();
			criteriaWithBetweenValue = new ArrayList<Map<String, Object>>();
		}

		public boolean isValid() {
			return criteriaWithoutValue.size() > 0
					|| criteriaWithSingleValue.size() > 0
					|| criteriaWithListValue.size() > 0
					|| criteriaWithBetweenValue.size() > 0;
		}

		public List<String> getCriteriaWithoutValue() {
			return criteriaWithoutValue;
		}

		public List<Map<String, Object>> getCriteriaWithSingleValue() {
			return criteriaWithSingleValue;
		}

		public List<Map<String, Object>> getCriteriaWithListValue() {
			return criteriaWithListValue;
		}

		public List<Map<String, Object>> getCriteriaWithBetweenValue() {
			return criteriaWithBetweenValue;
		}

		protected void addCriterion(String condition) {
			if (condition == null) {
				throw new RuntimeException("Value for condition cannot be null");
			}
			criteriaWithoutValue.add(condition);
		}

		protected void addCriterion(String condition, Object value,
				String property) {
			if (value == null) {
				throw new RuntimeException("Value for " + property
						+ " cannot be null");
			}
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("condition", condition);
			map.put("value", value);
			criteriaWithSingleValue.add(map);
		}

		protected void addCriterion(String condition,
				List<? extends Object> values, String property) {
			if (values == null || values.size() == 0) {
				throw new RuntimeException("Value list for " + property
						+ " cannot be null or empty");
			}
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("condition", condition);
			map.put("values", values);
			criteriaWithListValue.add(map);
		}

		protected void addCriterion(String condition, Object value1,
				Object value2, String property) {
			if (value1 == null || value2 == null) {
				throw new RuntimeException("Between values for " + property
						+ " cannot be null");
			}
			List<Object> list = new ArrayList<Object>();
			list.add(value1);
			list.add(value2);
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("condition", condition);
			map.put("values", list);
			criteriaWithBetweenValue.add(map);
		}

		public Criteria andOperidIsNull() {
			addCriterion("OPERID is null");
			return this;
		}

		public Criteria andOperidIsNotNull() {
			addCriterion("OPERID is not null");
			return this;
		}

		public Criteria andOperidEqualTo(Long value) {
			addCriterion("OPERID =", value, "operid");
			return this;
		}

		public Criteria andOperidNotEqualTo(Long value) {
			addCriterion("OPERID <>", value, "operid");
			return this;
		}

		public Criteria andOperidGreaterThan(Long value) {
			addCriterion("OPERID >", value, "operid");
			return this;
		}

		public Criteria andOperidGreaterThanOrEqualTo(Long value) {
			addCriterion("OPERID >=", value, "operid");
			return this;
		}

		public Criteria andOperidLessThan(Long value) {
			addCriterion("OPERID <", value, "operid");
			return this;
		}

		public Criteria andOperidLessThanOrEqualTo(Long value) {
			addCriterion("OPERID <=", value, "operid");
			return this;
		}

		public Criteria andOperidIn(List<Long> values) {
			addCriterion("OPERID in", values, "operid");
			return this;
		}

		public Criteria andOperidNotIn(List<Long> values) {
			addCriterion("OPERID not in", values, "operid");
			return this;
		}

		public Criteria andOperidBetween(Long value1, Long value2) {
			addCriterion("OPERID between", value1, value2, "operid");
			return this;
		}

		public Criteria andOperidNotBetween(Long value1, Long value2) {
			addCriterion("OPERID not between", value1, value2, "operid");
			return this;
		}

		public Criteria andUseridIsNull() {
			addCriterion("USERID is null");
			return this;
		}

		public Criteria andUseridIsNotNull() {
			addCriterion("USERID is not null");
			return this;
		}

		public Criteria andUseridEqualTo(Long value) {
			addCriterion("USERID =", value, "userid");
			return this;
		}

		public Criteria andUseridNotEqualTo(Long value) {
			addCriterion("USERID <>", value, "userid");
			return this;
		}

		public Criteria andUseridGreaterThan(Long value) {
			addCriterion("USERID >", value, "userid");
			return this;
		}

		public Criteria andUseridGreaterThanOrEqualTo(Long value) {
			addCriterion("USERID >=", value, "userid");
			return this;
		}

		public Criteria andUseridLessThan(Long value) {
			addCriterion("USERID <", value, "userid");
			return this;
		}

		public Criteria andUseridLessThanOrEqualTo(Long value) {
			addCriterion("USERID <=", value, "userid");
			return this;
		}

		public Criteria andUseridIn(List<Long> values) {
			addCriterion("USERID in", values, "userid");
			return this;
		}

		public Criteria andUseridNotIn(List<Long> values) {
			addCriterion("USERID not in", values, "userid");
			return this;
		}

		public Criteria andUseridBetween(Long value1, Long value2) {
			addCriterion("USERID between", value1, value2, "userid");
			return this;
		}

		public Criteria andUseridNotBetween(Long value1, Long value2) {
			addCriterion("USERID not between", value1, value2, "userid");
			return this;
		}

		public Criteria andLeaveapplyidIsNull() {
			addCriterion("LEAVEAPPLYID is null");
			return this;
		}

		public Criteria andLeaveapplyidIsNotNull() {
			addCriterion("LEAVEAPPLYID is not null");
			return this;
		}

		public Criteria andLeaveapplyidEqualTo(Long value) {
			addCriterion("LEAVEAPPLYID =", value, "leaveapplyid");
			return this;
		}

		public Criteria andLeaveapplyidNotEqualTo(Long value) {
			addCriterion("LEAVEAPPLYID <>", value, "leaveapplyid");
			return this;
		}

		public Criteria andLeaveapplyidGreaterThan(Long value) {
			addCriterion("LEAVEAPPLYID >", value, "leaveapplyid");
			return this;
		}

		public Criteria andLeaveapplyidGreaterThanOrEqualTo(Long value) {
			addCriterion("LEAVEAPPLYID >=", value, "leaveapplyid");
			return this;
		}

		public Criteria andLeaveapplyidLessThan(Long value) {
			addCriterion("LEAVEAPPLYID <", value, "leaveapplyid");
			return this;
		}

		public Criteria andLeaveapplyidLessThanOrEqualTo(Long value) {
			addCriterion("LEAVEAPPLYID <=", value, "leaveapplyid");
			return this;
		}

		public Criteria andLeaveapplyidIn(List<Long> values) {
			addCriterion("LEAVEAPPLYID in", values, "leaveapplyid");
			return this;
		}

		public Criteria andLeaveapplyidNotIn(List<Long> values) {
			addCriterion("LEAVEAPPLYID not in", values, "leaveapplyid");
			return this;
		}

		public Criteria andLeaveapplyidBetween(Long value1, Long value2) {
			addCriterion("LEAVEAPPLYID between", value1, value2, "leaveapplyid");
			return this;
		}

		public Criteria andLeaveapplyidNotBetween(Long value1, Long value2) {
			addCriterion("LEAVEAPPLYID not between", value1, value2,
					"leaveapplyid");
			return this;
		}

		public Criteria andOperstatusIsNull() {
			addCriterion("OPERSTATUS is null");
			return this;
		}

		public Criteria andOperstatusIsNotNull() {
			addCriterion("OPERSTATUS is not null");
			return this;
		}

		public Criteria andOperstatusEqualTo(Integer value) {
			addCriterion("OPERSTATUS =", value, "operstatus");
			return this;
		}

		public Criteria andOperstatusNotEqualTo(Integer value) {
			addCriterion("OPERSTATUS <>", value, "operstatus");
			return this;
		}

		public Criteria andOperstatusGreaterThan(Integer value) {
			addCriterion("OPERSTATUS >", value, "operstatus");
			return this;
		}

		public Criteria andOperstatusGreaterThanOrEqualTo(Integer value) {
			addCriterion("OPERSTATUS >=", value, "operstatus");
			return this;
		}

		public Criteria andOperstatusLessThan(Integer value) {
			addCriterion("OPERSTATUS <", value, "operstatus");
			return this;
		}

		public Criteria andOperstatusLessThanOrEqualTo(Integer value) {
			addCriterion("OPERSTATUS <=", value, "operstatus");
			return this;
		}

		public Criteria andOperstatusIn(List<Integer> values) {
			addCriterion("OPERSTATUS in", values, "operstatus");
			return this;
		}

		public Criteria andOperstatusNotIn(List<Integer> values) {
			addCriterion("OPERSTATUS not in", values, "operstatus");
			return this;
		}

		public Criteria andOperstatusBetween(Integer value1, Integer value2) {
			addCriterion("OPERSTATUS between", value1, value2, "operstatus");
			return this;
		}

		public Criteria andOperstatusNotBetween(Integer value1, Integer value2) {
			addCriterion("OPERSTATUS not between", value1, value2, "operstatus");
			return this;
		}

		public Criteria andCruseridIsNull() {
			addCriterion("CRUSERID is null");
			return this;
		}

		public Criteria andCruseridIsNotNull() {
			addCriterion("CRUSERID is not null");
			return this;
		}

		public Criteria andCruseridEqualTo(Long value) {
			addCriterion("CRUSERID =", value, "cruserid");
			return this;
		}

		public Criteria andCruseridNotEqualTo(Long value) {
			addCriterion("CRUSERID <>", value, "cruserid");
			return this;
		}

		public Criteria andCruseridGreaterThan(Long value) {
			addCriterion("CRUSERID >", value, "cruserid");
			return this;
		}

		public Criteria andCruseridGreaterThanOrEqualTo(Long value) {
			addCriterion("CRUSERID >=", value, "cruserid");
			return this;
		}

		public Criteria andCruseridLessThan(Long value) {
			addCriterion("CRUSERID <", value, "cruserid");
			return this;
		}

		public Criteria andCruseridLessThanOrEqualTo(Long value) {
			addCriterion("CRUSERID <=", value, "cruserid");
			return this;
		}

		public Criteria andCruseridIn(List<Long> values) {
			addCriterion("CRUSERID in", values, "cruserid");
			return this;
		}

		public Criteria andCruseridNotIn(List<Long> values) {
			addCriterion("CRUSERID not in", values, "cruserid");
			return this;
		}

		public Criteria andCruseridBetween(Long value1, Long value2) {
			addCriterion("CRUSERID between", value1, value2, "cruserid");
			return this;
		}

		public Criteria andCruseridNotBetween(Long value1, Long value2) {
			addCriterion("CRUSERID not between", value1, value2, "cruserid");
			return this;
		}

		public Criteria andCrtimeIsNull() {
			addCriterion("CRTIME is null");
			return this;
		}

		public Criteria andCrtimeIsNotNull() {
			addCriterion("CRTIME is not null");
			return this;
		}

		public Criteria andCrtimeEqualTo(Date value) {
			addCriterion("CRTIME =", value, "crtime");
			return this;
		}

		public Criteria andCrtimeNotEqualTo(Date value) {
			addCriterion("CRTIME <>", value, "crtime");
			return this;
		}

		public Criteria andCrtimeGreaterThan(Date value) {
			addCriterion("CRTIME >", value, "crtime");
			return this;
		}

		public Criteria andCrtimeGreaterThanOrEqualTo(Date value) {
			addCriterion("CRTIME >=", value, "crtime");
			return this;
		}

		public Criteria andCrtimeLessThan(Date value) {
			addCriterion("CRTIME <", value, "crtime");
			return this;
		}

		public Criteria andCrtimeLessThanOrEqualTo(Date value) {
			addCriterion("CRTIME <=", value, "crtime");
			return this;
		}

		public Criteria andCrtimeIn(List<Date> values) {
			addCriterion("CRTIME in", values, "crtime");
			return this;
		}

		public Criteria andCrtimeNotIn(List<Date> values) {
			addCriterion("CRTIME not in", values, "crtime");
			return this;
		}

		public Criteria andCrtimeBetween(Date value1, Date value2) {
			addCriterion("CRTIME between", value1, value2, "crtime");
			return this;
		}

		public Criteria andCrtimeNotBetween(Date value1, Date value2) {
			addCriterion("CRTIME not between", value1, value2, "crtime");
			return this;
		}
	}
}