package com.tfs.irp.messagecontent.dao;

import com.tfs.irp.messagecontent.entity.IrpMessageContent;
import com.tfs.irp.messagecontent.entity.IrpMessageContentExample;
import com.tfs.irp.util.PageUtil;

import java.sql.SQLException;
import java.util.List;
import java.util.Map;

public interface IrpMessageContentDAO {
    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_MESSAGE_CONTENT
     *
     * @ibatorgenerated Sun Jun 09 16:47:42 CST 2013
     */
    int countByExample(IrpMessageContentExample example) throws SQLException;

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_MESSAGE_CONTENT
     *
     * @ibatorgenerated Sun Jun 09 16:47:42 CST 2013
     */
    int deleteByExample(IrpMessageContentExample example) throws SQLException;

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_MESSAGE_CONTENT
     *
     * @ibatorgenerated Sun Jun 09 16:47:42 CST 2013
     */
    int deleteByPrimaryKey(Long messageid) throws SQLException;

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_MESSAGE_CONTENT
     *
     * @ibatorgenerated Sun Jun 09 16:47:42 CST 2013
     */
    void insert(IrpMessageContent record) throws SQLException;

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_MESSAGE_CONTENT
     *
     * @ibatorgenerated Sun Jun 09 16:47:42 CST 2013
     */
    void insertSelective(IrpMessageContent record) throws SQLException;

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_MESSAGE_CONTENT
     *
     * @ibatorgenerated Sun Jun 09 16:47:42 CST 2013
     */
    List<IrpMessageContent> selectByExample(IrpMessageContentExample example) throws SQLException;

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_MESSAGE_CONTENT
     *
     * @ibatorgenerated Sun Jun 09 16:47:42 CST 2013
     */
    IrpMessageContent selectByPrimaryKey(Long messageid) throws SQLException;

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_MESSAGE_CONTENT
     *
     * @ibatorgenerated Sun Jun 09 16:47:42 CST 2013
     */
    int updateByExampleSelective(IrpMessageContent record, IrpMessageContentExample example) throws SQLException;

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_MESSAGE_CONTENT
     *
     * @ibatorgenerated Sun Jun 09 16:47:42 CST 2013
     */
    int updateByExample(IrpMessageContent record, IrpMessageContentExample example) throws SQLException;

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_MESSAGE_CONTENT
     *
     * @ibatorgenerated Sun Jun 09 16:47:42 CST 2013
     */
    int updateByPrimaryKeySelective(IrpMessageContent record) throws SQLException;

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_MESSAGE_CONTENT
     *
     * @ibatorgenerated Sun Jun 09 16:47:42 CST 2013
     */
    int updateByPrimaryKey(IrpMessageContent record) throws SQLException;
    
	/**
	 * 分页
	 * @return
	 */
	  public List<IrpMessageContent> selectByExample(IrpMessageContentExample example,PageUtil pageUtil) throws SQLException;
	/**
	 * 分组查询用户id
	 * @return
	 */
	  public List selectGroupByUserid(Long fromUid,Integer isdel,Long crisdel,PageUtil pageUtil);
	  /**
	   *  分组查询用户id(数量)
	   * @param _loginid
	   * @param _isdel
	   * @return
	   */
	  public int selectGroupByUseridCount(Long fromUid,Integer isdel,Long crisdel);
	  
	  /**
	   * 查看某个对话的内�?
	   * @param _cruserid
	   * @param _isdel
	   * @param fromUid
	   * @return
	   */
	  public List selectDetailMessage(Long _cruserid,Integer _isdel,Long fromUid,Long _crisdel,PageUtil pageUtil);
	  public List selectDetailMessage(IrpMessageContentExample example,PageUtil pageUtil);
	  /**
	   * 查看某个对话的内容（数量�?
	   * @param _cruserid
	   * @param _isdel
	   * @param fromUid
	   * @return
	   */
	  public int selectDetailMessageCount(Long _cruserid,Integer _isdel,Long fromUid,Long _crisdel);
	  public int selectDetailMessageCount(IrpMessageContentExample example);
	  
	  /**
	   * 获得私信的id（用于删除一个会话）
	   * @param _cruserid
	   * @param fromUid
	   * @return
	   */
	  public List selectMessageidInCridFrid(Long _cruserid,Long _fromUid);
	  /**
	   * 获得有关我登录的所有的私信id
	   * @return
	   */
	  public List selectMessageidAll(Long _loginid);
	  
	  /**
	   * 获得登录用户还没有查看的私信
	   * @param _fromUid
	   * @param _browsestatus
	   * @return
	   */
	  public int selectUnReadMessage(Map<String, Object> _mParam) throws SQLException;
	  public int selectUnReadMsg(Map<String, Object> _mParam) throws SQLException;
	  /**
	   * 获得登录用户还没有查看的私信(会话时)
	   * @param _fromUid
	   * @param _browsestatus
	   * @param cruserid
	   * @return
	   */
	  public int selectUnReadMessage(long _fromUid,Integer _browsestatus,long _cruserid);
    
    
}