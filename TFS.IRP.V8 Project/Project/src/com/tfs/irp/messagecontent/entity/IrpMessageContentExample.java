package com.tfs.irp.messagecontent.entity;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

public class IrpMessageContentExample {
    /**
     * This field was generated by Apache iBATIS ibator.
     * This field corresponds to the database table IRP_MESSAGE_CONTENT
     *
     * @ibatorgenerated Sun Jun 09 16:47:42 CST 2013
     */
    protected String orderByClause;

    /**
     * This field was generated by Apache iBATIS ibator.
     * This field corresponds to the database table IRP_MESSAGE_CONTENT
     *
     * @ibatorgenerated Sun Jun 09 16:47:42 CST 2013
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_MESSAGE_CONTENT
     *
     * @ibatorgenerated Sun Jun 09 16:47:42 CST 2013
     */
    public IrpMessageContentExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_MESSAGE_CONTENT
     *
     * @ibatorgenerated Sun Jun 09 16:47:42 CST 2013
     */
    protected IrpMessageContentExample(IrpMessageContentExample example) {
        this.orderByClause = example.orderByClause;
        this.oredCriteria = example.oredCriteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_MESSAGE_CONTENT
     *
     * @ibatorgenerated Sun Jun 09 16:47:42 CST 2013
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_MESSAGE_CONTENT
     *
     * @ibatorgenerated Sun Jun 09 16:47:42 CST 2013
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_MESSAGE_CONTENT
     *
     * @ibatorgenerated Sun Jun 09 16:47:42 CST 2013
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_MESSAGE_CONTENT
     *
     * @ibatorgenerated Sun Jun 09 16:47:42 CST 2013
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_MESSAGE_CONTENT
     *
     * @ibatorgenerated Sun Jun 09 16:47:42 CST 2013
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_MESSAGE_CONTENT
     *
     * @ibatorgenerated Sun Jun 09 16:47:42 CST 2013
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_MESSAGE_CONTENT
     *
     * @ibatorgenerated Sun Jun 09 16:47:42 CST 2013
     */
    public void clear() {
        oredCriteria.clear();
    }

    /**
     * This class was generated by Apache iBATIS ibator.
     * This class corresponds to the database table IRP_MESSAGE_CONTENT
     *
     * @ibatorgenerated Sun Jun 09 16:47:42 CST 2013
     */
    public static class Criteria {
        protected List<String> criteriaWithoutValue;

        protected List<Map<String, Object>> criteriaWithSingleValue;

        protected List<Map<String, Object>> criteriaWithListValue;

        protected List<Map<String, Object>> criteriaWithBetweenValue;

        protected Criteria() {
            super();
            criteriaWithoutValue = new ArrayList<String>();
            criteriaWithSingleValue = new ArrayList<Map<String, Object>>();
            criteriaWithListValue = new ArrayList<Map<String, Object>>();
            criteriaWithBetweenValue = new ArrayList<Map<String, Object>>();
        }

        public boolean isValid() {
            return criteriaWithoutValue.size() > 0
                || criteriaWithSingleValue.size() > 0
                || criteriaWithListValue.size() > 0
                || criteriaWithBetweenValue.size() > 0;
        }

        public List<String> getCriteriaWithoutValue() {
            return criteriaWithoutValue;
        }

        public List<Map<String, Object>> getCriteriaWithSingleValue() {
            return criteriaWithSingleValue;
        }

        public List<Map<String, Object>> getCriteriaWithListValue() {
            return criteriaWithListValue;
        }

        public List<Map<String, Object>> getCriteriaWithBetweenValue() {
            return criteriaWithBetweenValue;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteriaWithoutValue.add(condition);
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("condition", condition);
            map.put("value", value);
            criteriaWithSingleValue.add(map);
        }

        protected void addCriterion(String condition, List<? extends Object> values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("condition", condition);
            map.put("values", values);
            criteriaWithListValue.add(map);
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            List<Object> list = new ArrayList<Object>();
            list.add(value1);
            list.add(value2);
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("condition", condition);
            map.put("values", list);
            criteriaWithBetweenValue.add(map);
        }

        protected void addCriterionForJDBCDate(String condition, Date value, String property) {
            addCriterion(condition, new java.sql.Date(value.getTime()), property);
        }

        protected void addCriterionForJDBCDate(String condition, List<Date> values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            List<java.sql.Date> dateList = new ArrayList<java.sql.Date>();
            Iterator<Date> iter = values.iterator();
            while (iter.hasNext()) {
                dateList.add(new java.sql.Date(iter.next().getTime()));
            }
            addCriterion(condition, dateList, property);
        }

        protected void addCriterionForJDBCDate(String condition, Date value1, Date value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            addCriterion(condition, new java.sql.Date(value1.getTime()), new java.sql.Date(value2.getTime()), property);
        }

        public Criteria andMessageidIsNull() {
            addCriterion("MESSAGEID is null");
            return this;
        }

        public Criteria andMessageidIsNotNull() {
            addCriterion("MESSAGEID is not null");
            return this;
        }

        public Criteria andMessageidEqualTo(Long value) {
            addCriterion("MESSAGEID =", value, "messageid");
            return this;
        }

        public Criteria andMessageidNotEqualTo(Long value) {
            addCriterion("MESSAGEID <>", value, "messageid");
            return this;
        }

        public Criteria andMessageidGreaterThan(Long value) {
            addCriterion("MESSAGEID >", value, "messageid");
            return this;
        }

        public Criteria andMessageidGreaterThanOrEqualTo(Long value) {
            addCriterion("MESSAGEID >=", value, "messageid");
            return this;
        }

        public Criteria andMessageidLessThan(Long value) {
            addCriterion("MESSAGEID <", value, "messageid");
            return this;
        }

        public Criteria andMessageidLessThanOrEqualTo(Long value) {
            addCriterion("MESSAGEID <=", value, "messageid");
            return this;
        }

        public Criteria andMessageidIn(List<Long> values) {
            addCriterion("MESSAGEID in", values, "messageid");
            return this;
        }

        public Criteria andMessageidNotIn(List<Long> values) {
            addCriterion("MESSAGEID not in", values, "messageid");
            return this;
        }

        public Criteria andMessageidBetween(Long value1, Long value2) {
            addCriterion("MESSAGEID between", value1, value2, "messageid");
            return this;
        }

        public Criteria andMessageidNotBetween(Long value1, Long value2) {
            addCriterion("MESSAGEID not between", value1, value2, "messageid");
            return this;
        }

        public Criteria andFromUidIsNull() {
            addCriterion("FROM_UID is null");
            return this;
        }

        public Criteria andFromUidIsNotNull() {
            addCriterion("FROM_UID is not null");
            return this;
        }

        public Criteria andFromUidEqualTo(Long value) {
            addCriterion("FROM_UID =", value, "fromUid");
            return this;
        }

        public Criteria andFromUidNotEqualTo(Long value) {
            addCriterion("FROM_UID <>", value, "fromUid");
            return this;
        }

        public Criteria andFromUidGreaterThan(Long value) {
            addCriterion("FROM_UID >", value, "fromUid");
            return this;
        }

        public Criteria andFromUidGreaterThanOrEqualTo(Long value) {
            addCriterion("FROM_UID >=", value, "fromUid");
            return this;
        }

        public Criteria andFromUidLessThan(Long value) {
            addCriterion("FROM_UID <", value, "fromUid");
            return this;
        }

        public Criteria andFromUidLessThanOrEqualTo(Long value) {
            addCriterion("FROM_UID <=", value, "fromUid");
            return this;
        }

        public Criteria andFromUidIn(List<Long> values) {
            addCriterion("FROM_UID in", values, "fromUid");
            return this;
        }

        public Criteria andFromUidNotIn(List<Long> values) {
            addCriterion("FROM_UID not in", values, "fromUid");
            return this;
        }

        public Criteria andFromUidBetween(Long value1, Long value2) {
            addCriterion("FROM_UID between", value1, value2, "fromUid");
            return this;
        }

        public Criteria andFromUidNotBetween(Long value1, Long value2) {
            addCriterion("FROM_UID not between", value1, value2, "fromUid");
            return this;
        }

        public Criteria andContentIsNull() {
            addCriterion("CONTENT is null");
            return this;
        }

        public Criteria andContentIsNotNull() {
            addCriterion("CONTENT is not null");
            return this;
        }

        public Criteria andContentEqualTo(String value) {
            addCriterion("CONTENT =", value, "content");
            return this;
        }

        public Criteria andContentNotEqualTo(String value) {
            addCriterion("CONTENT <>", value, "content");
            return this;
        }

        public Criteria andContentGreaterThan(String value) {
            addCriterion("CONTENT >", value, "content");
            return this;
        }

        public Criteria andContentGreaterThanOrEqualTo(String value) {
            addCriterion("CONTENT >=", value, "content");
            return this;
        }

        public Criteria andContentLessThan(String value) {
            addCriterion("CONTENT <", value, "content");
            return this;
        }

        public Criteria andContentLessThanOrEqualTo(String value) {
            addCriterion("CONTENT <=", value, "content");
            return this;
        }

        public Criteria andContentLike(String value) {
            addCriterion("CONTENT like", value, "content");
            return this;
        }

        public Criteria andContentNotLike(String value) {
            addCriterion("CONTENT not like", value, "content");
            return this;
        }

        public Criteria andContentIn(List<String> values) {
            addCriterion("CONTENT in", values, "content");
            return this;
        }

        public Criteria andContentNotIn(List<String> values) {
            addCriterion("CONTENT not in", values, "content");
            return this;
        }

        public Criteria andContentBetween(String value1, String value2) {
            addCriterion("CONTENT between", value1, value2, "content");
            return this;
        }

        public Criteria andContentNotBetween(String value1, String value2) {
            addCriterion("CONTENT not between", value1, value2, "content");
            return this;
        }

        public Criteria andIsdelIsNull() {
            addCriterion("ISDEL is null");
            return this;
        }

        public Criteria andIsdelIsNotNull() {
            addCriterion("ISDEL is not null");
            return this;
        }

        public Criteria andIsdelEqualTo(Integer value) {
            addCriterion("ISDEL =", value, "isdel");
            return this;
        }

        public Criteria andIsdelNotEqualTo(Integer value) {
            addCriterion("ISDEL <>", value, "isdel");
            return this;
        }

        public Criteria andIsdelGreaterThan(Integer value) {
            addCriterion("ISDEL >", value, "isdel");
            return this;
        }

        public Criteria andIsdelGreaterThanOrEqualTo(Integer value) {
            addCriterion("ISDEL >=", value, "isdel");
            return this;
        }

        public Criteria andIsdelLessThan(Integer value) {
            addCriterion("ISDEL <", value, "isdel");
            return this;
        }

        public Criteria andIsdelLessThanOrEqualTo(Integer value) {
            addCriterion("ISDEL <=", value, "isdel");
            return this;
        }

        public Criteria andIsdelIn(List<Integer> values) {
            addCriterion("ISDEL in", values, "isdel");
            return this;
        }

        public Criteria andIsdelNotIn(List<Integer> values) {
            addCriterion("ISDEL not in", values, "isdel");
            return this;
        }

        public Criteria andIsdelBetween(Integer value1, Integer value2) {
            addCriterion("ISDEL between", value1, value2, "isdel");
            return this;
        }

        public Criteria andIsdelNotBetween(Integer value1, Integer value2) {
            addCriterion("ISDEL not between", value1, value2, "isdel");
            return this;
        }

        public Criteria andCrtimeIsNull() {
            addCriterion("CRTIME is null");
            return this;
        }

        public Criteria andCrtimeIsNotNull() {
            addCriterion("CRTIME is not null");
            return this;
        }

        public Criteria andCrtimeEqualTo(Date value) {
            addCriterionForJDBCDate("CRTIME =", value, "crtime");
            return this;
        }

        public Criteria andCrtimeNotEqualTo(Date value) {
            addCriterionForJDBCDate("CRTIME <>", value, "crtime");
            return this;
        }

        public Criteria andCrtimeGreaterThan(Date value) {
            addCriterionForJDBCDate("CRTIME >", value, "crtime");
            return this;
        }

        public Criteria andCrtimeGreaterThanOrEqualTo(Date value) {
            addCriterionForJDBCDate("CRTIME >=", value, "crtime");
            return this;
        }

        public Criteria andCrtimeLessThan(Date value) {
            addCriterionForJDBCDate("CRTIME <", value, "crtime");
            return this;
        }

        public Criteria andCrtimeLessThanOrEqualTo(Date value) {
            addCriterionForJDBCDate("CRTIME <=", value, "crtime");
            return this;
        }

        public Criteria andCrtimeIn(List<Date> values) {
            addCriterionForJDBCDate("CRTIME in", values, "crtime");
            return this;
        }

        public Criteria andCrtimeNotIn(List<Date> values) {
            addCriterionForJDBCDate("CRTIME not in", values, "crtime");
            return this;
        }

        public Criteria andCrtimeBetween(Date value1, Date value2) {
            addCriterionForJDBCDate("CRTIME between", value1, value2, "crtime");
            return this;
        }

        public Criteria andCrtimeNotBetween(Date value1, Date value2) {
            addCriterionForJDBCDate("CRTIME not between", value1, value2, "crtime");
            return this;
        }

        public Criteria andCruseridIsNull() {
            addCriterion("CRUSERID is null");
            return this;
        }

        public Criteria andCruseridIsNotNull() {
            addCriterion("CRUSERID is not null");
            return this;
        }

        public Criteria andCruseridEqualTo(Long value) {
            addCriterion("CRUSERID =", value, "cruserid");
            return this;
        }

        public Criteria andCruseridNotEqualTo(Long value) {
            addCriterion("CRUSERID <>", value, "cruserid");
            return this;
        }

        public Criteria andCruseridGreaterThan(Long value) {
            addCriterion("CRUSERID >", value, "cruserid");
            return this;
        }

        public Criteria andCruseridGreaterThanOrEqualTo(Long value) {
            addCriterion("CRUSERID >=", value, "cruserid");
            return this;
        }

        public Criteria andCruseridLessThan(Long value) {
            addCriterion("CRUSERID <", value, "cruserid");
            return this;
        }

        public Criteria andCruseridLessThanOrEqualTo(Long value) {
            addCriterion("CRUSERID <=", value, "cruserid");
            return this;
        }

        public Criteria andCruseridIn(List<Long> values) {
            addCriterion("CRUSERID in", values, "cruserid");
            return this;
        }

        public Criteria andCruseridNotIn(List<Long> values) {
            addCriterion("CRUSERID not in", values, "cruserid");
            return this;
        }

        public Criteria andCruseridBetween(Long value1, Long value2) {
            addCriterion("CRUSERID between", value1, value2, "cruserid");
            return this;
        }

        public Criteria andCruseridNotBetween(Long value1, Long value2) {
            addCriterion("CRUSERID not between", value1, value2, "cruserid");
            return this;
        }

        public Criteria andCrisdelIsNull() {
            addCriterion("CRISDEL is null");
            return this;
        }

        public Criteria andCrisdelIsNotNull() {
            addCriterion("CRISDEL is not null");
            return this;
        }

        public Criteria andCrisdelEqualTo(Long value) {
            addCriterion("CRISDEL =", value, "crisdel");
            return this;
        }

        public Criteria andCrisdelNotEqualTo(Long value) {
            addCriterion("CRISDEL <>", value, "crisdel");
            return this;
        }

        public Criteria andCrisdelGreaterThan(Long value) {
            addCriterion("CRISDEL >", value, "crisdel");
            return this;
        }

        public Criteria andCrisdelGreaterThanOrEqualTo(Long value) {
            addCriterion("CRISDEL >=", value, "crisdel");
            return this;
        }

        public Criteria andCrisdelLessThan(Long value) {
            addCriterion("CRISDEL <", value, "crisdel");
            return this;
        }

        public Criteria andCrisdelLessThanOrEqualTo(Long value) {
            addCriterion("CRISDEL <=", value, "crisdel");
            return this;
        }

        public Criteria andCrisdelIn(List<Long> values) {
            addCriterion("CRISDEL in", values, "crisdel");
            return this;
        }

        public Criteria andCrisdelNotIn(List<Long> values) {
            addCriterion("CRISDEL not in", values, "crisdel");
            return this;
        }

        public Criteria andCrisdelBetween(Long value1, Long value2) {
            addCriterion("CRISDEL between", value1, value2, "crisdel");
            return this;
        }

        public Criteria andCrisdelNotBetween(Long value1, Long value2) {
            addCriterion("CRISDEL not between", value1, value2, "crisdel");
            return this;
        }

        public Criteria andBrowsestatusIsNull() {
            addCriterion("BROWSESTATUS is null");
            return this;
        }

        public Criteria andBrowsestatusIsNotNull() {
            addCriterion("BROWSESTATUS is not null");
            return this;
        }

        public Criteria andBrowsestatusEqualTo(Integer value) {
            addCriterion("BROWSESTATUS =", value, "browsestatus");
            return this;
        }

        public Criteria andBrowsestatusNotEqualTo(Integer value) {
            addCriterion("BROWSESTATUS <>", value, "browsestatus");
            return this;
        }

        public Criteria andBrowsestatusGreaterThan(Integer value) {
            addCriterion("BROWSESTATUS >", value, "browsestatus");
            return this;
        }

        public Criteria andBrowsestatusGreaterThanOrEqualTo(Integer value) {
            addCriterion("BROWSESTATUS >=", value, "browsestatus");
            return this;
        }

        public Criteria andBrowsestatusLessThan(Integer value) {
            addCriterion("BROWSESTATUS <", value, "browsestatus");
            return this;
        }

        public Criteria andBrowsestatusLessThanOrEqualTo(Integer value) {
            addCriterion("BROWSESTATUS <=", value, "browsestatus");
            return this;
        }

        public Criteria andBrowsestatusIn(List<Integer> values) {
            addCriterion("BROWSESTATUS in", values, "browsestatus");
            return this;
        }

        public Criteria andBrowsestatusNotIn(List<Integer> values) {
            addCriterion("BROWSESTATUS not in", values, "browsestatus");
            return this;
        }

        public Criteria andBrowsestatusBetween(Integer value1, Integer value2) {
            addCriterion("BROWSESTATUS between", value1, value2, "browsestatus");
            return this;
        }

        public Criteria andBrowsestatusNotBetween(Integer value1, Integer value2) {
            addCriterion("BROWSESTATUS not between", value1, value2, "browsestatus");
            return this;
        }
        public Criteria andMessagetypeIsNull() {
            addCriterion("MESSAGETYPE is null");
            return this;
        }

        public Criteria andMessagetypeIsNotNull() {
            addCriterion("MESSAGETYPE is not null");
            return this;
        }

        public Criteria andMessagetypeEqualTo(Integer value) {
            addCriterion("MESSAGETYPE =", value, "messagetype");
            return this;
        }

        public Criteria andMessagetypeNotEqualTo(Integer value) {
            addCriterion("MESSAGETYPE <>", value, "messagetype");
            return this;
        }

        public Criteria andMessagetypeGreaterThan(Integer value) {
            addCriterion("MESSAGETYPE >", value, "messagetype");
            return this;
        }

        public Criteria andMessagetypeGreaterThanOrEqualTo(Integer value) {
            addCriterion("MESSAGETYPE >=", value, "messagetype");
            return this;
        }

        public Criteria andMessagetypeLessThan(Integer value) {
            addCriterion("MESSAGETYPE <", value, "messagetype");
            return this;
        }

        public Criteria andMessagetypeLessThanOrEqualTo(Integer value) {
            addCriterion("MESSAGETYPE <=", value, "messagetype");
            return this;
        }

        public Criteria andMessagetypeIn(List<Integer> values) {
            addCriterion("MESSAGETYPE in", values, "messagetype");
            return this;
        }

        public Criteria andMessagetypeNotIn(List<Integer> values) {
            addCriterion("MESSAGETYPE not in", values, "messagetype");
            return this;
        }

        public Criteria andMessagetypeBetween(Integer value1, Integer value2) {
            addCriterion("MESSAGETYPE between", value1, value2, "messagetype");
            return this;
        }

        public Criteria andMessagetypeNotBetween(Integer value1, Integer value2) {
            addCriterion("MESSAGETYPE not between", value1, value2, "messagetype");
            return this;
        }
    }
}