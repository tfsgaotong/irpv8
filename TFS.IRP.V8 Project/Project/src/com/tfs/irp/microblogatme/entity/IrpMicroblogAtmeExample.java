package com.tfs.irp.microblogatme.entity;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Date;
import java.util.Iterator;

import com.tfs.irp.microblogcomment.entity.IrpMicroblogCommentExample.Criteria;

public class IrpMicroblogAtmeExample {

	/**
	 * This field was generated by Apache iBATIS ibator. This field corresponds to the database table IRP_MICROBLOG_ATME
	 * @ibatorgenerated  Wed May 15 15:53:49 CST 2013
	 */
	protected String orderByClause;
	/**
	 * This field was generated by Apache iBATIS ibator. This field corresponds to the database table IRP_MICROBLOG_ATME
	 * @ibatorgenerated  Wed May 15 15:53:49 CST 2013
	 */
	protected List<Criteria> oredCriteria;

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table IRP_MICROBLOG_ATME
	 * @ibatorgenerated  Wed May 15 15:53:49 CST 2013
	 */
	public IrpMicroblogAtmeExample() {
		oredCriteria = new ArrayList<Criteria>();
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table IRP_MICROBLOG_ATME
	 * @ibatorgenerated  Wed May 15 15:53:49 CST 2013
	 */
	protected IrpMicroblogAtmeExample(IrpMicroblogAtmeExample example) {
		this.orderByClause = example.orderByClause;
		this.oredCriteria = example.oredCriteria;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table IRP_MICROBLOG_ATME
	 * @ibatorgenerated  Wed May 15 15:53:49 CST 2013
	 */
	public void setOrderByClause(String orderByClause) {
		this.orderByClause = orderByClause;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table IRP_MICROBLOG_ATME
	 * @ibatorgenerated  Wed May 15 15:53:49 CST 2013
	 */
	public String getOrderByClause() {
		return orderByClause;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table IRP_MICROBLOG_ATME
	 * @ibatorgenerated  Wed May 15 15:53:49 CST 2013
	 */
	public List<Criteria> getOredCriteria() {
		return oredCriteria;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table IRP_MICROBLOG_ATME
	 * @ibatorgenerated  Wed May 15 15:53:49 CST 2013
	 */
	public void or(Criteria criteria) {
		oredCriteria.add(criteria);
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table IRP_MICROBLOG_ATME
	 * @ibatorgenerated  Wed May 15 15:53:49 CST 2013
	 */
	public Criteria createCriteria() {
		Criteria criteria = createCriteriaInternal();
		if (oredCriteria.size() == 0) {
			oredCriteria.add(criteria);
		}
		return criteria;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table IRP_MICROBLOG_ATME
	 * @ibatorgenerated  Wed May 15 15:53:49 CST 2013
	 */
	protected Criteria createCriteriaInternal() {
		Criteria criteria = new Criteria();
		return criteria;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table IRP_MICROBLOG_ATME
	 * @ibatorgenerated  Wed May 15 15:53:49 CST 2013
	 */
	public void clear() {
		oredCriteria.clear();
	}

	/**
	 * This class was generated by Apache iBATIS ibator. This class corresponds to the database table IRP_MICROBLOG_ATME
	 * @ibatorgenerated  Wed May 15 15:53:49 CST 2013
	 */
	public static class Criteria {
		protected List<String> criteriaWithoutValue;
		protected List<Map<String, Object>> criteriaWithSingleValue;
		protected List<Map<String, Object>> criteriaWithListValue;
		protected List<Map<String, Object>> criteriaWithBetweenValue;

		protected Criteria() {
			super();
			criteriaWithoutValue = new ArrayList<String>();
			criteriaWithSingleValue = new ArrayList<Map<String, Object>>();
			criteriaWithListValue = new ArrayList<Map<String, Object>>();
			criteriaWithBetweenValue = new ArrayList<Map<String, Object>>();
		}

		public boolean isValid() {
			return criteriaWithoutValue.size() > 0
					|| criteriaWithSingleValue.size() > 0
					|| criteriaWithListValue.size() > 0
					|| criteriaWithBetweenValue.size() > 0;
		}

		public List<String> getCriteriaWithoutValue() {
			return criteriaWithoutValue;
		}

		public List<Map<String, Object>> getCriteriaWithSingleValue() {
			return criteriaWithSingleValue;
		}

		public List<Map<String, Object>> getCriteriaWithListValue() {
			return criteriaWithListValue;
		}

		public List<Map<String, Object>> getCriteriaWithBetweenValue() {
			return criteriaWithBetweenValue;
		}

		protected void addCriterion(String condition) {
			if (condition == null) {
				throw new RuntimeException("Value for condition cannot be null");
			}
			criteriaWithoutValue.add(condition);
		}

		protected void addCriterion(String condition, Object value,
				String property) {
			if (value == null) {
				throw new RuntimeException("Value for " + property
						+ " cannot be null");
			}
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("condition", condition);
			map.put("value", value);
			criteriaWithSingleValue.add(map);
		}

		protected void addCriterion(String condition,
				List<? extends Object> values, String property) {
			if (values == null || values.size() == 0) {
				throw new RuntimeException("Value list for " + property
						+ " cannot be null or empty");
			}
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("condition", condition);
			map.put("values", values);
			criteriaWithListValue.add(map);
		}

		protected void addCriterion(String condition, Object value1,
				Object value2, String property) {
			if (value1 == null || value2 == null) {
				throw new RuntimeException("Between values for " + property
						+ " cannot be null");
			}
			List<Object> list = new ArrayList<Object>();
			list.add(value1);
			list.add(value2);
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("condition", condition);
			map.put("values", list);
			criteriaWithBetweenValue.add(map);
		}

		protected void addCriterionForJDBCDate(String condition, Date value,
				String property) {
			addCriterion(condition, new java.sql.Date(value.getTime()),
					property);
		}

		protected void addCriterionForJDBCDate(String condition,
				List<Date> values, String property) {
			if (values == null || values.size() == 0) {
				throw new RuntimeException("Value list for " + property
						+ " cannot be null or empty");
			}
			List<java.sql.Date> dateList = new ArrayList<java.sql.Date>();
			Iterator<Date> iter = values.iterator();
			while (iter.hasNext()) {
				dateList.add(new java.sql.Date(iter.next().getTime()));
			}
			addCriterion(condition, dateList, property);
		}

		protected void addCriterionForJDBCDate(String condition, Date value1,
				Date value2, String property) {
			if (value1 == null || value2 == null) {
				throw new RuntimeException("Between values for " + property
						+ " cannot be null");
			}
			addCriterion(condition, new java.sql.Date(value1.getTime()),
					new java.sql.Date(value2.getTime()), property);
		}

		public Criteria andAtmeidIsNull() {
			addCriterion("ATMEID is null");
			return this;
		}

		public Criteria andAtmeidIsNotNull() {
			addCriterion("ATMEID is not null");
			return this;
		}

		public Criteria andAtmeidEqualTo(Long value) {
			addCriterion("ATMEID =", value, "atmeid");
			return this;
		}

		public Criteria andAtmeidNotEqualTo(Long value) {
			addCriterion("ATMEID <>", value, "atmeid");
			return this;
		}

		public Criteria andAtmeidGreaterThan(Long value) {
			addCriterion("ATMEID >", value, "atmeid");
			return this;
		}

		public Criteria andAtmeidGreaterThanOrEqualTo(Long value) {
			addCriterion("ATMEID >=", value, "atmeid");
			return this;
		}

		public Criteria andAtmeidLessThan(Long value) {
			addCriterion("ATMEID <", value, "atmeid");
			return this;
		}

		public Criteria andAtmeidLessThanOrEqualTo(Long value) {
			addCriterion("ATMEID <=", value, "atmeid");
			return this;
		}

		public Criteria andAtmeidIn(List<Long> values) {
			addCriterion("ATMEID in", values, "atmeid");
			return this;
		}

		public Criteria andAtmeidNotIn(List<Long> values) {
			addCriterion("ATMEID not in", values, "atmeid");
			return this;
		}

		public Criteria andAtmeidBetween(Long value1, Long value2) {
			addCriterion("ATMEID between", value1, value2, "atmeid");
			return this;
		}

		public Criteria andAtmeidNotBetween(Long value1, Long value2) {
			addCriterion("ATMEID not between", value1, value2, "atmeid");
			return this;
		}

		public Criteria andMicroblogidIsNull() {
			addCriterion("MICROBLOGID is null");
			return this;
		}

		public Criteria andMicroblogidIsNotNull() {
			addCriterion("MICROBLOGID is not null");
			return this;
		}

		public Criteria andMicroblogidEqualTo(Long value) {
			addCriterion("MICROBLOGID =", value, "microblogid");
			return this;
		}

		public Criteria andMicroblogidNotEqualTo(Long value) {
			addCriterion("MICROBLOGID <>", value, "microblogid");
			return this;
		}

		public Criteria andMicroblogidGreaterThan(Long value) {
			addCriterion("MICROBLOGID >", value, "microblogid");
			return this;
		}

		public Criteria andMicroblogidGreaterThanOrEqualTo(Long value) {
			addCriterion("MICROBLOGID >=", value, "microblogid");
			return this;
		}

		public Criteria andMicroblogidLessThan(Long value) {
			addCriterion("MICROBLOGID <", value, "microblogid");
			return this;
		}

		public Criteria andMicroblogidLessThanOrEqualTo(Long value) {
			addCriterion("MICROBLOGID <=", value, "microblogid");
			return this;
		}

		public Criteria andMicroblogidIn(List<Long> values) {
			addCriterion("MICROBLOGID in", values, "microblogid");
			return this;
		}

		public Criteria andMicroblogidNotIn(List<Long> values) {
			addCriterion("MICROBLOGID not in", values, "microblogid");
			return this;
		}

		public Criteria andMicroblogidBetween(Long value1, Long value2) {
			addCriterion("MICROBLOGID between", value1, value2, "microblogid");
			return this;
		}

		public Criteria andMicroblogidNotBetween(Long value1, Long value2) {
			addCriterion("MICROBLOGID not between", value1, value2,
					"microblogid");
			return this;
		}

		public Criteria andUseridIsNull() {
			addCriterion("USERID is null");
			return this;
		}

		public Criteria andUseridIsNotNull() {
			addCriterion("USERID is not null");
			return this;
		}

		public Criteria andUseridEqualTo(Long value) {
			addCriterion("USERID =", value, "userid");
			return this;
		}

		public Criteria andUseridNotEqualTo(Long value) {
			addCriterion("USERID <>", value, "userid");
			return this;
		}

		public Criteria andUseridGreaterThan(Long value) {
			addCriterion("USERID >", value, "userid");
			return this;
		}

		public Criteria andUseridGreaterThanOrEqualTo(Long value) {
			addCriterion("USERID >=", value, "userid");
			return this;
		}

		public Criteria andUseridLessThan(Long value) {
			addCriterion("USERID <", value, "userid");
			return this;
		}

		public Criteria andUseridLessThanOrEqualTo(Long value) {
			addCriterion("USERID <=", value, "userid");
			return this;
		}

		public Criteria andUseridIn(List<Long> values) {
			addCriterion("USERID in", values, "userid");
			return this;
		}

		public Criteria andUseridNotIn(List<Long> values) {
			addCriterion("USERID not in", values, "userid");
			return this;
		}

		public Criteria andUseridBetween(Long value1, Long value2) {
			addCriterion("USERID between", value1, value2, "userid");
			return this;
		}

		public Criteria andUseridNotBetween(Long value1, Long value2) {
			addCriterion("USERID not between", value1, value2, "userid");
			return this;
		}

		public Criteria andCrtimeIsNull() {
			addCriterion("CRTIME is null");
			return this;
		}

		public Criteria andCrtimeIsNotNull() {
			addCriterion("CRTIME is not null");
			return this;
		}

		public Criteria andCrtimeEqualTo(Date value) {
			addCriterionForJDBCDate("CRTIME =", value, "crtime");
			return this;
		}

		public Criteria andCrtimeNotEqualTo(Date value) {
			addCriterionForJDBCDate("CRTIME <>", value, "crtime");
			return this;
		}

		public Criteria andCrtimeGreaterThan(Date value) {
			addCriterionForJDBCDate("CRTIME >", value, "crtime");
			return this;
		}

		public Criteria andCrtimeGreaterThanOrEqualTo(Date value) {
			addCriterionForJDBCDate("CRTIME >=", value, "crtime");
			return this;
		}

		public Criteria andCrtimeLessThan(Date value) {
			addCriterionForJDBCDate("CRTIME <", value, "crtime");
			return this;
		}

		public Criteria andCrtimeLessThanOrEqualTo(Date value) {
			addCriterionForJDBCDate("CRTIME <=", value, "crtime");
			return this;
		}

		public Criteria andCrtimeIn(List<Date> values) {
			addCriterionForJDBCDate("CRTIME in", values, "crtime");
			return this;
		}

		public Criteria andCrtimeNotIn(List<Date> values) {
			addCriterionForJDBCDate("CRTIME not in", values, "crtime");
			return this;
		}

		public Criteria andCrtimeBetween(Date value1, Date value2) {
			addCriterionForJDBCDate("CRTIME between", value1, value2, "crtime");
			return this;
		}

		public Criteria andCrtimeNotBetween(Date value1, Date value2) {
			addCriterionForJDBCDate("CRTIME not between", value1, value2,
					"crtime");
			return this;
		}
		public Criteria andBrowsestatusIsNull() {
            addCriterion("BROWSESTATUS is null");
            return this;
        }

        public Criteria andBrowsestatusIsNotNull() {
            addCriterion("BROWSESTATUS is not null");
            return this;
        }

        public Criteria andBrowsestatusEqualTo(Integer value) {
            addCriterion("BROWSESTATUS =", value, "browsestatus");
            return this;
        }

        public Criteria andBrowsestatusNotEqualTo(Integer value) {
            addCriterion("BROWSESTATUS <>", value, "browsestatus");
            return this;
        }

        public Criteria andBrowsestatusGreaterThan(Integer value) {
            addCriterion("BROWSESTATUS >", value, "browsestatus");
            return this;
        }

        public Criteria andBrowsestatusGreaterThanOrEqualTo(Integer value) {
            addCriterion("BROWSESTATUS >=", value, "browsestatus");
            return this;
        }

        public Criteria andBrowsestatusLessThan(Integer value) {
            addCriterion("BROWSESTATUS <", value, "browsestatus");
            return this;
        }

        public Criteria andBrowsestatusLessThanOrEqualTo(Integer value) {
            addCriterion("BROWSESTATUS <=", value, "browsestatus");
            return this;
        }

        public Criteria andBrowsestatusIn(List<Integer> values) {
            addCriterion("BROWSESTATUS in", values, "browsestatus");
            return this;
        }

        public Criteria andBrowsestatusNotIn(List<Integer> values) {
            addCriterion("BROWSESTATUS not in", values, "browsestatus");
            return this;
        }

        public Criteria andBrowsestatusBetween(Integer value1, Integer value2) {
            addCriterion("BROWSESTATUS between", value1, value2, "browsestatus");
            return this;
        }

        public Criteria andBrowsestatusNotBetween(Integer value1, Integer value2) {
            addCriterion("BROWSESTATUS not between", value1, value2, "browsestatus");
            return this;
        }
	}
}