package com.tfs.irp.microblogfocus.entity;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class IrpMicroblogFocusExample {
    /**
     * This field was generated by Apache iBATIS ibator.
     * This field corresponds to the database table IRP_MICROBLOG_FOCUS
     *
     * @ibatorgenerated Tue Apr 23 13:22:19 CST 2013
     */
    protected String orderByClause;

    /**
     * This field was generated by Apache iBATIS ibator.
     * This field corresponds to the database table IRP_MICROBLOG_FOCUS
     *
     * @ibatorgenerated Tue Apr 23 13:22:19 CST 2013
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_MICROBLOG_FOCUS
     *
     * @ibatorgenerated Tue Apr 23 13:22:19 CST 2013
     */
    public IrpMicroblogFocusExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_MICROBLOG_FOCUS
     *
     * @ibatorgenerated Tue Apr 23 13:22:19 CST 2013
     */
    protected IrpMicroblogFocusExample(IrpMicroblogFocusExample example) {
        this.orderByClause = example.orderByClause;
        this.oredCriteria = example.oredCriteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_MICROBLOG_FOCUS
     *
     * @ibatorgenerated Tue Apr 23 13:22:19 CST 2013
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_MICROBLOG_FOCUS
     *
     * @ibatorgenerated Tue Apr 23 13:22:19 CST 2013
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_MICROBLOG_FOCUS
     *
     * @ibatorgenerated Tue Apr 23 13:22:19 CST 2013
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_MICROBLOG_FOCUS
     *
     * @ibatorgenerated Tue Apr 23 13:22:19 CST 2013
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_MICROBLOG_FOCUS
     *
     * @ibatorgenerated Tue Apr 23 13:22:19 CST 2013
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_MICROBLOG_FOCUS
     *
     * @ibatorgenerated Tue Apr 23 13:22:19 CST 2013
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_MICROBLOG_FOCUS
     *
     * @ibatorgenerated Tue Apr 23 13:22:19 CST 2013
     */
    public void clear() {
        oredCriteria.clear();
    }

    /**
     * This class was generated by Apache iBATIS ibator.
     * This class corresponds to the database table IRP_MICROBLOG_FOCUS
     *
     * @ibatorgenerated Tue Apr 23 13:22:19 CST 2013
     */
    public static class Criteria {
        protected List<String> criteriaWithoutValue;

        protected List<Map<String, Object>> criteriaWithSingleValue;

        protected List<Map<String, Object>> criteriaWithListValue;

        protected List<Map<String, Object>> criteriaWithBetweenValue;

        protected Criteria() {
            super();
            criteriaWithoutValue = new ArrayList<String>();
            criteriaWithSingleValue = new ArrayList<Map<String, Object>>();
            criteriaWithListValue = new ArrayList<Map<String, Object>>();
            criteriaWithBetweenValue = new ArrayList<Map<String, Object>>();
        }

        public boolean isValid() {
            return criteriaWithoutValue.size() > 0
                || criteriaWithSingleValue.size() > 0
                || criteriaWithListValue.size() > 0
                || criteriaWithBetweenValue.size() > 0;
        }

        public List<String> getCriteriaWithoutValue() {
            return criteriaWithoutValue;
        }

        public List<Map<String, Object>> getCriteriaWithSingleValue() {
            return criteriaWithSingleValue;
        }

        public List<Map<String, Object>> getCriteriaWithListValue() {
            return criteriaWithListValue;
        }

        public List<Map<String, Object>> getCriteriaWithBetweenValue() {
            return criteriaWithBetweenValue;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteriaWithoutValue.add(condition);
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("condition", condition);
            map.put("value", value);
            criteriaWithSingleValue.add(map);
        }

        protected void addCriterion(String condition, List<? extends Object> values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("condition", condition);
            map.put("values", values);
            criteriaWithListValue.add(map);
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            List<Object> list = new ArrayList<Object>();
            list.add(value1);
            list.add(value2);
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("condition", condition);
            map.put("values", list);
            criteriaWithBetweenValue.add(map);
        }

        public Criteria andFocusidIsNull() {
            addCriterion("FOCUSID is null");
            return this;
        }

        public Criteria andFocusidIsNotNull() {
            addCriterion("FOCUSID is not null");
            return this;
        }

        public Criteria andFocusidEqualTo(Long value) {
            addCriterion("FOCUSID =", value, "focusid");
            return this;
        }

        public Criteria andFocusidNotEqualTo(Long value) {
            addCriterion("FOCUSID <>", value, "focusid");
            return this;
        }

        public Criteria andFocusidGreaterThan(Long value) {
            addCriterion("FOCUSID >", value, "focusid");
            return this;
        }

        public Criteria andFocusidGreaterThanOrEqualTo(Long value) {
            addCriterion("FOCUSID >=", value, "focusid");
            return this;
        }

        public Criteria andFocusidLessThan(Long value) {
            addCriterion("FOCUSID <", value, "focusid");
            return this;
        }

        public Criteria andFocusidLessThanOrEqualTo(Long value) {
            addCriterion("FOCUSID <=", value, "focusid");
            return this;
        }

        public Criteria andFocusidIn(List<Long> values) {
            addCriterion("FOCUSID in", values, "focusid");
            return this;
        }

        public Criteria andFocusidNotIn(List<Long> values) {
            addCriterion("FOCUSID not in", values, "focusid");
            return this;
        }

        public Criteria andFocusidBetween(Long value1, Long value2) {
            addCriterion("FOCUSID between", value1, value2, "focusid");
            return this;
        }

        public Criteria andFocusidNotBetween(Long value1, Long value2) {
            addCriterion("FOCUSID not between", value1, value2, "focusid");
            return this;
        }

        public Criteria andUseridIsNull() {
            addCriterion("USERID is null");
            return this;
        }

        public Criteria andUseridIsNotNull() {
            addCriterion("USERID is not null");
            return this;
        }

        public Criteria andUseridEqualTo(Long value) {
            addCriterion("USERID =", value, "userid");
            return this;
        }

        public Criteria andUseridNotEqualTo(Long value) {
            addCriterion("USERID <>", value, "userid");
            return this;
        }

        public Criteria andUseridGreaterThan(Long value) {
            addCriterion("USERID >", value, "userid");
            return this;
        }

        public Criteria andUseridGreaterThanOrEqualTo(Long value) {
            addCriterion("USERID >=", value, "userid");
            return this;
        }

        public Criteria andUseridLessThan(Long value) {
            addCriterion("USERID <", value, "userid");
            return this;
        }

        public Criteria andUseridLessThanOrEqualTo(Long value) {
            addCriterion("USERID <=", value, "userid");
            return this;
        }

        public Criteria andUseridIn(List<Long> values) {
            addCriterion("USERID in", values, "userid");
            return this;
        }

        public Criteria andUseridNotIn(List<Long> values) {
            addCriterion("USERID not in", values, "userid");
            return this;
        }

        public Criteria andUseridBetween(Long value1, Long value2) {
            addCriterion("USERID between", value1, value2, "userid");
            return this;
        }

        public Criteria andUseridNotBetween(Long value1, Long value2) {
            addCriterion("USERID not between", value1, value2, "userid");
            return this;
        }

        public Criteria andFocususeridIsNull() {
            addCriterion("FOCUSUSERID is null");
            return this;
        }

        public Criteria andFocususeridIsNotNull() {
            addCriterion("FOCUSUSERID is not null");
            return this;
        }

        public Criteria andFocususeridEqualTo(Long value) {
            addCriterion("FOCUSUSERID =", value, "focususerid");
            return this;
        }

        public Criteria andFocususeridNotEqualTo(Long value) {
            addCriterion("FOCUSUSERID <>", value, "focususerid");
            return this;
        }

        public Criteria andFocususeridGreaterThan(Long value) {
            addCriterion("FOCUSUSERID >", value, "focususerid");
            return this;
        }

        public Criteria andFocususeridGreaterThanOrEqualTo(Long value) {
            addCriterion("FOCUSUSERID >=", value, "focususerid");
            return this;
        }

        public Criteria andFocususeridLessThan(Long value) {
            addCriterion("FOCUSUSERID <", value, "focususerid");
            return this;
        }

        public Criteria andFocususeridLessThanOrEqualTo(Long value) {
            addCriterion("FOCUSUSERID <=", value, "focususerid");
            return this;
        }

        public Criteria andFocususeridIn(List<Long> values) {
            addCriterion("FOCUSUSERID in", values, "focususerid");
            return this;
        }

        public Criteria andFocususeridNotIn(List<Long> values) {
            addCriterion("FOCUSUSERID not in", values, "focususerid");
            return this;
        }

        public Criteria andFocususeridBetween(Long value1, Long value2) {
            addCriterion("FOCUSUSERID between", value1, value2, "focususerid");
            return this;
        }

        public Criteria andFocususeridNotBetween(Long value1, Long value2) {
            addCriterion("FOCUSUSERID not between", value1, value2, "focususerid");
            return this;
        }

        public Criteria andTypeIsNull() {
            addCriterion("TYPE is null");
            return this;
        }

        public Criteria andTypeIsNotNull() {
            addCriterion("TYPE is not null");
            return this;
        }

        public Criteria andTypeEqualTo(Integer value) {
            addCriterion("TYPE =", value, "type");
            return this;
        }

        public Criteria andTypeNotEqualTo(Integer value) {
            addCriterion("TYPE <>", value, "type");
            return this;
        }

        public Criteria andTypeGreaterThan(Integer value) {
            addCriterion("TYPE >", value, "type");
            return this;
        }

        public Criteria andTypeGreaterThanOrEqualTo(Integer value) {
            addCriterion("TYPE >=", value, "type");
            return this;
        }

        public Criteria andTypeLessThan(Integer value) {
            addCriterion("TYPE <", value, "type");
            return this;
        }

        public Criteria andTypeLessThanOrEqualTo(Integer value) {
            addCriterion("TYPE <=", value, "type");
            return this;
        }

        public Criteria andTypeIn(List<Integer> values) {
            addCriterion("TYPE in", values, "type");
            return this;
        }

        public Criteria andTypeNotIn(List<Integer> values) {
            addCriterion("TYPE not in", values, "type");
            return this;
        }

        public Criteria andTypeBetween(Integer value1, Integer value2) {
            addCriterion("TYPE between", value1, value2, "type");
            return this;
        }

        public Criteria andTypeNotBetween(Integer value1, Integer value2) {
            addCriterion("TYPE not between", value1, value2, "type");
            return this;
        }
    }
}