package com.tfs.irp.opertype.entity;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

public class IrpOpertypeExample {

	/**
	 * This field was generated by Apache iBATIS ibator. This field corresponds to the database table IRP_OPERTYPE
	 * @ibatorgenerated  Sat Apr 13 16:02:30 CST 2013
	 */
	protected String orderByClause;
	/**
	 * This field was generated by Apache iBATIS ibator. This field corresponds to the database table IRP_OPERTYPE
	 * @ibatorgenerated  Sat Apr 13 16:02:30 CST 2013
	 */
	protected List<Criteria> oredCriteria;

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table IRP_OPERTYPE
	 * @ibatorgenerated  Sat Apr 13 16:02:30 CST 2013
	 */
	public IrpOpertypeExample() {
		oredCriteria = new ArrayList<Criteria>();
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table IRP_OPERTYPE
	 * @ibatorgenerated  Sat Apr 13 16:02:30 CST 2013
	 */
	protected IrpOpertypeExample(IrpOpertypeExample example) {
		this.orderByClause = example.orderByClause;
		this.oredCriteria = example.oredCriteria;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table IRP_OPERTYPE
	 * @ibatorgenerated  Sat Apr 13 16:02:30 CST 2013
	 */
	public void setOrderByClause(String orderByClause) {
		this.orderByClause = orderByClause;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table IRP_OPERTYPE
	 * @ibatorgenerated  Sat Apr 13 16:02:30 CST 2013
	 */
	public String getOrderByClause() {
		return orderByClause;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table IRP_OPERTYPE
	 * @ibatorgenerated  Sat Apr 13 16:02:30 CST 2013
	 */
	public List<Criteria> getOredCriteria() {
		return oredCriteria;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table IRP_OPERTYPE
	 * @ibatorgenerated  Sat Apr 13 16:02:30 CST 2013
	 */
	public void or(Criteria criteria) {
		oredCriteria.add(criteria);
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table IRP_OPERTYPE
	 * @ibatorgenerated  Sat Apr 13 16:02:30 CST 2013
	 */
	public Criteria createCriteria() {
		Criteria criteria = createCriteriaInternal();
		if (oredCriteria.size() == 0) {
			oredCriteria.add(criteria);
		}
		return criteria;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table IRP_OPERTYPE
	 * @ibatorgenerated  Sat Apr 13 16:02:30 CST 2013
	 */
	protected Criteria createCriteriaInternal() {
		Criteria criteria = new Criteria();
		return criteria;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table IRP_OPERTYPE
	 * @ibatorgenerated  Sat Apr 13 16:02:30 CST 2013
	 */
	public void clear() {
		oredCriteria.clear();
	}

	/**
	 * This class was generated by Apache iBATIS ibator. This class corresponds to the database table IRP_OPERTYPE
	 * @ibatorgenerated  Sat Apr 13 16:02:30 CST 2013
	 */
	public static class Criteria {
		protected List<String> criteriaWithoutValue;
		protected List<Map<String, Object>> criteriaWithSingleValue;
		protected List<Map<String, Object>> criteriaWithListValue;
		protected List<Map<String, Object>> criteriaWithBetweenValue;

		protected Criteria() {
			super();
			criteriaWithoutValue = new ArrayList<String>();
			criteriaWithSingleValue = new ArrayList<Map<String, Object>>();
			criteriaWithListValue = new ArrayList<Map<String, Object>>();
			criteriaWithBetweenValue = new ArrayList<Map<String, Object>>();
		}

		public boolean isValid() {
			return criteriaWithoutValue.size() > 0
					|| criteriaWithSingleValue.size() > 0
					|| criteriaWithListValue.size() > 0
					|| criteriaWithBetweenValue.size() > 0;
		}

		public List<String> getCriteriaWithoutValue() {
			return criteriaWithoutValue;
		}

		public List<Map<String, Object>> getCriteriaWithSingleValue() {
			return criteriaWithSingleValue;
		}

		public List<Map<String, Object>> getCriteriaWithListValue() {
			return criteriaWithListValue;
		}

		public List<Map<String, Object>> getCriteriaWithBetweenValue() {
			return criteriaWithBetweenValue;
		}

		protected void addCriterion(String condition) {
			if (condition == null) {
				throw new RuntimeException("Value for condition cannot be null");
			}
			criteriaWithoutValue.add(condition);
		}

		protected void addCriterion(String condition, Object value,
				String property) {
			if (value == null) {
				throw new RuntimeException("Value for " + property
						+ " cannot be null");
			}
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("condition", condition);
			map.put("value", value);
			criteriaWithSingleValue.add(map);
		}

		protected void addCriterion(String condition,
				List<? extends Object> values, String property) {
			if (values == null || values.size() == 0) {
				throw new RuntimeException("Value list for " + property
						+ " cannot be null or empty");
			}
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("condition", condition);
			map.put("values", values);
			criteriaWithListValue.add(map);
		}

		protected void addCriterion(String condition, Object value1,
				Object value2, String property) {
			if (value1 == null || value2 == null) {
				throw new RuntimeException("Between values for " + property
						+ " cannot be null");
			}
			List<Object> list = new ArrayList<Object>();
			list.add(value1);
			list.add(value2);
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("condition", condition);
			map.put("values", list);
			criteriaWithBetweenValue.add(map);
		}

		protected void addCriterionForJDBCDate(String condition, Date value,
				String property) {
			addCriterion(condition, new java.sql.Date(value.getTime()),
					property);
		}

		protected void addCriterionForJDBCDate(String condition,
				List<Date> values, String property) {
			if (values == null || values.size() == 0) {
				throw new RuntimeException("Value list for " + property
						+ " cannot be null or empty");
			}
			List<java.sql.Date> dateList = new ArrayList<java.sql.Date>();
			Iterator<Date> iter = values.iterator();
			while (iter.hasNext()) {
				dateList.add(new java.sql.Date(iter.next().getTime()));
			}
			addCriterion(condition, dateList, property);
		}

		protected void addCriterionForJDBCDate(String condition, Date value1,
				Date value2, String property) {
			if (value1 == null || value2 == null) {
				throw new RuntimeException("Between values for " + property
						+ " cannot be null");
			}
			addCriterion(condition, new java.sql.Date(value1.getTime()),
					new java.sql.Date(value2.getTime()), property);
		}

		public Criteria andOpertypeidIsNull() {
			addCriterion("OPERTYPEID is null");
			return this;
		}

		public Criteria andOpertypeidIsNotNull() {
			addCriterion("OPERTYPEID is not null");
			return this;
		}

		public Criteria andOpertypeidEqualTo(Long value) {
			addCriterion("OPERTYPEID =", value, "opertypeid");
			return this;
		}

		public Criteria andOpertypeidNotEqualTo(Long value) {
			addCriterion("OPERTYPEID <>", value, "opertypeid");
			return this;
		}

		public Criteria andOpertypeidGreaterThan(Long value) {
			addCriterion("OPERTYPEID >", value, "opertypeid");
			return this;
		}

		public Criteria andOpertypeidGreaterThanOrEqualTo(Long value) {
			addCriterion("OPERTYPEID >=", value, "opertypeid");
			return this;
		}

		public Criteria andOpertypeidLessThan(Long value) {
			addCriterion("OPERTYPEID <", value, "opertypeid");
			return this;
		}

		public Criteria andOpertypeidLessThanOrEqualTo(Long value) {
			addCriterion("OPERTYPEID <=", value, "opertypeid");
			return this;
		}

		public Criteria andOpertypeidIn(List<Long> values) {
			addCriterion("OPERTYPEID in", values, "opertypeid");
			return this;
		}

		public Criteria andOpertypeidNotIn(List<Long> values) {
			addCriterion("OPERTYPEID not in", values, "opertypeid");
			return this;
		}

		public Criteria andOpertypeidBetween(Long value1, Long value2) {
			addCriterion("OPERTYPEID between", value1, value2, "opertypeid");
			return this;
		}

		public Criteria andOpertypeidNotBetween(Long value1, Long value2) {
			addCriterion("OPERTYPEID not between", value1, value2, "opertypeid");
			return this;
		}

		public Criteria andOpertypeIsNull() {
			addCriterion("OPERTYPE is null");
			return this;
		}

		public Criteria andOpertypeIsNotNull() {
			addCriterion("OPERTYPE is not null");
			return this;
		}

		public Criteria andOpertypeEqualTo(String value) {
			addCriterion("OPERTYPE =", value, "opertype");
			return this;
		}

		public Criteria andOpertypeNotEqualTo(String value) {
			addCriterion("OPERTYPE <>", value, "opertype");
			return this;
		}

		public Criteria andOpertypeGreaterThan(String value) {
			addCriterion("OPERTYPE >", value, "opertype");
			return this;
		}

		public Criteria andOpertypeGreaterThanOrEqualTo(String value) {
			addCriterion("OPERTYPE >=", value, "opertype");
			return this;
		}

		public Criteria andOpertypeLessThan(String value) {
			addCriterion("OPERTYPE <", value, "opertype");
			return this;
		}

		public Criteria andOpertypeLessThanOrEqualTo(String value) {
			addCriterion("OPERTYPE <=", value, "opertype");
			return this;
		}

		public Criteria andOpertypeLike(String value) {
			addCriterion("OPERTYPE like", value, "opertype");
			return this;
		}

		public Criteria andOpertypeNotLike(String value) {
			addCriterion("OPERTYPE not like", value, "opertype");
			return this;
		}

		public Criteria andOpertypeIn(List<String> values) {
			addCriterion("OPERTYPE in", values, "opertype");
			return this;
		}

		public Criteria andOpertypeNotIn(List<String> values) {
			addCriterion("OPERTYPE not in", values, "opertype");
			return this;
		}

		public Criteria andOpertypeBetween(String value1, String value2) {
			addCriterion("OPERTYPE between", value1, value2, "opertype");
			return this;
		}

		public Criteria andOpertypeNotBetween(String value1, String value2) {
			addCriterion("OPERTYPE not between", value1, value2, "opertype");
			return this;
		}

		public Criteria andOpernameIsNull() {
			addCriterion("OPERNAME is null");
			return this;
		}

		public Criteria andOpernameIsNotNull() {
			addCriterion("OPERNAME is not null");
			return this;
		}

		public Criteria andOpernameEqualTo(String value) {
			addCriterion("OPERNAME =", value, "opername");
			return this;
		}

		public Criteria andOpernameNotEqualTo(String value) {
			addCriterion("OPERNAME <>", value, "opername");
			return this;
		}

		public Criteria andOpernameGreaterThan(String value) {
			addCriterion("OPERNAME >", value, "opername");
			return this;
		}

		public Criteria andOpernameGreaterThanOrEqualTo(String value) {
			addCriterion("OPERNAME >=", value, "opername");
			return this;
		}

		public Criteria andOpernameLessThan(String value) {
			addCriterion("OPERNAME <", value, "opername");
			return this;
		}

		public Criteria andOpernameLessThanOrEqualTo(String value) {
			addCriterion("OPERNAME <=", value, "opername");
			return this;
		}

		public Criteria andOpernameLike(String value) {
			addCriterion("OPERNAME like", value, "opername");
			return this;
		}

		public Criteria andOpernameNotLike(String value) {
			addCriterion("OPERNAME not like", value, "opername");
			return this;
		}

		public Criteria andOpernameIn(List<String> values) {
			addCriterion("OPERNAME in", values, "opername");
			return this;
		}

		public Criteria andOpernameNotIn(List<String> values) {
			addCriterion("OPERNAME not in", values, "opername");
			return this;
		}

		public Criteria andOpernameBetween(String value1, String value2) {
			addCriterion("OPERNAME between", value1, value2, "opername");
			return this;
		}

		public Criteria andOpernameNotBetween(String value1, String value2) {
			addCriterion("OPERNAME not between", value1, value2, "opername");
			return this;
		}

		public Criteria andOperdescIsNull() {
			addCriterion("OPERDESC is null");
			return this;
		}

		public Criteria andOperdescIsNotNull() {
			addCriterion("OPERDESC is not null");
			return this;
		}

		public Criteria andOperdescEqualTo(String value) {
			addCriterion("OPERDESC =", value, "operdesc");
			return this;
		}

		public Criteria andOperdescNotEqualTo(String value) {
			addCriterion("OPERDESC <>", value, "operdesc");
			return this;
		}

		public Criteria andOperdescGreaterThan(String value) {
			addCriterion("OPERDESC >", value, "operdesc");
			return this;
		}

		public Criteria andOperdescGreaterThanOrEqualTo(String value) {
			addCriterion("OPERDESC >=", value, "operdesc");
			return this;
		}

		public Criteria andOperdescLessThan(String value) {
			addCriterion("OPERDESC <", value, "operdesc");
			return this;
		}

		public Criteria andOperdescLessThanOrEqualTo(String value) {
			addCriterion("OPERDESC <=", value, "operdesc");
			return this;
		}

		public Criteria andOperdescLike(String value) {
			addCriterion("OPERDESC like", value, "operdesc");
			return this;
		}

		public Criteria andOperdescNotLike(String value) {
			addCriterion("OPERDESC not like", value, "operdesc");
			return this;
		}

		public Criteria andOperdescIn(List<String> values) {
			addCriterion("OPERDESC in", values, "operdesc");
			return this;
		}

		public Criteria andOperdescNotIn(List<String> values) {
			addCriterion("OPERDESC not in", values, "operdesc");
			return this;
		}

		public Criteria andOperdescBetween(String value1, String value2) {
			addCriterion("OPERDESC between", value1, value2, "operdesc");
			return this;
		}

		public Criteria andOperdescNotBetween(String value1, String value2) {
			addCriterion("OPERDESC not between", value1, value2, "operdesc");
			return this;
		}

		public Criteria andCrtimeIsNull() {
			addCriterion("CRTIME is null");
			return this;
		}

		public Criteria andCrtimeIsNotNull() {
			addCriterion("CRTIME is not null");
			return this;
		}

		public Criteria andCrtimeEqualTo(Date value) {
			addCriterionForJDBCDate("CRTIME =", value, "crtime");
			return this;
		}

		public Criteria andCrtimeNotEqualTo(Date value) {
			addCriterionForJDBCDate("CRTIME <>", value, "crtime");
			return this;
		}

		public Criteria andCrtimeGreaterThan(Date value) {
			addCriterionForJDBCDate("CRTIME >", value, "crtime");
			return this;
		}

		public Criteria andCrtimeGreaterThanOrEqualTo(Date value) {
			addCriterionForJDBCDate("CRTIME >=", value, "crtime");
			return this;
		}

		public Criteria andCrtimeLessThan(Date value) {
			addCriterionForJDBCDate("CRTIME <", value, "crtime");
			return this;
		}

		public Criteria andCrtimeLessThanOrEqualTo(Date value) {
			addCriterionForJDBCDate("CRTIME <=", value, "crtime");
			return this;
		}

		public Criteria andCrtimeIn(List<Date> values) {
			addCriterionForJDBCDate("CRTIME in", values, "crtime");
			return this;
		}

		public Criteria andCrtimeNotIn(List<Date> values) {
			addCriterionForJDBCDate("CRTIME not in", values, "crtime");
			return this;
		}

		public Criteria andCrtimeBetween(Date value1, Date value2) {
			addCriterionForJDBCDate("CRTIME between", value1, value2, "crtime");
			return this;
		}

		public Criteria andCrtimeNotBetween(Date value1, Date value2) {
			addCriterionForJDBCDate("CRTIME not between", value1, value2,
					"crtime");
			return this;
		}

		public Criteria andCruserIsNull() {
			addCriterion("CRUSER is null");
			return this;
		}

		public Criteria andCruserIsNotNull() {
			addCriterion("CRUSER is not null");
			return this;
		}

		public Criteria andCruserEqualTo(String value) {
			addCriterion("CRUSER =", value, "cruser");
			return this;
		}

		public Criteria andCruserNotEqualTo(String value) {
			addCriterion("CRUSER <>", value, "cruser");
			return this;
		}

		public Criteria andCruserGreaterThan(String value) {
			addCriterion("CRUSER >", value, "cruser");
			return this;
		}

		public Criteria andCruserGreaterThanOrEqualTo(String value) {
			addCriterion("CRUSER >=", value, "cruser");
			return this;
		}

		public Criteria andCruserLessThan(String value) {
			addCriterion("CRUSER <", value, "cruser");
			return this;
		}

		public Criteria andCruserLessThanOrEqualTo(String value) {
			addCriterion("CRUSER <=", value, "cruser");
			return this;
		}

		public Criteria andCruserLike(String value) {
			addCriterion("CRUSER like", value, "cruser");
			return this;
		}

		public Criteria andCruserNotLike(String value) {
			addCriterion("CRUSER not like", value, "cruser");
			return this;
		}

		public Criteria andCruserIn(List<String> values) {
			addCriterion("CRUSER in", values, "cruser");
			return this;
		}

		public Criteria andCruserNotIn(List<String> values) {
			addCriterion("CRUSER not in", values, "cruser");
			return this;
		}

		public Criteria andCruserBetween(String value1, String value2) {
			addCriterion("CRUSER between", value1, value2, "cruser");
			return this;
		}

		public Criteria andCruserNotBetween(String value1, String value2) {
			addCriterion("CRUSER not between", value1, value2, "cruser");
			return this;
		}

		public Criteria andModifiedIsNull() {
			addCriterion("MODIFIED is null");
			return this;
		}

		public Criteria andModifiedIsNotNull() {
			addCriterion("MODIFIED is not null");
			return this;
		}

		public Criteria andModifiedEqualTo(Integer value) {
			addCriterion("MODIFIED =", value, "modified");
			return this;
		}

		public Criteria andModifiedNotEqualTo(Integer value) {
			addCriterion("MODIFIED <>", value, "modified");
			return this;
		}

		public Criteria andModifiedGreaterThan(Integer value) {
			addCriterion("MODIFIED >", value, "modified");
			return this;
		}

		public Criteria andModifiedGreaterThanOrEqualTo(Integer value) {
			addCriterion("MODIFIED >=", value, "modified");
			return this;
		}

		public Criteria andModifiedLessThan(Integer value) {
			addCriterion("MODIFIED <", value, "modified");
			return this;
		}

		public Criteria andModifiedLessThanOrEqualTo(Integer value) {
			addCriterion("MODIFIED <=", value, "modified");
			return this;
		}

		public Criteria andModifiedIn(List<Integer> values) {
			addCriterion("MODIFIED in", values, "modified");
			return this;
		}

		public Criteria andModifiedNotIn(List<Integer> values) {
			addCriterion("MODIFIED not in", values, "modified");
			return this;
		}

		public Criteria andModifiedBetween(Integer value1, Integer value2) {
			addCriterion("MODIFIED between", value1, value2, "modified");
			return this;
		}

		public Criteria andModifiedNotBetween(Integer value1, Integer value2) {
			addCriterion("MODIFIED not between", value1, value2, "modified");
			return this;
		}
	}
}