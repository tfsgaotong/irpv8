package com.tfs.irp.projectperson.entity;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.math.BigDecimal;

public class IrpProjectPersonExample {

	/**
	 * This field was generated by Apache iBATIS ibator. This field corresponds to the database table IRP_PROJECT_PERSON
	 * @ibatorgenerated  Wed Jul 10 09:50:25 CST 2013
	 */
	protected String orderByClause;
	/**
	 * This field was generated by Apache iBATIS ibator. This field corresponds to the database table IRP_PROJECT_PERSON
	 * @ibatorgenerated  Wed Jul 10 09:50:25 CST 2013
	 */
	protected List<Criteria> oredCriteria;

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table IRP_PROJECT_PERSON
	 * @ibatorgenerated  Wed Jul 10 09:50:25 CST 2013
	 */
	public IrpProjectPersonExample() {
		oredCriteria = new ArrayList<Criteria>();
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table IRP_PROJECT_PERSON
	 * @ibatorgenerated  Wed Jul 10 09:50:25 CST 2013
	 */
	protected IrpProjectPersonExample(IrpProjectPersonExample example) {
		this.orderByClause = example.orderByClause;
		this.oredCriteria = example.oredCriteria;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table IRP_PROJECT_PERSON
	 * @ibatorgenerated  Wed Jul 10 09:50:25 CST 2013
	 */
	public void setOrderByClause(String orderByClause) {
		this.orderByClause = orderByClause;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table IRP_PROJECT_PERSON
	 * @ibatorgenerated  Wed Jul 10 09:50:25 CST 2013
	 */
	public String getOrderByClause() {
		return orderByClause;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table IRP_PROJECT_PERSON
	 * @ibatorgenerated  Wed Jul 10 09:50:25 CST 2013
	 */
	public List<Criteria> getOredCriteria() {
		return oredCriteria;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table IRP_PROJECT_PERSON
	 * @ibatorgenerated  Wed Jul 10 09:50:25 CST 2013
	 */
	public void or(Criteria criteria) {
		oredCriteria.add(criteria);
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table IRP_PROJECT_PERSON
	 * @ibatorgenerated  Wed Jul 10 09:50:25 CST 2013
	 */
	public Criteria createCriteria() {
		Criteria criteria = createCriteriaInternal();
		if (oredCriteria.size() == 0) {
			oredCriteria.add(criteria);
		}
		return criteria;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table IRP_PROJECT_PERSON
	 * @ibatorgenerated  Wed Jul 10 09:50:25 CST 2013
	 */
	protected Criteria createCriteriaInternal() {
		Criteria criteria = new Criteria();
		return criteria;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table IRP_PROJECT_PERSON
	 * @ibatorgenerated  Wed Jul 10 09:50:25 CST 2013
	 */
	public void clear() {
		oredCriteria.clear();
	}

	/**
	 * This class was generated by Apache iBATIS ibator. This class corresponds to the database table IRP_PROJECT_PERSON
	 * @ibatorgenerated  Wed Jul 10 09:50:25 CST 2013
	 */
	public static class Criteria {
		protected List<String> criteriaWithoutValue;
		protected List<Map<String, Object>> criteriaWithSingleValue;
		protected List<Map<String, Object>> criteriaWithListValue;
		protected List<Map<String, Object>> criteriaWithBetweenValue;

		protected Criteria() {
			super();
			criteriaWithoutValue = new ArrayList<String>();
			criteriaWithSingleValue = new ArrayList<Map<String, Object>>();
			criteriaWithListValue = new ArrayList<Map<String, Object>>();
			criteriaWithBetweenValue = new ArrayList<Map<String, Object>>();
		}

		public boolean isValid() {
			return criteriaWithoutValue.size() > 0
					|| criteriaWithSingleValue.size() > 0
					|| criteriaWithListValue.size() > 0
					|| criteriaWithBetweenValue.size() > 0;
		}

		public List<String> getCriteriaWithoutValue() {
			return criteriaWithoutValue;
		}

		public List<Map<String, Object>> getCriteriaWithSingleValue() {
			return criteriaWithSingleValue;
		}

		public List<Map<String, Object>> getCriteriaWithListValue() {
			return criteriaWithListValue;
		}

		public List<Map<String, Object>> getCriteriaWithBetweenValue() {
			return criteriaWithBetweenValue;
		}

		protected void addCriterion(String condition) {
			if (condition == null) {
				throw new RuntimeException("Value for condition cannot be null");
			}
			criteriaWithoutValue.add(condition);
		}

		protected void addCriterion(String condition, Object value,
				String property) {
			if (value == null) {
				throw new RuntimeException("Value for " + property
						+ " cannot be null");
			}
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("condition", condition);
			map.put("value", value);
			criteriaWithSingleValue.add(map);
		}

		protected void addCriterion(String condition,
				List<? extends Object> values, String property) {
			if (values == null || values.size() == 0) {
				throw new RuntimeException("Value list for " + property
						+ " cannot be null or empty");
			}
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("condition", condition);
			map.put("values", values);
			criteriaWithListValue.add(map);
		}

		protected void addCriterion(String condition, Object value1,
				Object value2, String property) {
			if (value1 == null || value2 == null) {
				throw new RuntimeException("Between values for " + property
						+ " cannot be null");
			}
			List<Object> list = new ArrayList<Object>();
			list.add(value1);
			list.add(value2);
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("condition", condition);
			map.put("values", list);
			criteriaWithBetweenValue.add(map);
		}

		protected void addCriterionForJDBCDate(String condition, Date value,
				String property) {
			addCriterion(condition, new java.sql.Date(value.getTime()),
					property);
		}

		protected void addCriterionForJDBCDate(String condition,
				List<Date> values, String property) {
			if (values == null || values.size() == 0) {
				throw new RuntimeException("Value list for " + property
						+ " cannot be null or empty");
			}
			List<java.sql.Date> dateList = new ArrayList<java.sql.Date>();
			Iterator<Date> iter = values.iterator();
			while (iter.hasNext()) {
				dateList.add(new java.sql.Date(iter.next().getTime()));
			}
			addCriterion(condition, dateList, property);
		}

		protected void addCriterionForJDBCDate(String condition, Date value1,
				Date value2, String property) {
			if (value1 == null || value2 == null) {
				throw new RuntimeException("Between values for " + property
						+ " cannot be null");
			}
			addCriterion(condition, new java.sql.Date(value1.getTime()),
					new java.sql.Date(value2.getTime()), property);
		}

		public Criteria andProperidIsNull() {
			addCriterion("PROPERID is null");
			return this;
		}

		public Criteria andProperidIsNotNull() {
			addCriterion("PROPERID is not null");
			return this;
		}

		public Criteria andProperidEqualTo(Long value) {
			addCriterion("PROPERID =", value, "properid");
			return this;
		}

		public Criteria andProperidNotEqualTo(Long value) {
			addCriterion("PROPERID <>", value, "properid");
			return this;
		}

		public Criteria andProperidGreaterThan(Long value) {
			addCriterion("PROPERID >", value, "properid");
			return this;
		}

		public Criteria andProperidGreaterThanOrEqualTo(Long value) {
			addCriterion("PROPERID >=", value, "properid");
			return this;
		}

		public Criteria andProperidLessThan(Long value) {
			addCriterion("PROPERID <", value, "properid");
			return this;
		}

		public Criteria andProperidLessThanOrEqualTo(Long value) {
			addCriterion("PROPERID <=", value, "properid");
			return this;
		}

		public Criteria andProperidIn(List<Long> values) {
			addCriterion("PROPERID in", values, "properid");
			return this;
		}

		public Criteria andProperidNotIn(List<Long> values) {
			addCriterion("PROPERID not in", values, "properid");
			return this;
		}

		public Criteria andProperidBetween(Long value1, Long value2) {
			addCriterion("PROPERID between", value1, value2, "properid");
			return this;
		}

		public Criteria andProperidNotBetween(Long value1, Long value2) {
			addCriterion("PROPERID not between", value1, value2, "properid");
			return this;
		}

		public Criteria andPridIsNull() {
			addCriterion("PRID is null");
			return this;
		}

		public Criteria andPridIsNotNull() {
			addCriterion("PRID is not null");
			return this;
		}

		public Criteria andPridEqualTo(Long value) {
			addCriterion("PRID =", value, "prid");
			return this;
		}

		public Criteria andPridNotEqualTo(Long value) {
			addCriterion("PRID <>", value, "prid");
			return this;
		}

		public Criteria andPridGreaterThan(Long value) {
			addCriterion("PRID >", value, "prid");
			return this;
		}

		public Criteria andPridGreaterThanOrEqualTo(Long value) {
			addCriterion("PRID >=", value, "prid");
			return this;
		}

		public Criteria andPridLessThan(Long value) {
			addCriterion("PRID <", value, "prid");
			return this;
		}

		public Criteria andPridLessThanOrEqualTo(Long value) {
			addCriterion("PRID <=", value, "prid");
			return this;
		}

		public Criteria andPridIn(List<Long> values) {
			addCriterion("PRID in", values, "prid");
			return this;
		}

		public Criteria andPridNotIn(List<Long> values) {
			addCriterion("PRID not in", values, "prid");
			return this;
		}

		public Criteria andPridBetween(Long value1, Long value2) {
			addCriterion("PRID between", value1, value2, "prid");
			return this;
		}

		public Criteria andPridNotBetween(Long value1, Long value2) {
			addCriterion("PRID not between", value1, value2, "prid");
			return this;
		}

		public Criteria andCruseridIsNull() {
			addCriterion("CRUSERID is null");
			return this;
		}

		public Criteria andCruseridIsNotNull() {
			addCriterion("CRUSERID is not null");
			return this;
		}

		public Criteria andCruseridEqualTo(Long value) {
			addCriterion("CRUSERID =", value, "cruserid");
			return this;
		}

		public Criteria andCruseridNotEqualTo(Long value) {
			addCriterion("CRUSERID <>", value, "cruserid");
			return this;
		}

		public Criteria andCruseridGreaterThan(Long value) {
			addCriterion("CRUSERID >", value, "cruserid");
			return this;
		}

		public Criteria andCruseridGreaterThanOrEqualTo(Long value) {
			addCriterion("CRUSERID >=", value, "cruserid");
			return this;
		}

		public Criteria andCruseridLessThan(Long value) {
			addCriterion("CRUSERID <", value, "cruserid");
			return this;
		}

		public Criteria andCruseridLessThanOrEqualTo(Long value) {
			addCriterion("CRUSERID <=", value, "cruserid");
			return this;
		}

		public Criteria andCruseridIn(List<Long> values) {
			addCriterion("CRUSERID in", values, "cruserid");
			return this;
		}

		public Criteria andCruseridNotIn(List<Long> values) {
			addCriterion("CRUSERID not in", values, "cruserid");
			return this;
		}

		public Criteria andCruseridBetween(Long value1, Long value2) {
			addCriterion("CRUSERID between", value1, value2, "cruserid");
			return this;
		}

		public Criteria andCruseridNotBetween(Long value1, Long value2) {
			addCriterion("CRUSERID not between", value1, value2, "cruserid");
			return this;
		}

		public Criteria andPersonidIsNull() {
			addCriterion("PERSONID is null");
			return this;
		}

		public Criteria andPersonidIsNotNull() {
			addCriterion("PERSONID is not null");
			return this;
		}

		public Criteria andPersonidEqualTo(Long value) {
			addCriterion("PERSONID =", value, "personid");
			return this;
		}

		public Criteria andPersonidNotEqualTo(Long value) {
			addCriterion("PERSONID <>", value, "personid");
			return this;
		}

		public Criteria andPersonidGreaterThan(Long value) {
			addCriterion("PERSONID >", value, "personid");
			return this;
		}

		public Criteria andPersonidGreaterThanOrEqualTo(Long value) {
			addCriterion("PERSONID >=", value, "personid");
			return this;
		}

		public Criteria andPersonidLessThan(Long value) {
			addCriterion("PERSONID <", value, "personid");
			return this;
		}

		public Criteria andPersonidLessThanOrEqualTo(Long value) {
			addCriterion("PERSONID <=", value, "personid");
			return this;
		}

		public Criteria andPersonidIn(List<Long> values) {
			addCriterion("PERSONID in", values, "personid");
			return this;
		}

		public Criteria andPersonidNotIn(List<Long> values) {
			addCriterion("PERSONID not in", values, "personid");
			return this;
		}

		public Criteria andPersonidBetween(Long value1, Long value2) {
			addCriterion("PERSONID between", value1, value2, "personid");
			return this;
		}

		public Criteria andPersonidNotBetween(Long value1, Long value2) {
			addCriterion("PERSONID not between", value1, value2, "personid");
			return this;
		}

		public Criteria andCrtimeIsNull() {
			addCriterion("CRTIME is null");
			return this;
		}

		public Criteria andCrtimeIsNotNull() {
			addCriterion("CRTIME is not null");
			return this;
		}

		public Criteria andCrtimeEqualTo(Date value) {
			addCriterionForJDBCDate("CRTIME =", value, "crtime");
			return this;
		}

		public Criteria andCrtimeNotEqualTo(Date value) {
			addCriterionForJDBCDate("CRTIME <>", value, "crtime");
			return this;
		}

		public Criteria andCrtimeGreaterThan(Date value) {
			addCriterionForJDBCDate("CRTIME >", value, "crtime");
			return this;
		}

		public Criteria andCrtimeGreaterThanOrEqualTo(Date value) {
			addCriterionForJDBCDate("CRTIME >=", value, "crtime");
			return this;
		}

		public Criteria andCrtimeLessThan(Date value) {
			addCriterionForJDBCDate("CRTIME <", value, "crtime");
			return this;
		}

		public Criteria andCrtimeLessThanOrEqualTo(Date value) {
			addCriterionForJDBCDate("CRTIME <=", value, "crtime");
			return this;
		}

		public Criteria andCrtimeIn(List<Date> values) {
			addCriterionForJDBCDate("CRTIME in", values, "crtime");
			return this;
		}

		public Criteria andCrtimeNotIn(List<Date> values) {
			addCriterionForJDBCDate("CRTIME not in", values, "crtime");
			return this;
		}

		public Criteria andCrtimeBetween(Date value1, Date value2) {
			addCriterionForJDBCDate("CRTIME between", value1, value2, "crtime");
			return this;
		}

		public Criteria andCrtimeNotBetween(Date value1, Date value2) {
			addCriterionForJDBCDate("CRTIME not between", value1, value2,
					"crtime");
			return this;
		}

		public Criteria andIsstateIsNull() {
			addCriterion("ISSTATE is null");
			return this;
		}

		public Criteria andIsstateIsNotNull() {
			addCriterion("ISSTATE is not null");
			return this;
		}

		public Criteria andIsstateEqualTo(Long value) {
			addCriterion("ISSTATE =", value, "isstate");
			return this;
		}

		public Criteria andIsstateNotEqualTo(Long value) {
			addCriterion("ISSTATE <>", value, "isstate");
			return this;
		}

		public Criteria andIsstateGreaterThan(Long value) {
			addCriterion("ISSTATE >", value, "isstate");
			return this;
		}

		public Criteria andIsstateGreaterThanOrEqualTo(Long value) {
			addCriterion("ISSTATE >=", value, "isstate");
			return this;
		}

		public Criteria andIsstateLessThan(Long value) {
			addCriterion("ISSTATE <", value, "isstate");
			return this;
		}

		public Criteria andIsstateLessThanOrEqualTo(Long value) {
			addCriterion("ISSTATE <=", value, "isstate");
			return this;
		}

		public Criteria andIsstateIn(List<Long> values) {
			addCriterion("ISSTATE in", values, "isstate");
			return this;
		}

		public Criteria andIsstateNotIn(List<Long> values) {
			addCriterion("ISSTATE not in", values, "isstate");
			return this;
		}

		public Criteria andIsstateBetween(Long value1, Long value2) {
			addCriterion("ISSTATE between", value1, value2, "isstate");
			return this;
		}

		public Criteria andIsstateNotBetween(Long value1, Long value2) {
			addCriterion("ISSTATE not between", value1, value2, "isstate");
			return this;
		}

		public Criteria andStatusIsNull() {
			addCriterion("STATUS is null");
			return this;
		}

		public Criteria andStatusIsNotNull() {
			addCriterion("STATUS is not null");
			return this;
		}

		public Criteria andStatusEqualTo(Long value) {
			addCriterion("STATUS =", value, "status");
			return this;
		}

		public Criteria andStatusNotEqualTo(Long value) {
			addCriterion("STATUS <>", value, "status");
			return this;
		}

		public Criteria andStatusGreaterThan(Long value) {
			addCriterion("STATUS >", value, "status");
			return this;
		}

		public Criteria andStatusGreaterThanOrEqualTo(Long value) {
			addCriterion("STATUS >=", value, "status");
			return this;
		}

		public Criteria andStatusLessThan(Long value) {
			addCriterion("STATUS <", value, "status");
			return this;
		}

		public Criteria andStatusLessThanOrEqualTo(Long value) {
			addCriterion("STATUS <=", value, "status");
			return this;
		}

		public Criteria andStatusIn(List<Long> values) {
			addCriterion("STATUS in", values, "status");
			return this;
		}

		public Criteria andStatusNotIn(List<Long> values) {
			addCriterion("STATUS not in", values, "status");
			return this;
		}

		public Criteria andStatusBetween(Long value1, Long value2) {
			addCriterion("STATUS between", value1, value2, "status");
			return this;
		}

		public Criteria andStatusNotBetween(Long value1, Long value2) {
			addCriterion("STATUS not between", value1, value2, "status");
			return this;
		}

		public Criteria andCodeIsNull() {
			addCriterion("CODE is null");
			return this;
		}

		public Criteria andCodeIsNotNull() {
			addCriterion("CODE is not null");
			return this;
		}

		public Criteria andCodeEqualTo(Long value) {
			addCriterion("CODE =", value, "code");
			return this;
		}

		public Criteria andCodeNotEqualTo(Long value) {
			addCriterion("CODE <>", value, "code");
			return this;
		}

		public Criteria andCodeGreaterThan(Long value) {
			addCriterion("CODE >", value, "code");
			return this;
		}

		public Criteria andCodeGreaterThanOrEqualTo(Long value) {
			addCriterion("CODE >=", value, "code");
			return this;
		}

		public Criteria andCodeLessThan(Long value) {
			addCriterion("CODE <", value, "code");
			return this;
		}

		public Criteria andCodeLessThanOrEqualTo(Long value) {
			addCriterion("CODE <=", value, "code");
			return this;
		}

		public Criteria andCodeIn(List<Long> values) {
			addCriterion("CODE in", values, "code");
			return this;
		}

		public Criteria andCodeNotIn(List<Long> values) {
			addCriterion("CODE not in", values, "code");
			return this;
		}

		public Criteria andCodeBetween(Long value1, Long value2) {
			addCriterion("CODE between", value1, value2, "code");
			return this;
		}

		public Criteria andCodeNotBetween(Long value1, Long value2) {
			addCriterion("CODE not between", value1, value2, "code");
			return this;
		}
	}
}