package com.tfs.irp.projectsharetask.entity;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.math.BigDecimal;

public class IrpProjectShareTaskExample {

	/**
	 * This field was generated by Apache iBATIS ibator. This field corresponds to the database table IRP_PROJECT_SHARE_TASK
	 * @ibatorgenerated  Tue Aug 26 16:50:34 CST 2014
	 */
	protected String orderByClause;
	/**
	 * This field was generated by Apache iBATIS ibator. This field corresponds to the database table IRP_PROJECT_SHARE_TASK
	 * @ibatorgenerated  Tue Aug 26 16:50:34 CST 2014
	 */
	protected List<Criteria> oredCriteria;

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table IRP_PROJECT_SHARE_TASK
	 * @ibatorgenerated  Tue Aug 26 16:50:34 CST 2014
	 */
	public IrpProjectShareTaskExample() {
		oredCriteria = new ArrayList<Criteria>();
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table IRP_PROJECT_SHARE_TASK
	 * @ibatorgenerated  Tue Aug 26 16:50:34 CST 2014
	 */
	protected IrpProjectShareTaskExample(IrpProjectShareTaskExample example) {
		this.orderByClause = example.orderByClause;
		this.oredCriteria = example.oredCriteria;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table IRP_PROJECT_SHARE_TASK
	 * @ibatorgenerated  Tue Aug 26 16:50:34 CST 2014
	 */
	public void setOrderByClause(String orderByClause) {
		this.orderByClause = orderByClause;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table IRP_PROJECT_SHARE_TASK
	 * @ibatorgenerated  Tue Aug 26 16:50:34 CST 2014
	 */
	public String getOrderByClause() {
		return orderByClause;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table IRP_PROJECT_SHARE_TASK
	 * @ibatorgenerated  Tue Aug 26 16:50:34 CST 2014
	 */
	public List<Criteria> getOredCriteria() {
		return oredCriteria;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table IRP_PROJECT_SHARE_TASK
	 * @ibatorgenerated  Tue Aug 26 16:50:34 CST 2014
	 */
	public void or(Criteria criteria) {
		oredCriteria.add(criteria);
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table IRP_PROJECT_SHARE_TASK
	 * @ibatorgenerated  Tue Aug 26 16:50:34 CST 2014
	 */
	public Criteria createCriteria() {
		Criteria criteria = createCriteriaInternal();
		if (oredCriteria.size() == 0) {
			oredCriteria.add(criteria);
		}
		return criteria;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table IRP_PROJECT_SHARE_TASK
	 * @ibatorgenerated  Tue Aug 26 16:50:34 CST 2014
	 */
	protected Criteria createCriteriaInternal() {
		Criteria criteria = new Criteria();
		return criteria;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table IRP_PROJECT_SHARE_TASK
	 * @ibatorgenerated  Tue Aug 26 16:50:34 CST 2014
	 */
	public void clear() {
		oredCriteria.clear();
	}

	/**
	 * This class was generated by Apache iBATIS ibator. This class corresponds to the database table IRP_PROJECT_SHARE_TASK
	 * @ibatorgenerated  Tue Aug 26 16:50:34 CST 2014
	 */
	public static class Criteria {
		protected List<String> criteriaWithoutValue;
		protected List<Map<String, Object>> criteriaWithSingleValue;
		protected List<Map<String, Object>> criteriaWithListValue;
		protected List<Map<String, Object>> criteriaWithBetweenValue;

		protected Criteria() {
			super();
			criteriaWithoutValue = new ArrayList<String>();
			criteriaWithSingleValue = new ArrayList<Map<String, Object>>();
			criteriaWithListValue = new ArrayList<Map<String, Object>>();
			criteriaWithBetweenValue = new ArrayList<Map<String, Object>>();
		}

		public boolean isValid() {
			return criteriaWithoutValue.size() > 0
					|| criteriaWithSingleValue.size() > 0
					|| criteriaWithListValue.size() > 0
					|| criteriaWithBetweenValue.size() > 0;
		}

		public List<String> getCriteriaWithoutValue() {
			return criteriaWithoutValue;
		}

		public List<Map<String, Object>> getCriteriaWithSingleValue() {
			return criteriaWithSingleValue;
		}

		public List<Map<String, Object>> getCriteriaWithListValue() {
			return criteriaWithListValue;
		}

		public List<Map<String, Object>> getCriteriaWithBetweenValue() {
			return criteriaWithBetweenValue;
		}

		protected void addCriterion(String condition) {
			if (condition == null) {
				throw new RuntimeException("Value for condition cannot be null");
			}
			criteriaWithoutValue.add(condition);
		}

		protected void addCriterion(String condition, Object value,
				String property) {
			if (value == null) {
				throw new RuntimeException("Value for " + property
						+ " cannot be null");
			}
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("condition", condition);
			map.put("value", value);
			criteriaWithSingleValue.add(map);
		}

		protected void addCriterion(String condition,
				List<? extends Object> values, String property) {
			if (values == null || values.size() == 0) {
				throw new RuntimeException("Value list for " + property
						+ " cannot be null or empty");
			}
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("condition", condition);
			map.put("values", values);
			criteriaWithListValue.add(map);
		}

		protected void addCriterion(String condition, Object value1,
				Object value2, String property) {
			if (value1 == null || value2 == null) {
				throw new RuntimeException("Between values for " + property
						+ " cannot be null");
			}
			List<Object> list = new ArrayList<Object>();
			list.add(value1);
			list.add(value2);
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("condition", condition);
			map.put("values", list);
			criteriaWithBetweenValue.add(map);
		}

		protected void addCriterionForJDBCDate(String condition, Date value,
				String property) {
			addCriterion(condition, new java.sql.Date(value.getTime()),
					property);
		}

		protected void addCriterionForJDBCDate(String condition,
				List<Date> values, String property) {
			if (values == null || values.size() == 0) {
				throw new RuntimeException("Value list for " + property
						+ " cannot be null or empty");
			}
			List<java.sql.Date> dateList = new ArrayList<java.sql.Date>();
			Iterator<Date> iter = values.iterator();
			while (iter.hasNext()) {
				dateList.add(new java.sql.Date(iter.next().getTime()));
			}
			addCriterion(condition, dateList, property);
		}

		protected void addCriterionForJDBCDate(String condition, Date value1,
				Date value2, String property) {
			if (value1 == null || value2 == null) {
				throw new RuntimeException("Between values for " + property
						+ " cannot be null");
			}
			addCriterion(condition, new java.sql.Date(value1.getTime()),
					new java.sql.Date(value2.getTime()), property);
		}

		public Criteria andSharetaskidIsNull() {
			addCriterion("SHARETASKID is null");
			return this;
		}

		public Criteria andSharetaskidIsNotNull() {
			addCriterion("SHARETASKID is not null");
			return this;
		}

		public Criteria andSharetaskidEqualTo(Long value) {
			addCriterion("SHARETASKID =", value, "sharetaskid");
			return this;
		}

		public Criteria andSharetaskidNotEqualTo(Long value) {
			addCriterion("SHARETASKID <>", value, "sharetaskid");
			return this;
		}

		public Criteria andSharetaskidGreaterThan(Long value) {
			addCriterion("SHARETASKID >", value, "sharetaskid");
			return this;
		}

		public Criteria andSharetaskidGreaterThanOrEqualTo(Long value) {
			addCriterion("SHARETASKID >=", value, "sharetaskid");
			return this;
		}

		public Criteria andSharetaskidLessThan(Long value) {
			addCriterion("SHARETASKID <", value, "sharetaskid");
			return this;
		}

		public Criteria andSharetaskidLessThanOrEqualTo(Long value) {
			addCriterion("SHARETASKID <=", value, "sharetaskid");
			return this;
		}

		public Criteria andSharetaskidIn(List<Long> values) {
			addCriterion("SHARETASKID in", values, "sharetaskid");
			return this;
		}

		public Criteria andSharetaskidNotIn(List<Long> values) {
			addCriterion("SHARETASKID not in", values, "sharetaskid");
			return this;
		}

		public Criteria andSharetaskidBetween(Long value1, Long value2) {
			addCriterion("SHARETASKID between", value1, value2, "sharetaskid");
			return this;
		}

		public Criteria andSharetaskidNotBetween(Long value1, Long value2) {
			addCriterion("SHARETASKID not between", value1, value2,
					"sharetaskid");
			return this;
		}

		public Criteria andProjectidIsNull() {
			addCriterion("PROJECTID is null");
			return this;
		}

		public Criteria andProjectidIsNotNull() {
			addCriterion("PROJECTID is not null");
			return this;
		}

		public Criteria andProjectidEqualTo(Long value) {
			addCriterion("PROJECTID =", value, "projectid");
			return this;
		}

		public Criteria andProjectidNotEqualTo(Long value) {
			addCriterion("PROJECTID <>", value, "projectid");
			return this;
		}

		public Criteria andProjectidGreaterThan(Long value) {
			addCriterion("PROJECTID >", value, "projectid");
			return this;
		}

		public Criteria andProjectidGreaterThanOrEqualTo(Long value) {
			addCriterion("PROJECTID >=", value, "projectid");
			return this;
		}

		public Criteria andProjectidLessThan(Long value) {
			addCriterion("PROJECTID <", value, "projectid");
			return this;
		}

		public Criteria andProjectidLessThanOrEqualTo(Long value) {
			addCriterion("PROJECTID <=", value, "projectid");
			return this;
		}

		public Criteria andProjectidIn(List<Long> values) {
			addCriterion("PROJECTID in", values, "projectid");
			return this;
		}

		public Criteria andProjectidNotIn(List<Long> values) {
			addCriterion("PROJECTID not in", values, "projectid");
			return this;
		}

		public Criteria andProjectidBetween(Long value1, Long value2) {
			addCriterion("PROJECTID between", value1, value2, "projectid");
			return this;
		}

		public Criteria andProjectidNotBetween(Long value1, Long value2) {
			addCriterion("PROJECTID not between", value1, value2, "projectid");
			return this;
		}

		public Criteria andCruseridIsNull() {
			addCriterion("CRUSERID is null");
			return this;
		}

		public Criteria andCruseridIsNotNull() {
			addCriterion("CRUSERID is not null");
			return this;
		}

		public Criteria andCruseridEqualTo(Long value) {
			addCriterion("CRUSERID =", value, "cruserid");
			return this;
		}

		public Criteria andCruseridNotEqualTo(Long value) {
			addCriterion("CRUSERID <>", value, "cruserid");
			return this;
		}

		public Criteria andCruseridGreaterThan(Long value) {
			addCriterion("CRUSERID >", value, "cruserid");
			return this;
		}

		public Criteria andCruseridGreaterThanOrEqualTo(Long value) {
			addCriterion("CRUSERID >=", value, "cruserid");
			return this;
		}

		public Criteria andCruseridLessThan(Long value) {
			addCriterion("CRUSERID <", value, "cruserid");
			return this;
		}

		public Criteria andCruseridLessThanOrEqualTo(Long value) {
			addCriterion("CRUSERID <=", value, "cruserid");
			return this;
		}

		public Criteria andCruseridIn(List<Long> values) {
			addCriterion("CRUSERID in", values, "cruserid");
			return this;
		}

		public Criteria andCruseridNotIn(List<Long> values) {
			addCriterion("CRUSERID not in", values, "cruserid");
			return this;
		}

		public Criteria andCruseridBetween(Long value1, Long value2) {
			addCriterion("CRUSERID between", value1, value2, "cruserid");
			return this;
		}

		public Criteria andCruseridNotBetween(Long value1, Long value2) {
			addCriterion("CRUSERID not between", value1, value2, "cruserid");
			return this;
		}

		public Criteria andCrtimeIsNull() {
			addCriterion("CRTIME is null");
			return this;
		}

		public Criteria andCrtimeIsNotNull() {
			addCriterion("CRTIME is not null");
			return this;
		}

		public Criteria andCrtimeEqualTo(Date value) {
			addCriterionForJDBCDate("CRTIME =", value, "crtime");
			return this;
		}

		public Criteria andCrtimeNotEqualTo(Date value) {
			addCriterionForJDBCDate("CRTIME <>", value, "crtime");
			return this;
		}

		public Criteria andCrtimeGreaterThan(Date value) {
			addCriterionForJDBCDate("CRTIME >", value, "crtime");
			return this;
		}

		public Criteria andCrtimeGreaterThanOrEqualTo(Date value) {
			addCriterionForJDBCDate("CRTIME >=", value, "crtime");
			return this;
		}

		public Criteria andCrtimeLessThan(Date value) {
			addCriterionForJDBCDate("CRTIME <", value, "crtime");
			return this;
		}

		public Criteria andCrtimeLessThanOrEqualTo(Date value) {
			addCriterionForJDBCDate("CRTIME <=", value, "crtime");
			return this;
		}

		public Criteria andCrtimeIn(List<Date> values) {
			addCriterionForJDBCDate("CRTIME in", values, "crtime");
			return this;
		}

		public Criteria andCrtimeNotIn(List<Date> values) {
			addCriterionForJDBCDate("CRTIME not in", values, "crtime");
			return this;
		}

		public Criteria andCrtimeBetween(Date value1, Date value2) {
			addCriterionForJDBCDate("CRTIME between", value1, value2, "crtime");
			return this;
		}

		public Criteria andCrtimeNotBetween(Date value1, Date value2) {
			addCriterionForJDBCDate("CRTIME not between", value1, value2,
					"crtime");
			return this;
		}

		public Criteria andStarttimeIsNull() {
			addCriterion("STARTTIME is null");
			return this;
		}

		public Criteria andStarttimeIsNotNull() {
			addCriterion("STARTTIME is not null");
			return this;
		}

		public Criteria andStarttimeEqualTo(Date value) {
			addCriterionForJDBCDate("STARTTIME =", value, "starttime");
			return this;
		}

		public Criteria andStarttimeNotEqualTo(Date value) {
			addCriterionForJDBCDate("STARTTIME <>", value, "starttime");
			return this;
		}

		public Criteria andStarttimeGreaterThan(Date value) {
			addCriterionForJDBCDate("STARTTIME >", value, "starttime");
			return this;
		}

		public Criteria andStarttimeGreaterThanOrEqualTo(Date value) {
			addCriterionForJDBCDate("STARTTIME >=", value, "starttime");
			return this;
		}

		public Criteria andStarttimeLessThan(Date value) {
			addCriterionForJDBCDate("STARTTIME <", value, "starttime");
			return this;
		}

		public Criteria andStarttimeLessThanOrEqualTo(Date value) {
			addCriterionForJDBCDate("STARTTIME <=", value, "starttime");
			return this;
		}

		public Criteria andStarttimeIn(List<Date> values) {
			addCriterionForJDBCDate("STARTTIME in", values, "starttime");
			return this;
		}

		public Criteria andStarttimeNotIn(List<Date> values) {
			addCriterionForJDBCDate("STARTTIME not in", values, "starttime");
			return this;
		}

		public Criteria andStarttimeBetween(Date value1, Date value2) {
			addCriterionForJDBCDate("STARTTIME between", value1, value2,
					"starttime");
			return this;
		}

		public Criteria andStarttimeNotBetween(Date value1, Date value2) {
			addCriterionForJDBCDate("STARTTIME not between", value1, value2,
					"starttime");
			return this;
		}

		public Criteria andUpdatetimeIsNull() {
			addCriterion("UPDATETIME is null");
			return this;
		}

		public Criteria andUpdatetimeIsNotNull() {
			addCriterion("UPDATETIME is not null");
			return this;
		}

		public Criteria andUpdatetimeEqualTo(Date value) {
			addCriterionForJDBCDate("UPDATETIME =", value, "updatetime");
			return this;
		}

		public Criteria andUpdatetimeNotEqualTo(Date value) {
			addCriterionForJDBCDate("UPDATETIME <>", value, "updatetime");
			return this;
		}

		public Criteria andUpdatetimeGreaterThan(Date value) {
			addCriterionForJDBCDate("UPDATETIME >", value, "updatetime");
			return this;
		}

		public Criteria andUpdatetimeGreaterThanOrEqualTo(Date value) {
			addCriterionForJDBCDate("UPDATETIME >=", value, "updatetime");
			return this;
		}

		public Criteria andUpdatetimeLessThan(Date value) {
			addCriterionForJDBCDate("UPDATETIME <", value, "updatetime");
			return this;
		}

		public Criteria andUpdatetimeLessThanOrEqualTo(Date value) {
			addCriterionForJDBCDate("UPDATETIME <=", value, "updatetime");
			return this;
		}

		public Criteria andUpdatetimeIn(List<Date> values) {
			addCriterionForJDBCDate("UPDATETIME in", values, "updatetime");
			return this;
		}

		public Criteria andUpdatetimeNotIn(List<Date> values) {
			addCriterionForJDBCDate("UPDATETIME not in", values, "updatetime");
			return this;
		}

		public Criteria andUpdatetimeBetween(Date value1, Date value2) {
			addCriterionForJDBCDate("UPDATETIME between", value1, value2,
					"updatetime");
			return this;
		}

		public Criteria andUpdatetimeNotBetween(Date value1, Date value2) {
			addCriterionForJDBCDate("UPDATETIME not between", value1, value2,
					"updatetime");
			return this;
		}

		public Criteria andEndtimeIsNull() {
			addCriterion("ENDTIME is null");
			return this;
		}

		public Criteria andEndtimeIsNotNull() {
			addCriterion("ENDTIME is not null");
			return this;
		}

		public Criteria andEndtimeEqualTo(Date value) {
			addCriterionForJDBCDate("ENDTIME =", value, "endtime");
			return this;
		}

		public Criteria andEndtimeNotEqualTo(Date value) {
			addCriterionForJDBCDate("ENDTIME <>", value, "endtime");
			return this;
		}

		public Criteria andEndtimeGreaterThan(Date value) {
			addCriterionForJDBCDate("ENDTIME >", value, "endtime");
			return this;
		}

		public Criteria andEndtimeGreaterThanOrEqualTo(Date value) {
			addCriterionForJDBCDate("ENDTIME >=", value, "endtime");
			return this;
		}

		public Criteria andEndtimeLessThan(Date value) {
			addCriterionForJDBCDate("ENDTIME <", value, "endtime");
			return this;
		}

		public Criteria andEndtimeLessThanOrEqualTo(Date value) {
			addCriterionForJDBCDate("ENDTIME <=", value, "endtime");
			return this;
		}

		public Criteria andEndtimeIn(List<Date> values) {
			addCriterionForJDBCDate("ENDTIME in", values, "endtime");
			return this;
		}

		public Criteria andEndtimeNotIn(List<Date> values) {
			addCriterionForJDBCDate("ENDTIME not in", values, "endtime");
			return this;
		}

		public Criteria andEndtimeBetween(Date value1, Date value2) {
			addCriterionForJDBCDate("ENDTIME between", value1, value2,
					"endtime");
			return this;
		}

		public Criteria andEndtimeNotBetween(Date value1, Date value2) {
			addCriterionForJDBCDate("ENDTIME not between", value1, value2,
					"endtime");
			return this;
		}

		public Criteria andOffpersonidIsNull() {
			addCriterion("OFFPERSONID is null");
			return this;
		}

		public Criteria andOffpersonidIsNotNull() {
			addCriterion("OFFPERSONID is not null");
			return this;
		}

		public Criteria andOffpersonidEqualTo(Long value) {
			addCriterion("OFFPERSONID =", value, "offpersonid");
			return this;
		}

		public Criteria andOffpersonidNotEqualTo(Long value) {
			addCriterion("OFFPERSONID <>", value, "offpersonid");
			return this;
		}

		public Criteria andOffpersonidGreaterThan(Long value) {
			addCriterion("OFFPERSONID >", value, "offpersonid");
			return this;
		}

		public Criteria andOffpersonidGreaterThanOrEqualTo(Long value) {
			addCriterion("OFFPERSONID >=", value, "offpersonid");
			return this;
		}

		public Criteria andOffpersonidLessThan(Long value) {
			addCriterion("OFFPERSONID <", value, "offpersonid");
			return this;
		}

		public Criteria andOffpersonidLessThanOrEqualTo(Long value) {
			addCriterion("OFFPERSONID <=", value, "offpersonid");
			return this;
		}

		public Criteria andOffpersonidIn(List<Long> values) {
			addCriterion("OFFPERSONID in", values, "offpersonid");
			return this;
		}

		public Criteria andOffpersonidNotIn(List<Long> values) {
			addCriterion("OFFPERSONID not in", values, "offpersonid");
			return this;
		}

		public Criteria andOffpersonidBetween(Long value1, Long value2) {
			addCriterion("OFFPERSONID between", value1, value2, "offpersonid");
			return this;
		}

		public Criteria andOffpersonidNotBetween(Long value1, Long value2) {
			addCriterion("OFFPERSONID not between", value1, value2,
					"offpersonid");
			return this;
		}

		public Criteria andIscallmessageIsNull() {
			addCriterion("ISCALLMESSAGE is null");
			return this;
		}

		public Criteria andIscallmessageIsNotNull() {
			addCriterion("ISCALLMESSAGE is not null");
			return this;
		}

		public Criteria andIscallmessageEqualTo(Long value) {
			addCriterion("ISCALLMESSAGE =", value, "iscallmessage");
			return this;
		}

		public Criteria andIscallmessageNotEqualTo(Long value) {
			addCriterion("ISCALLMESSAGE <>", value, "iscallmessage");
			return this;
		}

		public Criteria andIscallmessageGreaterThan(Long value) {
			addCriterion("ISCALLMESSAGE >", value, "iscallmessage");
			return this;
		}

		public Criteria andIscallmessageGreaterThanOrEqualTo(Long value) {
			addCriterion("ISCALLMESSAGE >=", value, "iscallmessage");
			return this;
		}

		public Criteria andIscallmessageLessThan(Long value) {
			addCriterion("ISCALLMESSAGE <", value, "iscallmessage");
			return this;
		}

		public Criteria andIscallmessageLessThanOrEqualTo(Long value) {
			addCriterion("ISCALLMESSAGE <=", value, "iscallmessage");
			return this;
		}

		public Criteria andIscallmessageIn(List<Long> values) {
			addCriterion("ISCALLMESSAGE in", values, "iscallmessage");
			return this;
		}

		public Criteria andIscallmessageNotIn(List<Long> values) {
			addCriterion("ISCALLMESSAGE not in", values, "iscallmessage");
			return this;
		}

		public Criteria andIscallmessageBetween(Long value1, Long value2) {
			addCriterion("ISCALLMESSAGE between", value1, value2,
					"iscallmessage");
			return this;
		}

		public Criteria andIscallmessageNotBetween(Long value1, Long value2) {
			addCriterion("ISCALLMESSAGE not between", value1, value2,
					"iscallmessage");
			return this;
		}

		public Criteria andSharedescIsNull() {
			addCriterion("SHAREDESC is null");
			return this;
		}

		public Criteria andSharedescIsNotNull() {
			addCriterion("SHAREDESC is not null");
			return this;
		}

		public Criteria andSharedescEqualTo(String value) {
			addCriterion("SHAREDESC =", value, "sharedesc");
			return this;
		}

		public Criteria andSharedescNotEqualTo(String value) {
			addCriterion("SHAREDESC <>", value, "sharedesc");
			return this;
		}

		public Criteria andSharedescGreaterThan(String value) {
			addCriterion("SHAREDESC >", value, "sharedesc");
			return this;
		}

		public Criteria andSharedescGreaterThanOrEqualTo(String value) {
			addCriterion("SHAREDESC >=", value, "sharedesc");
			return this;
		}

		public Criteria andSharedescLessThan(String value) {
			addCriterion("SHAREDESC <", value, "sharedesc");
			return this;
		}

		public Criteria andSharedescLessThanOrEqualTo(String value) {
			addCriterion("SHAREDESC <=", value, "sharedesc");
			return this;
		}

		public Criteria andSharedescLike(String value) {
			addCriterion("SHAREDESC like", value, "sharedesc");
			return this;
		}

		public Criteria andSharedescNotLike(String value) {
			addCriterion("SHAREDESC not like", value, "sharedesc");
			return this;
		}

		public Criteria andSharedescIn(List<String> values) {
			addCriterion("SHAREDESC in", values, "sharedesc");
			return this;
		}

		public Criteria andSharedescNotIn(List<String> values) {
			addCriterion("SHAREDESC not in", values, "sharedesc");
			return this;
		}

		public Criteria andSharedescBetween(String value1, String value2) {
			addCriterion("SHAREDESC between", value1, value2, "sharedesc");
			return this;
		}

		public Criteria andSharedescNotBetween(String value1, String value2) {
			addCriterion("SHAREDESC not between", value1, value2, "sharedesc");
			return this;
		}

		public Criteria andTaskdescIsNull() {
			addCriterion("TASKDESC is null");
			return this;
		}

		public Criteria andTaskdescIsNotNull() {
			addCriterion("TASKDESC is not null");
			return this;
		}

		public Criteria andTaskdescEqualTo(String value) {
			addCriterion("TASKDESC =", value, "taskdesc");
			return this;
		}

		public Criteria andTaskdescNotEqualTo(String value) {
			addCriterion("TASKDESC <>", value, "taskdesc");
			return this;
		}

		public Criteria andTaskdescGreaterThan(String value) {
			addCriterion("TASKDESC >", value, "taskdesc");
			return this;
		}

		public Criteria andTaskdescGreaterThanOrEqualTo(String value) {
			addCriterion("TASKDESC >=", value, "taskdesc");
			return this;
		}

		public Criteria andTaskdescLessThan(String value) {
			addCriterion("TASKDESC <", value, "taskdesc");
			return this;
		}

		public Criteria andTaskdescLessThanOrEqualTo(String value) {
			addCriterion("TASKDESC <=", value, "taskdesc");
			return this;
		}

		public Criteria andTaskdescLike(String value) {
			addCriterion("TASKDESC like", value, "taskdesc");
			return this;
		}

		public Criteria andTaskdescNotLike(String value) {
			addCriterion("TASKDESC not like", value, "taskdesc");
			return this;
		}

		public Criteria andTaskdescIn(List<String> values) {
			addCriterion("TASKDESC in", values, "taskdesc");
			return this;
		}

		public Criteria andTaskdescNotIn(List<String> values) {
			addCriterion("TASKDESC not in", values, "taskdesc");
			return this;
		}

		public Criteria andTaskdescBetween(String value1, String value2) {
			addCriterion("TASKDESC between", value1, value2, "taskdesc");
			return this;
		}

		public Criteria andTaskdescNotBetween(String value1, String value2) {
			addCriterion("TASKDESC not between", value1, value2, "taskdesc");
			return this;
		}

		public Criteria andParentidIsNull() {
			addCriterion("PARENTID is null");
			return this;
		}

		public Criteria andParentidIsNotNull() {
			addCriterion("PARENTID is not null");
			return this;
		}

		public Criteria andParentidEqualTo(Long value) {
			addCriterion("PARENTID =", value, "parentid");
			return this;
		}

		public Criteria andParentidNotEqualTo(Long value) {
			addCriterion("PARENTID <>", value, "parentid");
			return this;
		}

		public Criteria andParentidGreaterThan(Long value) {
			addCriterion("PARENTID >", value, "parentid");
			return this;
		}

		public Criteria andParentidGreaterThanOrEqualTo(Long value) {
			addCriterion("PARENTID >=", value, "parentid");
			return this;
		}

		public Criteria andParentidLessThan(Long value) {
			addCriterion("PARENTID <", value, "parentid");
			return this;
		}

		public Criteria andParentidLessThanOrEqualTo(Long value) {
			addCriterion("PARENTID <=", value, "parentid");
			return this;
		}

		public Criteria andParentidIn(List<Long> values) {
			addCriterion("PARENTID in", values, "parentid");
			return this;
		}

		public Criteria andParentidNotIn(List<Long> values) {
			addCriterion("PARENTID not in", values, "parentid");
			return this;
		}

		public Criteria andParentidBetween(Long value1, Long value2) {
			addCriterion("PARENTID between", value1, value2, "parentid");
			return this;
		}

		public Criteria andParentidNotBetween(Long value1, Long value2) {
			addCriterion("PARENTID not between", value1, value2, "parentid");
			return this;
		}

		public Criteria andIsvisibleIsNull() {
			addCriterion("ISVISIBLE is null");
			return this;
		}

		public Criteria andIsvisibleIsNotNull() {
			addCriterion("ISVISIBLE is not null");
			return this;
		}

		public Criteria andIsvisibleEqualTo(Long value) {
			addCriterion("ISVISIBLE =", value, "isvisible");
			return this;
		}

		public Criteria andIsvisibleNotEqualTo(Long value) {
			addCriterion("ISVISIBLE <>", value, "isvisible");
			return this;
		}

		public Criteria andIsvisibleGreaterThan(Long value) {
			addCriterion("ISVISIBLE >", value, "isvisible");
			return this;
		}

		public Criteria andIsvisibleGreaterThanOrEqualTo(Long value) {
			addCriterion("ISVISIBLE >=", value, "isvisible");
			return this;
		}

		public Criteria andIsvisibleLessThan(Long value) {
			addCriterion("ISVISIBLE <", value, "isvisible");
			return this;
		}

		public Criteria andIsvisibleLessThanOrEqualTo(Long value) {
			addCriterion("ISVISIBLE <=", value, "isvisible");
			return this;
		}

		public Criteria andIsvisibleIn(List<Long> values) {
			addCriterion("ISVISIBLE in", values, "isvisible");
			return this;
		}

		public Criteria andIsvisibleNotIn(List<Long> values) {
			addCriterion("ISVISIBLE not in", values, "isvisible");
			return this;
		}

		public Criteria andIsvisibleBetween(Long value1, Long value2) {
			addCriterion("ISVISIBLE between", value1, value2, "isvisible");
			return this;
		}

		public Criteria andIsvisibleNotBetween(Long value1, Long value2) {
			addCriterion("ISVISIBLE not between", value1, value2, "isvisible");
			return this;
		}

		public Criteria andIsclosedIsNull() {
			addCriterion("ISCLOSED is null");
			return this;
		}

		public Criteria andIsclosedIsNotNull() {
			addCriterion("ISCLOSED is not null");
			return this;
		}

		public Criteria andIsclosedEqualTo(Long value) {
			addCriterion("ISCLOSED =", value, "isclosed");
			return this;
		}

		public Criteria andIsclosedNotEqualTo(Long value) {
			addCriterion("ISCLOSED <>", value, "isclosed");
			return this;
		}

		public Criteria andIsclosedGreaterThan(Long value) {
			addCriterion("ISCLOSED >", value, "isclosed");
			return this;
		}

		public Criteria andIsclosedGreaterThanOrEqualTo(Long value) {
			addCriterion("ISCLOSED >=", value, "isclosed");
			return this;
		}

		public Criteria andIsclosedLessThan(Long value) {
			addCriterion("ISCLOSED <", value, "isclosed");
			return this;
		}

		public Criteria andIsclosedLessThanOrEqualTo(Long value) {
			addCriterion("ISCLOSED <=", value, "isclosed");
			return this;
		}

		public Criteria andIsclosedIn(List<Long> values) {
			addCriterion("ISCLOSED in", values, "isclosed");
			return this;
		}

		public Criteria andIsclosedNotIn(List<Long> values) {
			addCriterion("ISCLOSED not in", values, "isclosed");
			return this;
		}

		public Criteria andIsclosedBetween(Long value1, Long value2) {
			addCriterion("ISCLOSED between", value1, value2, "isclosed");
			return this;
		}

		public Criteria andIsclosedNotBetween(Long value1, Long value2) {
			addCriterion("ISCLOSED not between", value1, value2, "isclosed");
			return this;
		}

		public Criteria andIsstateIsNull() {
			addCriterion("ISSTATE is null");
			return this;
		}

		public Criteria andIsstateIsNotNull() {
			addCriterion("ISSTATE is not null");
			return this;
		}

		public Criteria andIsstateEqualTo(Long value) {
			addCriterion("ISSTATE =", value, "isstate");
			return this;
		}

		public Criteria andIsstateNotEqualTo(Long value) {
			addCriterion("ISSTATE <>", value, "isstate");
			return this;
		}

		public Criteria andIsstateGreaterThan(Long value) {
			addCriterion("ISSTATE >", value, "isstate");
			return this;
		}

		public Criteria andIsstateGreaterThanOrEqualTo(Long value) {
			addCriterion("ISSTATE >=", value, "isstate");
			return this;
		}

		public Criteria andIsstateLessThan(Long value) {
			addCriterion("ISSTATE <", value, "isstate");
			return this;
		}

		public Criteria andIsstateLessThanOrEqualTo(Long value) {
			addCriterion("ISSTATE <=", value, "isstate");
			return this;
		}

		public Criteria andIsstateIn(List<Long> values) {
			addCriterion("ISSTATE in", values, "isstate");
			return this;
		}

		public Criteria andIsstateNotIn(List<Long> values) {
			addCriterion("ISSTATE not in", values, "isstate");
			return this;
		}

		public Criteria andIsstateBetween(Long value1, Long value2) {
			addCriterion("ISSTATE between", value1, value2, "isstate");
			return this;
		}

		public Criteria andIsstateNotBetween(Long value1, Long value2) {
			addCriterion("ISSTATE not between", value1, value2, "isstate");
			return this;
		}

		public Criteria andProstatusIsNull() {
			addCriterion("PROSTATUS is null");
			return this;
		}

		public Criteria andProstatusIsNotNull() {
			addCriterion("PROSTATUS is not null");
			return this;
		}

		public Criteria andProstatusEqualTo(Long value) {
			addCriterion("PROSTATUS =", value, "prostatus");
			return this;
		}

		public Criteria andProstatusNotEqualTo(Long value) {
			addCriterion("PROSTATUS <>", value, "prostatus");
			return this;
		}

		public Criteria andProstatusGreaterThan(Long value) {
			addCriterion("PROSTATUS >", value, "prostatus");
			return this;
		}

		public Criteria andProstatusGreaterThanOrEqualTo(Long value) {
			addCriterion("PROSTATUS >=", value, "prostatus");
			return this;
		}

		public Criteria andProstatusLessThan(Long value) {
			addCriterion("PROSTATUS <", value, "prostatus");
			return this;
		}

		public Criteria andProstatusLessThanOrEqualTo(Long value) {
			addCriterion("PROSTATUS <=", value, "prostatus");
			return this;
		}

		public Criteria andProstatusIn(List<Long> values) {
			addCriterion("PROSTATUS in", values, "prostatus");
			return this;
		}

		public Criteria andProstatusNotIn(List<Long> values) {
			addCriterion("PROSTATUS not in", values, "prostatus");
			return this;
		}

		public Criteria andProstatusBetween(Long value1, Long value2) {
			addCriterion("PROSTATUS between", value1, value2, "prostatus");
			return this;
		}

		public Criteria andProstatusNotBetween(Long value1, Long value2) {
			addCriterion("PROSTATUS not between", value1, value2, "prostatus");
			return this;
		}

		public Criteria andThemetypeIsNull() {
			addCriterion("THEMETYPE is null");
			return this;
		}

		public Criteria andThemetypeIsNotNull() {
			addCriterion("THEMETYPE is not null");
			return this;
		}

		public Criteria andThemetypeEqualTo(Long value) {
			addCriterion("THEMETYPE =", value, "themetype");
			return this;
		}

		public Criteria andThemetypeNotEqualTo(Long value) {
			addCriterion("THEMETYPE <>", value, "themetype");
			return this;
		}

		public Criteria andThemetypeGreaterThan(Long value) {
			addCriterion("THEMETYPE >", value, "themetype");
			return this;
		}

		public Criteria andThemetypeGreaterThanOrEqualTo(Long value) {
			addCriterion("THEMETYPE >=", value, "themetype");
			return this;
		}

		public Criteria andThemetypeLessThan(Long value) {
			addCriterion("THEMETYPE <", value, "themetype");
			return this;
		}

		public Criteria andThemetypeLessThanOrEqualTo(Long value) {
			addCriterion("THEMETYPE <=", value, "themetype");
			return this;
		}

		public Criteria andThemetypeIn(List<Long> values) {
			addCriterion("THEMETYPE in", values, "themetype");
			return this;
		}

		public Criteria andThemetypeNotIn(List<Long> values) {
			addCriterion("THEMETYPE not in", values, "themetype");
			return this;
		}

		public Criteria andThemetypeBetween(Long value1, Long value2) {
			addCriterion("THEMETYPE between", value1, value2, "themetype");
			return this;
		}

		public Criteria andThemetypeNotBetween(Long value1, Long value2) {
			addCriterion("THEMETYPE not between", value1, value2, "themetype");
			return this;
		}
	}
}