package com.tfs.irp.schedule.entity;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

public class IrpScheduleExample {
    /**
     * This field was generated by Apache iBATIS ibator.
     * This field corresponds to the database table IRP_SCHEDULE
     *
     * @ibatorgenerated Wed Mar 19 09:57:44 CST 2014
     */
    protected String orderByClause;

    /**
     * This field was generated by Apache iBATIS ibator.
     * This field corresponds to the database table IRP_SCHEDULE
     *
     * @ibatorgenerated Wed Mar 19 09:57:44 CST 2014
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_SCHEDULE
     *
     * @ibatorgenerated Wed Mar 19 09:57:44 CST 2014
     */
    public IrpScheduleExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_SCHEDULE
     *
     * @ibatorgenerated Wed Mar 19 09:57:44 CST 2014
     */
    protected IrpScheduleExample(IrpScheduleExample example) {
        this.orderByClause = example.orderByClause;
        this.oredCriteria = example.oredCriteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_SCHEDULE
     *
     * @ibatorgenerated Wed Mar 19 09:57:44 CST 2014
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_SCHEDULE
     *
     * @ibatorgenerated Wed Mar 19 09:57:44 CST 2014
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_SCHEDULE
     *
     * @ibatorgenerated Wed Mar 19 09:57:44 CST 2014
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_SCHEDULE
     *
     * @ibatorgenerated Wed Mar 19 09:57:44 CST 2014
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_SCHEDULE
     *
     * @ibatorgenerated Wed Mar 19 09:57:44 CST 2014
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_SCHEDULE
     *
     * @ibatorgenerated Wed Mar 19 09:57:44 CST 2014
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_SCHEDULE
     *
     * @ibatorgenerated Wed Mar 19 09:57:44 CST 2014
     */
    public void clear() {
        oredCriteria.clear();
    }

    /**
     * This class was generated by Apache iBATIS ibator.
     * This class corresponds to the database table IRP_SCHEDULE
     *
     * @ibatorgenerated Wed Mar 19 09:57:44 CST 2014
     */
    public static class Criteria {
        protected List<String> criteriaWithoutValue;

        protected List<Map<String, Object>> criteriaWithSingleValue;

        protected List<Map<String, Object>> criteriaWithListValue;

        protected List<Map<String, Object>> criteriaWithBetweenValue;

        protected Criteria() {
            super();
            criteriaWithoutValue = new ArrayList<String>();
            criteriaWithSingleValue = new ArrayList<Map<String, Object>>();
            criteriaWithListValue = new ArrayList<Map<String, Object>>();
            criteriaWithBetweenValue = new ArrayList<Map<String, Object>>();
        }

        public boolean isValid() {
            return criteriaWithoutValue.size() > 0
                || criteriaWithSingleValue.size() > 0
                || criteriaWithListValue.size() > 0
                || criteriaWithBetweenValue.size() > 0;
        }

        public List<String> getCriteriaWithoutValue() {
            return criteriaWithoutValue;
        }

        public List<Map<String, Object>> getCriteriaWithSingleValue() {
            return criteriaWithSingleValue;
        }

        public List<Map<String, Object>> getCriteriaWithListValue() {
            return criteriaWithListValue;
        }

        public List<Map<String, Object>> getCriteriaWithBetweenValue() {
            return criteriaWithBetweenValue;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteriaWithoutValue.add(condition);
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("condition", condition);
            map.put("value", value);
            criteriaWithSingleValue.add(map);
        }

        protected void addCriterion(String condition, List<? extends Object> values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("condition", condition);
            map.put("values", values);
            criteriaWithListValue.add(map);
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            List<Object> list = new ArrayList<Object>();
            list.add(value1);
            list.add(value2);
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("condition", condition);
            map.put("values", list);
            criteriaWithBetweenValue.add(map);
        }

        protected void addCriterionForJDBCDate(String condition, Date value, String property) {
            addCriterion(condition, new java.sql.Date(value.getTime()), property);
        }

        protected void addCriterionForJDBCDate(String condition, List<Date> values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            List<java.sql.Date> dateList = new ArrayList<java.sql.Date>();
            Iterator<Date> iter = values.iterator();
            while (iter.hasNext()) {
                dateList.add(new java.sql.Date(iter.next().getTime()));
            }
            addCriterion(condition, dateList, property);
        }

        protected void addCriterionForJDBCDate(String condition, Date value1, Date value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            addCriterion(condition, new java.sql.Date(value1.getTime()), new java.sql.Date(value2.getTime()), property);
        }

        public Criteria andSchidIsNull() {
            addCriterion("SCHID is null");
            return this;
        }

        public Criteria andSchidIsNotNull() {
            addCriterion("SCHID is not null");
            return this;
        }

        public Criteria andSchidEqualTo(Long value) {
            addCriterion("SCHID =", value, "schid");
            return this;
        }

        public Criteria andSchidNotEqualTo(Long value) {
            addCriterion("SCHID <>", value, "schid");
            return this;
        }

        public Criteria andSchidGreaterThan(Long value) {
            addCriterion("SCHID >", value, "schid");
            return this;
        }

        public Criteria andSchidGreaterThanOrEqualTo(Long value) {
            addCriterion("SCHID >=", value, "schid");
            return this;
        }

        public Criteria andSchidLessThan(Long value) {
            addCriterion("SCHID <", value, "schid");
            return this;
        }

        public Criteria andSchidLessThanOrEqualTo(Long value) {
            addCriterion("SCHID <=", value, "schid");
            return this;
        }

        public Criteria andSchidIn(List<Long> values) {
            addCriterion("SCHID in", values, "schid");
            return this;
        }

        public Criteria andSchidNotIn(List<Long> values) {
            addCriterion("SCHID not in", values, "schid");
            return this;
        }

        public Criteria andSchidBetween(Long value1, Long value2) {
            addCriterion("SCHID between", value1, value2, "schid");
            return this;
        }

        public Criteria andSchidNotBetween(Long value1, Long value2) {
            addCriterion("SCHID not between", value1, value2, "schid");
            return this;
        }

        public Criteria andSchnameIsNull() {
            addCriterion("SCHNAME is null");
            return this;
        }

        public Criteria andSchnameIsNotNull() {
            addCriterion("SCHNAME is not null");
            return this;
        }

        public Criteria andSchnameEqualTo(String value) {
            addCriterion("SCHNAME =", value, "schname");
            return this;
        }

        public Criteria andSchnameNotEqualTo(String value) {
            addCriterion("SCHNAME <>", value, "schname");
            return this;
        }

        public Criteria andSchnameGreaterThan(String value) {
            addCriterion("SCHNAME >", value, "schname");
            return this;
        }

        public Criteria andSchnameGreaterThanOrEqualTo(String value) {
            addCriterion("SCHNAME >=", value, "schname");
            return this;
        }

        public Criteria andSchnameLessThan(String value) {
            addCriterion("SCHNAME <", value, "schname");
            return this;
        }

        public Criteria andSchnameLessThanOrEqualTo(String value) {
            addCriterion("SCHNAME <=", value, "schname");
            return this;
        }

        public Criteria andSchnameLike(String value) {
            addCriterion("SCHNAME like", value, "schname");
            return this;
        }

        public Criteria andSchnameNotLike(String value) {
            addCriterion("SCHNAME not like", value, "schname");
            return this;
        }

        public Criteria andSchnameIn(List<String> values) {
            addCriterion("SCHNAME in", values, "schname");
            return this;
        }

        public Criteria andSchnameNotIn(List<String> values) {
            addCriterion("SCHNAME not in", values, "schname");
            return this;
        }

        public Criteria andSchnameBetween(String value1, String value2) {
            addCriterion("SCHNAME between", value1, value2, "schname");
            return this;
        }

        public Criteria andSchnameNotBetween(String value1, String value2) {
            addCriterion("SCHNAME not between", value1, value2, "schname");
            return this;
        }

        public Criteria andSchbakIsNull() {
            addCriterion("SCHBAK is null");
            return this;
        }

        public Criteria andSchbakIsNotNull() {
            addCriterion("SCHBAK is not null");
            return this;
        }

        public Criteria andSchbakEqualTo(String value) {
            addCriterion("SCHBAK =", value, "schbak");
            return this;
        }

        public Criteria andSchbakNotEqualTo(String value) {
            addCriterion("SCHBAK <>", value, "schbak");
            return this;
        }

        public Criteria andSchbakGreaterThan(String value) {
            addCriterion("SCHBAK >", value, "schbak");
            return this;
        }

        public Criteria andSchbakGreaterThanOrEqualTo(String value) {
            addCriterion("SCHBAK >=", value, "schbak");
            return this;
        }

        public Criteria andSchbakLessThan(String value) {
            addCriterion("SCHBAK <", value, "schbak");
            return this;
        }

        public Criteria andSchbakLessThanOrEqualTo(String value) {
            addCriterion("SCHBAK <=", value, "schbak");
            return this;
        }

        public Criteria andSchbakLike(String value) {
            addCriterion("SCHBAK like", value, "schbak");
            return this;
        }

        public Criteria andSchbakNotLike(String value) {
            addCriterion("SCHBAK not like", value, "schbak");
            return this;
        }

        public Criteria andSchbakIn(List<String> values) {
            addCriterion("SCHBAK in", values, "schbak");
            return this;
        }

        public Criteria andSchbakNotIn(List<String> values) {
            addCriterion("SCHBAK not in", values, "schbak");
            return this;
        }

        public Criteria andSchbakBetween(String value1, String value2) {
            addCriterion("SCHBAK between", value1, value2, "schbak");
            return this;
        }

        public Criteria andSchbakNotBetween(String value1, String value2) {
            addCriterion("SCHBAK not between", value1, value2, "schbak");
            return this;
        }

        public Criteria andStarttimeIsNull() {
            addCriterion("STARTTIME is null");
            return this;
        }

        public Criteria andStarttimeIsNotNull() {
            addCriterion("STARTTIME is not null");
            return this;
        }

        public Criteria andStarttimeEqualTo(Date value) {
            addCriterionForJDBCDate("STARTTIME =", value, "starttime");
            return this;
        }

        public Criteria andStarttimeNotEqualTo(Date value) {
            addCriterionForJDBCDate("STARTTIME <>", value, "starttime");
            return this;
        }

        public Criteria andStarttimeGreaterThan(Date value) {
            addCriterionForJDBCDate("STARTTIME >", value, "starttime");
            return this;
        }

        public Criteria andStarttimeGreaterThanOrEqualTo(Date value) {
            addCriterionForJDBCDate("STARTTIME >=", value, "starttime");
            return this;
        }

        public Criteria andStarttimeLessThan(Date value) {
            addCriterionForJDBCDate("STARTTIME <", value, "starttime");
            return this;
        }

        public Criteria andStarttimeLessThanOrEqualTo(Date value) {
            addCriterionForJDBCDate("STARTTIME <=", value, "starttime");
            return this;
        }

        public Criteria andStarttimeIn(List<Date> values) {
            addCriterionForJDBCDate("STARTTIME in", values, "starttime");
            return this;
        }

        public Criteria andStarttimeNotIn(List<Date> values) {
            addCriterionForJDBCDate("STARTTIME not in", values, "starttime");
            return this;
        }

        public Criteria andStarttimeBetween(Date value1, Date value2) {
            addCriterionForJDBCDate("STARTTIME between", value1, value2, "starttime");
            return this;
        }

        public Criteria andStarttimeNotBetween(Date value1, Date value2) {
            addCriterionForJDBCDate("STARTTIME not between", value1, value2, "starttime");
            return this;
        }

        public Criteria andEndtimeIsNull() {
            addCriterion("ENDTIME is null");
            return this;
        }

        public Criteria andEndtimeIsNotNull() {
            addCriterion("ENDTIME is not null");
            return this;
        }

        public Criteria andEndtimeEqualTo(Date value) {
            addCriterionForJDBCDate("ENDTIME =", value, "endtime");
            return this;
        }

        public Criteria andEndtimeNotEqualTo(Date value) {
            addCriterionForJDBCDate("ENDTIME <>", value, "endtime");
            return this;
        }

        public Criteria andEndtimeGreaterThan(Date value) {
            addCriterionForJDBCDate("ENDTIME >", value, "endtime");
            return this;
        }

        public Criteria andEndtimeGreaterThanOrEqualTo(Date value) {
            addCriterionForJDBCDate("ENDTIME >=", value, "endtime");
            return this;
        }

        public Criteria andEndtimeLessThan(Date value) {
            addCriterionForJDBCDate("ENDTIME <", value, "endtime");
            return this;
        }

        public Criteria andEndtimeLessThanOrEqualTo(Date value) {
            addCriterionForJDBCDate("ENDTIME <=", value, "endtime");
            return this;
        }

        public Criteria andEndtimeIn(List<Date> values) {
            addCriterionForJDBCDate("ENDTIME in", values, "endtime");
            return this;
        }

        public Criteria andEndtimeNotIn(List<Date> values) {
            addCriterionForJDBCDate("ENDTIME not in", values, "endtime");
            return this;
        }

        public Criteria andEndtimeBetween(Date value1, Date value2) {
            addCriterionForJDBCDate("ENDTIME between", value1, value2, "endtime");
            return this;
        }

        public Criteria andEndtimeNotBetween(Date value1, Date value2) {
            addCriterionForJDBCDate("ENDTIME not between", value1, value2, "endtime");
            return this;
        }

        public Criteria andPlaceIsNull() {
            addCriterion("PLACE is null");
            return this;
        }

        public Criteria andPlaceIsNotNull() {
            addCriterion("PLACE is not null");
            return this;
        }

        public Criteria andPlaceEqualTo(String value) {
            addCriterion("PLACE =", value, "place");
            return this;
        }

        public Criteria andPlaceNotEqualTo(String value) {
            addCriterion("PLACE <>", value, "place");
            return this;
        }

        public Criteria andPlaceGreaterThan(String value) {
            addCriterion("PLACE >", value, "place");
            return this;
        }

        public Criteria andPlaceGreaterThanOrEqualTo(String value) {
            addCriterion("PLACE >=", value, "place");
            return this;
        }

        public Criteria andPlaceLessThan(String value) {
            addCriterion("PLACE <", value, "place");
            return this;
        }

        public Criteria andPlaceLessThanOrEqualTo(String value) {
            addCriterion("PLACE <=", value, "place");
            return this;
        }

        public Criteria andPlaceLike(String value) {
            addCriterion("PLACE like", value, "place");
            return this;
        }

        public Criteria andPlaceNotLike(String value) {
            addCriterion("PLACE not like", value, "place");
            return this;
        }

        public Criteria andPlaceIn(List<String> values) {
            addCriterion("PLACE in", values, "place");
            return this;
        }

        public Criteria andPlaceNotIn(List<String> values) {
            addCriterion("PLACE not in", values, "place");
            return this;
        }

        public Criteria andPlaceBetween(String value1, String value2) {
            addCriterion("PLACE between", value1, value2, "place");
            return this;
        }

        public Criteria andPlaceNotBetween(String value1, String value2) {
            addCriterion("PLACE not between", value1, value2, "place");
            return this;
        }

        public Criteria andCruseidIsNull() {
            addCriterion("CRUSEID is null");
            return this;
        }

        public Criteria andCruseidIsNotNull() {
            addCriterion("CRUSEID is not null");
            return this;
        }

        public Criteria andCruseidEqualTo(Long value) {
            addCriterion("CRUSEID =", value, "cruseid");
            return this;
        }

        public Criteria andCruseidNotEqualTo(Long value) {
            addCriterion("CRUSEID <>", value, "cruseid");
            return this;
        }

        public Criteria andCruseidGreaterThan(Long value) {
            addCriterion("CRUSEID >", value, "cruseid");
            return this;
        }

        public Criteria andCruseidGreaterThanOrEqualTo(Long value) {
            addCriterion("CRUSEID >=", value, "cruseid");
            return this;
        }

        public Criteria andCruseidLessThan(Long value) {
            addCriterion("CRUSEID <", value, "cruseid");
            return this;
        }

        public Criteria andCruseidLessThanOrEqualTo(Long value) {
            addCriterion("CRUSEID <=", value, "cruseid");
            return this;
        }

        public Criteria andCruseidIn(List<Long> values) {
            addCriterion("CRUSEID in", values, "cruseid");
            return this;
        }

        public Criteria andCruseidNotIn(List<Long> values) {
            addCriterion("CRUSEID not in", values, "cruseid");
            return this;
        }

        public Criteria andCruseidBetween(Long value1, Long value2) {
            addCriterion("CRUSEID between", value1, value2, "cruseid");
            return this;
        }

        public Criteria andCruseidNotBetween(Long value1, Long value2) {
            addCriterion("CRUSEID not between", value1, value2, "cruseid");
            return this;
        }

        public Criteria andCrtimeIsNull() {
            addCriterion("CRTIME is null");
            return this;
        }

        public Criteria andCrtimeIsNotNull() {
            addCriterion("CRTIME is not null");
            return this;
        }

        public Criteria andCrtimeEqualTo(Date value) {
            addCriterionForJDBCDate("CRTIME =", value, "crtime");
            return this;
        }

        public Criteria andCrtimeNotEqualTo(Date value) {
            addCriterionForJDBCDate("CRTIME <>", value, "crtime");
            return this;
        }

        public Criteria andCrtimeGreaterThan(Date value) {
            addCriterionForJDBCDate("CRTIME >", value, "crtime");
            return this;
        }

        public Criteria andCrtimeGreaterThanOrEqualTo(Date value) {
            addCriterionForJDBCDate("CRTIME >=", value, "crtime");
            return this;
        }

        public Criteria andCrtimeLessThan(Date value) {
            addCriterionForJDBCDate("CRTIME <", value, "crtime");
            return this;
        }

        public Criteria andCrtimeLessThanOrEqualTo(Date value) {
            addCriterionForJDBCDate("CRTIME <=", value, "crtime");
            return this;
        }

        public Criteria andCrtimeIn(List<Date> values) {
            addCriterionForJDBCDate("CRTIME in", values, "crtime");
            return this;
        }

        public Criteria andCrtimeNotIn(List<Date> values) {
            addCriterionForJDBCDate("CRTIME not in", values, "crtime");
            return this;
        }

        public Criteria andCrtimeBetween(Date value1, Date value2) {
            addCriterionForJDBCDate("CRTIME between", value1, value2, "crtime");
            return this;
        }

        public Criteria andCrtimeNotBetween(Date value1, Date value2) {
            addCriterionForJDBCDate("CRTIME not between", value1, value2, "crtime");
            return this;
        }

        public Criteria andRemindIsNull() {
            addCriterion("REMIND is null");
            return this;
        }

        public Criteria andRemindIsNotNull() {
            addCriterion("REMIND is not null");
            return this;
        }

        public Criteria andRemindEqualTo(Integer value) {
            addCriterion("REMIND =", value, "remind");
            return this;
        }

        public Criteria andRemindNotEqualTo(Integer value) {
            addCriterion("REMIND <>", value, "remind");
            return this;
        }

        public Criteria andRemindGreaterThan(Integer value) {
            addCriterion("REMIND >", value, "remind");
            return this;
        }

        public Criteria andRemindGreaterThanOrEqualTo(Integer value) {
            addCriterion("REMIND >=", value, "remind");
            return this;
        }

        public Criteria andRemindLessThan(Integer value) {
            addCriterion("REMIND <", value, "remind");
            return this;
        }

        public Criteria andRemindLessThanOrEqualTo(Integer value) {
            addCriterion("REMIND <=", value, "remind");
            return this;
        }

        public Criteria andRemindIn(List<Integer> values) {
            addCriterion("REMIND in", values, "remind");
            return this;
        }

        public Criteria andRemindNotIn(List<Integer> values) {
            addCriterion("REMIND not in", values, "remind");
            return this;
        }

        public Criteria andRemindBetween(Integer value1, Integer value2) {
            addCriterion("REMIND between", value1, value2, "remind");
            return this;
        }

        public Criteria andRemindNotBetween(Integer value1, Integer value2) {
            addCriterion("REMIND not between", value1, value2, "remind");
            return this;
        }

        public Criteria andLookusersIsNull() {
            addCriterion("LOOKUSERS is null");
            return this;
        }

        public Criteria andLookusersIsNotNull() {
            addCriterion("LOOKUSERS is not null");
            return this;
        }

        public Criteria andLookusersEqualTo(String value) {
            addCriterion("LOOKUSERS =", value, "lookusers");
            return this;
        }

        public Criteria andLookusersNotEqualTo(String value) {
            addCriterion("LOOKUSERS <>", value, "lookusers");
            return this;
        }

        public Criteria andLookusersGreaterThan(String value) {
            addCriterion("LOOKUSERS >", value, "lookusers");
            return this;
        }

        public Criteria andLookusersGreaterThanOrEqualTo(String value) {
            addCriterion("LOOKUSERS >=", value, "lookusers");
            return this;
        }

        public Criteria andLookusersLessThan(String value) {
            addCriterion("LOOKUSERS <", value, "lookusers");
            return this;
        }

        public Criteria andLookusersLessThanOrEqualTo(String value) {
            addCriterion("LOOKUSERS <=", value, "lookusers");
            return this;
        }

        public Criteria andLookusersLike(String value) {
            addCriterion("LOOKUSERS like", value, "lookusers");
            return this;
        }

        public Criteria andLookusersNotLike(String value) {
            addCriterion("LOOKUSERS not like", value, "lookusers");
            return this;
        }

        public Criteria andLookusersIn(List<String> values) {
            addCriterion("LOOKUSERS in", values, "lookusers");
            return this;
        }

        public Criteria andLookusersNotIn(List<String> values) {
            addCriterion("LOOKUSERS not in", values, "lookusers");
            return this;
        }

        public Criteria andLookusersBetween(String value1, String value2) {
            addCriterion("LOOKUSERS between", value1, value2, "lookusers");
            return this;
        }

        public Criteria andLookusersNotBetween(String value1, String value2) {
            addCriterion("LOOKUSERS not between", value1, value2, "lookusers");
            return this;
        }
    }
}