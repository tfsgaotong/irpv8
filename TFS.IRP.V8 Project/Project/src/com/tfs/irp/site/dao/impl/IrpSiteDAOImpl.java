package com.tfs.irp.site.dao.impl;

import com.tfs.irp.site.dao.IrpSiteDAO;
import com.tfs.irp.site.entity.IrpSite;
import com.tfs.irp.site.entity.IrpSiteExample;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.List;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;

public class IrpSiteDAOImpl extends SqlMapClientDaoSupport  implements IrpSiteDAO {
    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_SITE
     *
     * @ibatorgenerated Thu Nov 07 11:32:39 CST 2013
     */
    public int countByExample(IrpSiteExample example) throws SQLException {
        Integer count = (Integer)  getSqlMapClientTemplate().queryForObject("IRP_SITE.ibatorgenerated_countByExample", example);
        return count;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_SITE
     *
     * @ibatorgenerated Thu Nov 07 11:32:39 CST 2013
     */
    public int deleteByExample(IrpSiteExample example) throws SQLException {
        int rows = getSqlMapClientTemplate().delete("IRP_SITE.ibatorgenerated_deleteByExample", example);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_SITE
     *
     * @ibatorgenerated Thu Nov 07 11:32:39 CST 2013
     */
    public int deleteByPrimaryKey(Long siteid) throws SQLException {
        IrpSite key = new IrpSite();
        key.setSiteid(siteid);
        int rows = getSqlMapClientTemplate().delete("IRP_SITE.ibatorgenerated_deleteByPrimaryKey", key);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_SITE
     *
     * @ibatorgenerated Thu Nov 07 11:32:39 CST 2013
     */
    public void insert(IrpSite record) throws SQLException {
        getSqlMapClientTemplate().insert("IRP_SITE.ibatorgenerated_insert", record);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_SITE
     *
     * @ibatorgenerated Thu Nov 07 11:32:39 CST 2013
     */
    public void insertSelective(IrpSite record) throws SQLException {
        getSqlMapClientTemplate().insert("IRP_SITE.ibatorgenerated_insertSelective", record);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_SITE
     *
     * @ibatorgenerated Thu Nov 07 11:32:39 CST 2013
     */
    @SuppressWarnings("unchecked")
    public List<IrpSite> selectByExample(IrpSiteExample example) throws SQLException {
        List<IrpSite> list = getSqlMapClientTemplate().queryForList("IRP_SITE.ibatorgenerated_selectByExample", example);
        return list;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_SITE
     *
     * @ibatorgenerated Thu Nov 07 11:32:39 CST 2013
     */
    public IrpSite selectByPrimaryKey(Long siteid) throws SQLException {
        IrpSite key = new IrpSite();
        key.setSiteid(siteid);
        IrpSite record = (IrpSite) getSqlMapClientTemplate().queryForObject("IRP_SITE.ibatorgenerated_selectByPrimaryKey", key);
        return record;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_SITE
     *
     * @ibatorgenerated Thu Nov 07 11:32:39 CST 2013
     */
    public int updateByExampleSelective(IrpSite record, IrpSiteExample example) throws SQLException {
        UpdateByExampleParms parms = new UpdateByExampleParms(record, example);
        int rows = getSqlMapClientTemplate().update("IRP_SITE.ibatorgenerated_updateByExampleSelective", parms);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_SITE
     *
     * @ibatorgenerated Thu Nov 07 11:32:39 CST 2013
     */
    public int updateByExample(IrpSite record, IrpSiteExample example) throws SQLException {
        UpdateByExampleParms parms = new UpdateByExampleParms(record, example);
        int rows = getSqlMapClientTemplate().update("IRP_SITE.ibatorgenerated_updateByExample", parms);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_SITE
     *
     * @ibatorgenerated Thu Nov 07 11:32:39 CST 2013
     */
    public int updateByPrimaryKeySelective(IrpSite record) throws SQLException {
        int rows = getSqlMapClientTemplate().update("IRP_SITE.ibatorgenerated_updateByPrimaryKeySelective", record);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_SITE
     *
     * @ibatorgenerated Thu Nov 07 11:32:39 CST 2013
     */
    public int updateByPrimaryKey(IrpSite record) throws SQLException {
        int rows = getSqlMapClientTemplate().update("IRP_SITE.ibatorgenerated_updateByPrimaryKey", record);
        return rows;
    }

    /**
     * This class was generated by Apache iBATIS ibator.
     * This class corresponds to the database table IRP_SITE
     *
     * @ibatorgenerated Thu Nov 07 11:32:39 CST 2013
     */
    private static class UpdateByExampleParms extends IrpSiteExample {
        private Object record;

        public UpdateByExampleParms(Object record, IrpSiteExample example) {
            super(example);
            this.record = record;
        }

        public Object getRecord() {
            return record;
        }
    }

    @Override
    public List<IrpSite> allSiteName(Long status)throws SQLException { 
    	List<IrpSite> lists=getSqlMapClientTemplate().queryForList("IRP_SITE.allSiteName",status);
    	return lists;
    }
	@Override
    public List<IrpSite> allSiteName(Long status,Long _siteid)throws SQLException { 
		HashMap< String,Long> map=new HashMap<String, Long>();
		map.put("status",status);
		map.put("siteid",_siteid);
    	List<IrpSite> lists=getSqlMapClientTemplate().queryForList("IRP_SITE.allSiteNametoUpdate",map);
    	return lists;
    }

	 @Override
	    public IrpSite siteInfo(Long siteied)throws SQLException {
	      IrpSite irpSite =(IrpSite)getSqlMapClientTemplate().queryForObject("IRP_SITE.siteInfo", siteied);
	      return irpSite;
	    }

	  @Override
	    public String findSitename(Long siteid) throws SQLException { 
	    	  String name =(String)getSqlMapClientTemplate().queryForObject("IRP_SITE.sitename", siteid);
	          return name;
	    }
	    @Override
	    public List<Long> findSiteOrder(Long _siteorder) throws SQLException {
	    	List<Long> list=getSqlMapClientTemplate().queryForList("IRP_SITE.siteorder", _siteorder);
	    	return list;
	    }
	    @Override
	    public int updateSiteOrderToAddSite(Long _siteorder) throws SQLException {
	    	int nCount=0;
	    	nCount=getSqlMapClientTemplate().update("IRP_SITE.addsiteorder",_siteorder);
	    	return nCount;
	    } 
	    @Override
	    public Long selectSiteOrderBySiteId(Long _siteid) throws SQLException {
	    	return (Long)getSqlMapClientTemplate().queryForObject("IRP_SITE.selectSiteOrderBySiteId",_siteid);
	    }
	    @Override
	    public List<Long> selectSiteOrderBetweenBAndC(HashMap<String, Long> map) throws SQLException {
	    	List<Long> list=getSqlMapClientTemplate().queryForList("IRP_SITE.selectSiteOrderBetweenBAndC", map);
	    	return list;
	    }
	    @Override
	    public void updateSiteOrderJiaBetweenBAndC(HashMap<String, Long> map)
	    		throws SQLException {
	    	  getSqlMapClientTemplate().update("IRP_SITE.updateSiteOrderJiaBetweenBAndC", map); 
	    }
	    @Override
	    public void updateSiteOrderJianBetweenBAndC(HashMap<String, Long> map)
	    		throws SQLException {
	    	// TODO Auto-generated method stub
	    	getSqlMapClientTemplate().update("IRP_SITE.updateSiteOrderJianBetweenBAndC", map);
	    }
}