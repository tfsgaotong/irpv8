package com.tfs.irp.user.dao.impl;
 
import com.tfs.irp.category.entity.IrpCategory;
import com.tfs.irp.user.dao.IrpUserDAO;
import com.tfs.irp.user.entity.IrpUser;
import com.tfs.irp.user.entity.IrpUserExample;
import com.tfs.irp.user.entity.IrpUserValue;
import com.tfs.irp.util.PageUtil;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;

public class IrpUserDAOImpl extends SqlMapClientDaoSupport implements IrpUserDAO {
    
    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_USER
     *
     * @ibatorgenerated Sat Sep 10 15:23:13 CST 2016
     */
    public int countByExample(IrpUserExample example) throws SQLException {
        Integer count = (Integer)  getSqlMapClientTemplate().queryForObject("IRP_USER.ibatorgenerated_countByExample", example);
        return count;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_USER
     *
     * @ibatorgenerated Sat Sep 10 15:23:13 CST 2016
     */
    public int deleteByExample(IrpUserExample example) throws SQLException {
        int rows = getSqlMapClientTemplate().delete("IRP_USER.ibatorgenerated_deleteByExample", example);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_USER
     *
     * @ibatorgenerated Sat Sep 10 15:23:13 CST 2016
     */
    public int deleteByPrimaryKey(Long userid) throws SQLException {
        IrpUser key = new IrpUser();
        key.setUserid(userid);
        int rows = getSqlMapClientTemplate().delete("IRP_USER.ibatorgenerated_deleteByPrimaryKey", key);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_USER
     *
     * @ibatorgenerated Sat Sep 10 15:23:13 CST 2016
     */
    public void insert(IrpUser record) throws SQLException {
        getSqlMapClientTemplate().insert("IRP_USER.ibatorgenerated_insert", record);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_USER
     *
     * @ibatorgenerated Sat Sep 10 15:23:13 CST 2016
     */
    public void insertSelective(IrpUser record) throws SQLException {
        getSqlMapClientTemplate().insert("IRP_USER.ibatorgenerated_insertSelective", record);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_USER
     *
     * @ibatorgenerated Sat Sep 10 15:23:13 CST 2016
     */
    @SuppressWarnings("unchecked")
    public List<IrpUser> selectByExample(IrpUserExample example) throws SQLException {
        List<IrpUser> list = getSqlMapClientTemplate().queryForList("IRP_USER.ibatorgenerated_selectByExample", example);
        return list;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_USER
     *
     * @ibatorgenerated Sat Sep 10 15:23:13 CST 2016
     */
    public IrpUser selectByPrimaryKey(Long userid) throws SQLException {
        IrpUser key = new IrpUser();
        key.setUserid(userid);
        IrpUser record = (IrpUser) getSqlMapClientTemplate().queryForObject("IRP_USER.ibatorgenerated_selectByPrimaryKey", key);
        return record;
    }
    public IrpUserValue selectByPrimaryKey1(Long userid) throws SQLException {
    	IrpUserValue key = new IrpUserValue();
        key.setUserid(userid);
        IrpUserValue record = (IrpUserValue) getSqlMapClientTemplate().queryForObject("IRP_USER.ibatorgenerated_selectByPrimaryKey", key);
        return record;
    }
    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_USER
     *
     * @ibatorgenerated Sat Sep 10 15:23:13 CST 2016
     */
    public int updateByExampleSelective(IrpUser record, IrpUserExample example) throws SQLException {
        UpdateByExampleParms parms = new UpdateByExampleParms(record, example);
        int rows = getSqlMapClientTemplate().update("IRP_USER.ibatorgenerated_updateByExampleSelective", parms);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_USER
     *
     * @ibatorgenerated Sat Sep 10 15:23:13 CST 2016
     */
    public int updateByExample(IrpUser record, IrpUserExample example) throws SQLException {
        UpdateByExampleParms parms = new UpdateByExampleParms(record, example);
        int rows = getSqlMapClientTemplate().update("IRP_USER.ibatorgenerated_updateByExample", parms);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_USER
     *
     * @ibatorgenerated Sat Sep 10 15:23:13 CST 2016
     */
    public int updateByPrimaryKeySelective(IrpUser record) throws SQLException {
        int rows = getSqlMapClientTemplate().update("IRP_USER.ibatorgenerated_updateByPrimaryKeySelective", record);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_USER
     *
     * @ibatorgenerated Sat Sep 10 15:23:13 CST 2016
     */
    public int updateByPrimaryKey(IrpUser record) throws SQLException {
        int rows = getSqlMapClientTemplate().update("IRP_USER.ibatorgenerated_updateByPrimaryKey", record);
        return rows;
    }

    /**
     * This class was generated by Apache iBATIS ibator.
     * This class corresponds to the database table IRP_USER
     *
     * @ibatorgenerated Sat Sep 10 15:23:13 CST 2016
     */
    private static class UpdateByExampleParms extends IrpUserExample {
        private Object record;

        public UpdateByExampleParms(Object record, IrpUserExample example) {
            super(example);
            this.record = record;
        }

        public Object getRecord() {
            return record;
        }
    }
    

	/**
	 * 根据用户ID集合更新用户状态
	 * 
	 * @param param
	 * @return 更新的行数
	 * @throws SQLException
	 */
	@Override
	public int updateStatusByUserids(Map<String, Object> _mParam)
			throws SQLException {
		int rows = getSqlMapClientTemplate().update(
				"IRP_USER.updateStatusByUserids", _mParam);
		return rows;

	}

	@Override
	public int updatePassWordByUserids(Map<String, Object> _mParam)
			throws SQLException {
		int rows = getSqlMapClientTemplate().update(
				"IRP_USER.updatePassWordByUserids", _mParam);
		return rows;
	}

	@Override
	public List findUserByNickNameTrueName(String _info, Long _userid,
			PageUtil pageUtil) throws SQLException {
		// TODO Auto-generated method stub
		Map map = new HashMap();
		map.put("nickname", "%" + _info + "%");
		map.put("truename", "%" + _info + "%");
		map.put("username", "%" + _info + "%");
		map.put("userid", _userid);
		List list = this.getSqlMapClientTemplate().queryForList(
				"IRP_USER.selectUserByNickNameTrueName", map,
				pageUtil.getPageIndex(), pageUtil.getPageSize());
		return list;
	}
	
	public List findUserByNickNameTrueNameUserNameDate(Map map,PageUtil pageUtil){
		List list = new ArrayList();
		if(pageUtil!=null){
			list = this.getSqlMapClientTemplate().queryForList("IRP_USER.selectUserByNickNameTrueNameUserNameDate",map,pageUtil.getPageIndex(),pageUtil.getPageSize());
		}else{
			list = this.getSqlMapClientTemplate().queryForList("IRP_USER.selectUserByNickNameTrueNameUserNameDate",map);
		}
		
		return list;
	}

	@Override
	public List findUserByNickNameTrueName(String _info, Long _userid)
			throws SQLException {
		// TODO Auto-generated method stub
		Map map = new HashMap();
		map.put("nickname", "%" + _info + "%");
		map.put("truename", "%" + _info + "%");
		map.put("username", "%" + _info + "%");
		map.put("userid", _userid);
		List list = this.getSqlMapClientTemplate().queryForList(
				"IRP_USER.selectUserByNickNameTrueName", map);
		return list;
	}

	@Override
	public String findUsernameByNickNameTrueNameUsername(String _name)
			throws SQLException {
		String username = "";
		Map map = new HashMap();
		map.put("name", _name);
		username = (String) this.getSqlMapClientTemplate().queryForObject(
				"IRP_USER.selectUserByNickNameOrTrueNameOrUsername", map);
		return username;
	}

	@Override
	public List findUsernamebyquestionid(Integer _status, Long _docid,
			Integer _statusmost, Integer _mosttype) {
		// TODO Auto-generated method stub
		List list = null;
		Map map = new HashMap();
		map.put("status", _status);
		map.put("docid", _docid);
		map.put("statusmost", _statusmost);
		map.put("mosttype", _mosttype);
		list = this.getSqlMapClientTemplate().queryForList(
				"IRP_USER.ibatorgenerated_selectUsernamebyquestionid", map);
		return list;
	}

	@Override
	public List findAllUserid(Integer _status) {
		// TODO Auto-generated method stub
		List<Long> list = null;
		Map map = new HashMap();
		map.put("status", _status);

		list = this.getSqlMapClientTemplate().queryForList(
				"IRP_USER.ibatorgenerated_findalluseridbystatusisnormal", map);
		return list;
	}
	@Override
	public List findAllUseridTask(Integer _status) {
		// TODO Auto-generated method stub
		List list = null;
		Map map = new HashMap();
		map.put("status", _status);

		list = this.getSqlMapClientTemplate().queryForList(
				"IRP_USER.ibatorgenerated_findalluseridbystatusisnormaltask", map);
		return list;
	}

	@Override
	public List<Long> findAllUseridSpecialType(Integer _status,
			Integer _specialtype) {
		// TODO Auto-generated method stub
		List<Long> list = new ArrayList();
		Map map = new HashMap();
		map.put("status", _status);
		map.put("specialtype", _specialtype);
		List speciallist = this.getSqlMapClientTemplate().queryForList(
				"IRP_USER.ibatorgenerated_findalluseridbystatusspecial", map);
		if (speciallist.size() > 0) {
			for (int i = 0; i < speciallist.size(); i++) {
				Map mapcol = (Map) speciallist.get(i);
				Object obj = mapcol.get("USERID");
				if (obj != null) {
					list.add(Long.valueOf(obj.toString()));
				}
			}
		}
		return list;
	}

	@Override
	public int findRankingByUserid(Long _userid) {
		// TODO Auto-generated method stub
		int ranking = 0;
		Map map = new HashMap();
		map.put("userid", _userid);
		ranking = (Integer) this.getSqlMapClientTemplate().queryForObject(
				"IRP_USER.ibatorgenerated_searchrankingbyuserid", map);
		return ranking;
	}

	@Override
	public String findShowNameByUsername(String _username) {
		String nShowname = "";
		Map map = new HashMap();
		map.put("username", _username);
		nShowname = this
				.getSqlMapClientTemplate()
				.queryForObject(
						"IRP_USER.ibatorgenerated_shownameofuserbyusername",
						map).toString();
		return nShowname;
	}

	@Override
	public String findShowNameByUserid(Long _userid) {
		// TODO Auto-generated method stub
		String nShowname = "";
		if(_userid!=null){
			Map map = new HashMap();
			map.put("userid", _userid);
			nShowname = this
					.getSqlMapClientTemplate()
					.queryForObject(
							"IRP_USER.ibatorgenerated_shownameofuserbyuserid",
							map).toString();
		}
		return nShowname;
	}
	
	@Override
	public IrpUser findSumScoreAndSumExperence(){
		return (IrpUser) this.getSqlMapClientTemplate().queryForObject("IRP_USER.ibatorgenerated_sumscoreexperence");
	}
	
    @SuppressWarnings("unchecked")
    @Override
    public List<IrpUser> findExpertList(Map<String, Object> _mParam, PageUtil pageUtil) {
        List<IrpUser> list = new ArrayList<IrpUser>();
        if (pageUtil != null) {
            list = getSqlMapClientTemplate().queryForList("IRP_USER.findExpertList", _mParam, pageUtil.getPageIndex(),
                    pageUtil.getPageSize());
        } else {
            list = getSqlMapClientTemplate().queryForList("IRP_USER.findExpertList", _mParam);
        }
        return list;
    }
	
	@Override
	public int findExpertCount(Map<String, Object> _mParam) {
		Integer count = (Integer) getSqlMapClientTemplate().queryForObject("IRP_USER.findExpertCount", _mParam);
		return count;
	}

	@SuppressWarnings("unchecked")
	@Override
	public List<IrpUser> findUserByGroupIdAndRoleId(Map map, PageUtil pageUtil)
			throws SQLException {
		List<IrpUser> list = new ArrayList<IrpUser>();
		if(pageUtil!=null){
			list = this.getSqlMapClientTemplate().queryForList("IRP_USER.findUsersByGroupIdAndRoleID",map,pageUtil.getPageIndex(),pageUtil.getPageSize());
		}else{
			list = this.getSqlMapClientTemplate().queryForList("IRP_USER.findUsersByGroupIdAndRoleID",map);
		}
		
		return list;
	}

	@Override
	public int findCountByGroupIdAndRoleId(Map map) throws SQLException {
		// TODO Auto-generated method stub
		int count = 0;
		count = (Integer) getSqlMapClientTemplate().queryForObject("IRP_USER.findCountByGroupIdAndRoleID",map);
		return count;
	}

	@SuppressWarnings("unchecked")
	public List<IrpUser> selectByExample(IrpUserExample example,
			PageUtil pageUtil) throws SQLException {
		List<IrpUser> list = null;
		if (pageUtil != null) {
			list = getSqlMapClientTemplate().queryForList(
					"IRP_USER.ibatorgenerated_selectByExample", example,
					pageUtil.getPageIndex(), pageUtil.getPageSize());
		} else {
			list = getSqlMapClientTemplate().queryForList(
					"IRP_USER.ibatorgenerated_selectByExample", example);
		}
		return list;
	}
	@SuppressWarnings("unchecked")
	public List<Map<String, Object>> selectByExample(PageUtil pageUtil,Map<String, Object> _mParam) throws SQLException {
		List<Map<String, Object>> list = null;
		if (pageUtil != null) {
			list = getSqlMapClientTemplate().queryForList(
					"IRP_USER.ibatorgenerated_selectByExample1", _mParam,
					pageUtil.getPageIndex(), pageUtil.getPageSize());
		} else {
			list = getSqlMapClientTemplate().queryForList(
					"IRP_USER.ibatorgenerated_selectByExample1", _mParam);
		}
		return list;
	}
	@SuppressWarnings("unchecked")
	@Override
	public List<IrpUserValue> selectByExample(String _sql) {
		List<IrpUserValue> list = null;
		if(_sql!=""&&_sql!=null){
		Map map=new HashMap();
		map.put("sql", _sql);
		list = getSqlMapClientTemplate().queryForList("IRP_USER.ibatorgenerated_selectByExample2", map);
		}
		return list;
	}
	@SuppressWarnings("unchecked")
	public List<IrpUser> selectByExampleWithRoleId(IrpUserExample example)
			throws SQLException {
		List<IrpUser> list = getSqlMapClientTemplate().queryForList(
				"IRP_USER.ibatorgenerated_selectByExampleWithRoleId", example);

		return list;
	}
	@Override
	  public int updateYearDays(IrpUser record) throws SQLException {
	        int rows = getSqlMapClientTemplate().update("IRP_USER.updateYearDays", record);
	        return rows;
	    }
	@Override
	public int updateAllYearDays(IrpUser record) throws SQLException {
		int rows = getSqlMapClientTemplate().update("IRP_USER.updateAllLeaveYearDays", record);
		return rows;
	}

	@Override
	public List<Long> selectUserIdsByExample(IrpUserExample example) {
		List<Long> userids=null;
		userids = getSqlMapClientTemplate().queryForList("IRP_USER.ibatorgenerated_selectUserIdsByExample", example);
		return userids;
	}

	@Override
	public List<IrpUser> findUsersByRoleId(Map<String, Object> _mParam,PageUtil pageUtil)
			throws SQLException {
		List<IrpUser> users = getSqlMapClientTemplate().queryForList("IRP_USER.findExpertByRoleId", _mParam, pageUtil.getPageIndex(), pageUtil.getPageSize());
		return users;
	}
	@Override
	public List<IrpUser> findRecExpertByRoleId(Map<String, Object> _mParam,PageUtil pageUtil)
			throws SQLException {
		List<IrpUser> users = getSqlMapClientTemplate().queryForList("IRP_USER.findRecExpertByRoleId", _mParam, pageUtil.getPageIndex(), pageUtil.getPageSize());
		return users;
	}

	@Override
	public List<IrpUser> getUserBycategoryid(String _sql) {
		 List<IrpUser> list = null;
		if(_sql!=""&&_sql!=null){
		Map map=new HashMap();
		map.put("sql", _sql);
		list = getSqlMapClientTemplate().queryForList("IRP_USER.selectUserByCategoryid", map);
		}
		return list;
	}

}