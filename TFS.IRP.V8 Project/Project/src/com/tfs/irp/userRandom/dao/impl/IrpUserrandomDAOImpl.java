package com.tfs.irp.userRandom.dao.impl;

import com.tfs.irp.userRandom.dao.IrpUserrandomDAO;
import com.tfs.irp.userRandom.entity.IrpUserrandom;
import com.tfs.irp.userRandom.entity.IrpUserrandomExample;
import java.sql.SQLException;
import java.util.List;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;

public class IrpUserrandomDAOImpl extends SqlMapClientDaoSupport implements IrpUserrandomDAO {

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_USERRANDOM
     *
     * @ibatorgenerated Wed Sep 18 11:08:14 CST 2013
     */
    public int countByExample(IrpUserrandomExample example) throws SQLException {
        Integer count = (Integer)  getSqlMapClientTemplate().queryForObject("IRP_USERRANDOM.ibatorgenerated_countByExample", example);
        return count;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_USERRANDOM
     *
     * @ibatorgenerated Wed Sep 18 11:08:14 CST 2013
     */
    public int deleteByExample(IrpUserrandomExample example) throws SQLException {
        int rows = getSqlMapClientTemplate().delete("IRP_USERRANDOM.ibatorgenerated_deleteByExample", example);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_USERRANDOM
     *
     * @ibatorgenerated Wed Sep 18 11:08:14 CST 2013
     */
    public int deleteByPrimaryKey(Long randomid) throws SQLException {
        IrpUserrandom key = new IrpUserrandom();
        key.setRandomid(randomid);
        int rows = getSqlMapClientTemplate().delete("IRP_USERRANDOM.ibatorgenerated_deleteByPrimaryKey", key);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_USERRANDOM
     *
     * @ibatorgenerated Wed Sep 18 11:08:14 CST 2013
     */
    public void insert(IrpUserrandom record) throws SQLException {
        getSqlMapClientTemplate().insert("IRP_USERRANDOM.ibatorgenerated_insert", record);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_USERRANDOM
     *
     * @ibatorgenerated Wed Sep 18 11:08:14 CST 2013
     */
    public void insertSelective(IrpUserrandom record) throws SQLException {
        getSqlMapClientTemplate().insert("IRP_USERRANDOM.ibatorgenerated_insertSelective", record);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_USERRANDOM
     *
     * @ibatorgenerated Wed Sep 18 11:08:14 CST 2013
     */
    @SuppressWarnings("unchecked")
    public List<IrpUserrandom> selectByExample(IrpUserrandomExample example) throws SQLException {
        List<IrpUserrandom> list = getSqlMapClientTemplate().queryForList("IRP_USERRANDOM.ibatorgenerated_selectByExample", example);
        return list;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_USERRANDOM
     *
     * @ibatorgenerated Wed Sep 18 11:08:14 CST 2013
     */
    public IrpUserrandom selectByPrimaryKey(Long randomid) throws SQLException {
        IrpUserrandom key = new IrpUserrandom();
        key.setRandomid(randomid);
        IrpUserrandom record = (IrpUserrandom) getSqlMapClientTemplate().queryForObject("IRP_USERRANDOM.ibatorgenerated_selectByPrimaryKey", key);
        return record;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_USERRANDOM
     *
     * @ibatorgenerated Wed Sep 18 11:08:14 CST 2013
     */
    public int updateByExampleSelective(IrpUserrandom record, IrpUserrandomExample example) throws SQLException {
        UpdateByExampleParms parms = new UpdateByExampleParms(record, example);
        int rows = getSqlMapClientTemplate().update("IRP_USERRANDOM.ibatorgenerated_updateByExampleSelective", parms);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_USERRANDOM
     *
     * @ibatorgenerated Wed Sep 18 11:08:14 CST 2013
     */
    public int updateByExample(IrpUserrandom record, IrpUserrandomExample example) throws SQLException {
        UpdateByExampleParms parms = new UpdateByExampleParms(record, example);
        int rows = getSqlMapClientTemplate().update("IRP_USERRANDOM.ibatorgenerated_updateByExample", parms);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_USERRANDOM
     *
     * @ibatorgenerated Wed Sep 18 11:08:14 CST 2013
     */
    public int updateByPrimaryKeySelective(IrpUserrandom record) throws SQLException {
        int rows = getSqlMapClientTemplate().update("IRP_USERRANDOM.ibatorgenerated_updateByPrimaryKeySelective", record);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table IRP_USERRANDOM
     *
     * @ibatorgenerated Wed Sep 18 11:08:14 CST 2013
     */
    public int updateByPrimaryKey(IrpUserrandom record) throws SQLException {
        int rows = getSqlMapClientTemplate().update("IRP_USERRANDOM.ibatorgenerated_updateByPrimaryKey", record);
        return rows;
    }

    /**
     * This class was generated by Apache iBATIS ibator.
     * This class corresponds to the database table IRP_USERRANDOM
     *
     * @ibatorgenerated Wed Sep 18 11:08:14 CST 2013
     */
    private static class UpdateByExampleParms extends IrpUserrandomExample {
        private Object record;

        public UpdateByExampleParms(Object record, IrpUserrandomExample example) {
            super(example);
            this.record = record;
        }

        public Object getRecord() {
            return record;
        }
    }
}