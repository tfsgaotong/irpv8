package com.tfs.irp.usergoodslink.entity;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class IrpUserCovertGoodsExample {
    /**
     * This field was generated by Abator for iBATIS.
     * This field corresponds to the database table IRP_USER_COVERT_GOODS
     *
     * @abatorgenerated Wed Apr 12 17:15:45 CST 2017
     */
    protected String orderByClause;

    /**
     * This field was generated by Abator for iBATIS.
     * This field corresponds to the database table IRP_USER_COVERT_GOODS
     *
     * @abatorgenerated Wed Apr 12 17:15:45 CST 2017
     */
    protected List oredCriteria;

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table IRP_USER_COVERT_GOODS
     *
     * @abatorgenerated Wed Apr 12 17:15:45 CST 2017
     */
    public IrpUserCovertGoodsExample() {
        oredCriteria = new ArrayList();
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table IRP_USER_COVERT_GOODS
     *
     * @abatorgenerated Wed Apr 12 17:15:45 CST 2017
     */
    protected IrpUserCovertGoodsExample(IrpUserCovertGoodsExample example) {
        this.orderByClause = example.orderByClause;
        this.oredCriteria = example.oredCriteria;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table IRP_USER_COVERT_GOODS
     *
     * @abatorgenerated Wed Apr 12 17:15:45 CST 2017
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table IRP_USER_COVERT_GOODS
     *
     * @abatorgenerated Wed Apr 12 17:15:45 CST 2017
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table IRP_USER_COVERT_GOODS
     *
     * @abatorgenerated Wed Apr 12 17:15:45 CST 2017
     */
    public List getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table IRP_USER_COVERT_GOODS
     *
     * @abatorgenerated Wed Apr 12 17:15:45 CST 2017
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table IRP_USER_COVERT_GOODS
     *
     * @abatorgenerated Wed Apr 12 17:15:45 CST 2017
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table IRP_USER_COVERT_GOODS
     *
     * @abatorgenerated Wed Apr 12 17:15:45 CST 2017
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table IRP_USER_COVERT_GOODS
     *
     * @abatorgenerated Wed Apr 12 17:15:45 CST 2017
     */
    public void clear() {
        oredCriteria.clear();
    }

    /**
     * This class was generated by Abator for iBATIS.
     * This class corresponds to the database table IRP_USER_COVERT_GOODS
     *
     * @abatorgenerated Wed Apr 12 17:15:45 CST 2017
     */
    public static class Criteria {
        protected List criteriaWithoutValue;

        protected List criteriaWithSingleValue;

        protected List criteriaWithListValue;

        protected List criteriaWithBetweenValue;

        protected Criteria() {
            super();
            criteriaWithoutValue = new ArrayList();
            criteriaWithSingleValue = new ArrayList();
            criteriaWithListValue = new ArrayList();
            criteriaWithBetweenValue = new ArrayList();
        }

        public boolean isValid() {
            return criteriaWithoutValue.size() > 0
                || criteriaWithSingleValue.size() > 0
                || criteriaWithListValue.size() > 0
                || criteriaWithBetweenValue.size() > 0;
        }

        public List getCriteriaWithoutValue() {
            return criteriaWithoutValue;
        }

        public List getCriteriaWithSingleValue() {
            return criteriaWithSingleValue;
        }

        public List getCriteriaWithListValue() {
            return criteriaWithListValue;
        }

        public List getCriteriaWithBetweenValue() {
            return criteriaWithBetweenValue;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteriaWithoutValue.add(condition);
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("value", value);
            criteriaWithSingleValue.add(map);
        }

        protected void addCriterion(String condition, List values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("values", values);
            criteriaWithListValue.add(map);
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            List list = new ArrayList();
            list.add(value1);
            list.add(value2);
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("values", list);
            criteriaWithBetweenValue.add(map);
        }

        public Criteria andUsergoodsidIsNull() {
            addCriterion("USERGOODSID is null");
            return this;
        }

        public Criteria andUsergoodsidIsNotNull() {
            addCriterion("USERGOODSID is not null");
            return this;
        }

        public Criteria andUsergoodsidEqualTo(Long value) {
            addCriterion("USERGOODSID =", value, "usergoodsid");
            return this;
        }

        public Criteria andUsergoodsidNotEqualTo(Long value) {
            addCriterion("USERGOODSID <>", value, "usergoodsid");
            return this;
        }

        public Criteria andUsergoodsidGreaterThan(Long value) {
            addCriterion("USERGOODSID >", value, "usergoodsid");
            return this;
        }

        public Criteria andUsergoodsidGreaterThanOrEqualTo(Long value) {
            addCriterion("USERGOODSID >=", value, "usergoodsid");
            return this;
        }

        public Criteria andUsergoodsidLessThan(Long value) {
            addCriterion("USERGOODSID <", value, "usergoodsid");
            return this;
        }

        public Criteria andUsergoodsidLessThanOrEqualTo(Long value) {
            addCriterion("USERGOODSID <=", value, "usergoodsid");
            return this;
        }

        public Criteria andUsergoodsidIn(List values) {
            addCriterion("USERGOODSID in", values, "usergoodsid");
            return this;
        }

        public Criteria andUsergoodsidNotIn(List values) {
            addCriterion("USERGOODSID not in", values, "usergoodsid");
            return this;
        }

        public Criteria andUsergoodsidBetween(Long value1, Long value2) {
            addCriterion("USERGOODSID between", value1, value2, "usergoodsid");
            return this;
        }

        public Criteria andUsergoodsidNotBetween(Long value1, Long value2) {
            addCriterion("USERGOODSID not between", value1, value2, "usergoodsid");
            return this;
        }

        public Criteria andGoodsidIsNull() {
            addCriterion("GOODSID is null");
            return this;
        }

        public Criteria andGoodsidIsNotNull() {
            addCriterion("GOODSID is not null");
            return this;
        }

        public Criteria andGoodsidEqualTo(Long value) {
            addCriterion("GOODSID =", value, "goodsid");
            return this;
        }

        public Criteria andGoodsidNotEqualTo(Long value) {
            addCriterion("GOODSID <>", value, "goodsid");
            return this;
        }

        public Criteria andGoodsidGreaterThan(Long value) {
            addCriterion("GOODSID >", value, "goodsid");
            return this;
        }

        public Criteria andGoodsidGreaterThanOrEqualTo(Long value) {
            addCriterion("GOODSID >=", value, "goodsid");
            return this;
        }

        public Criteria andGoodsidLessThan(Long value) {
            addCriterion("GOODSID <", value, "goodsid");
            return this;
        }

        public Criteria andGoodsidLessThanOrEqualTo(Long value) {
            addCriterion("GOODSID <=", value, "goodsid");
            return this;
        }

        public Criteria andGoodsidIn(List values) {
            addCriterion("GOODSID in", values, "goodsid");
            return this;
        }

        public Criteria andGoodsidNotIn(List values) {
            addCriterion("GOODSID not in", values, "goodsid");
            return this;
        }

        public Criteria andGoodsidBetween(Long value1, Long value2) {
            addCriterion("GOODSID between", value1, value2, "goodsid");
            return this;
        }

        public Criteria andGoodsidNotBetween(Long value1, Long value2) {
            addCriterion("GOODSID not between", value1, value2, "goodsid");
            return this;
        }

        public Criteria andUseridIsNull() {
            addCriterion("USERID is null");
            return this;
        }

        public Criteria andUseridIsNotNull() {
            addCriterion("USERID is not null");
            return this;
        }

        public Criteria andUseridEqualTo(Long value) {
            addCriterion("USERID =", value, "userid");
            return this;
        }

        public Criteria andUseridNotEqualTo(Long value) {
            addCriterion("USERID <>", value, "userid");
            return this;
        }

        public Criteria andUseridGreaterThan(Long value) {
            addCriterion("USERID >", value, "userid");
            return this;
        }

        public Criteria andUseridGreaterThanOrEqualTo(Long value) {
            addCriterion("USERID >=", value, "userid");
            return this;
        }

        public Criteria andUseridLessThan(Long value) {
            addCriterion("USERID <", value, "userid");
            return this;
        }

        public Criteria andUseridLessThanOrEqualTo(Long value) {
            addCriterion("USERID <=", value, "userid");
            return this;
        }

        public Criteria andUseridIn(List values) {
            addCriterion("USERID in", values, "userid");
            return this;
        }

        public Criteria andUseridNotIn(List values) {
            addCriterion("USERID not in", values, "userid");
            return this;
        }

        public Criteria andUseridBetween(Long value1, Long value2) {
            addCriterion("USERID between", value1, value2, "userid");
            return this;
        }

        public Criteria andUseridNotBetween(Long value1, Long value2) {
            addCriterion("USERID not between", value1, value2, "userid");
            return this;
        }

        public Criteria andCoverttimeIsNull() {
            addCriterion("COVERTTIME is null");
            return this;
        }

        public Criteria andCoverttimeIsNotNull() {
            addCriterion("COVERTTIME is not null");
            return this;
        }

        public Criteria andCoverttimeEqualTo(Date value) {
            addCriterion("COVERTTIME =", value, "coverttime");
            return this;
        }

        public Criteria andCoverttimeNotEqualTo(Date value) {
            addCriterion("COVERTTIME <>", value, "coverttime");
            return this;
        }

        public Criteria andCoverttimeGreaterThan(Date value) {
            addCriterion("COVERTTIME >", value, "coverttime");
            return this;
        }

        public Criteria andCoverttimeGreaterThanOrEqualTo(Date value) {
            addCriterion("COVERTTIME >=", value, "coverttime");
            return this;
        }

        public Criteria andCoverttimeLessThan(Date value) {
            addCriterion("COVERTTIME <", value, "coverttime");
            return this;
        }

        public Criteria andCoverttimeLessThanOrEqualTo(Date value) {
            addCriterion("COVERTTIME <=", value, "coverttime");
            return this;
        }

        public Criteria andCoverttimeIn(List values) {
            addCriterion("COVERTTIME in", values, "coverttime");
            return this;
        }

        public Criteria andCoverttimeNotIn(List values) {
            addCriterion("COVERTTIME not in", values, "coverttime");
            return this;
        }

        public Criteria andCoverttimeBetween(Date value1, Date value2) {
            addCriterion("COVERTTIME between", value1, value2, "coverttime");
            return this;
        }

        public Criteria andCoverttimeNotBetween(Date value1, Date value2) {
            addCriterion("COVERTTIME not between", value1, value2, "coverttime");
            return this;
        }

        public Criteria andCovertnumIsNull() {
            addCriterion("COVERTNUM is null");
            return this;
        }

        public Criteria andCovertnumIsNotNull() {
            addCriterion("COVERTNUM is not null");
            return this;
        }

        public Criteria andCovertnumEqualTo(Long value) {
            addCriterion("COVERTNUM =", value, "covertnum");
            return this;
        }

        public Criteria andCovertnumNotEqualTo(Long value) {
            addCriterion("COVERTNUM <>", value, "covertnum");
            return this;
        }

        public Criteria andCovertnumGreaterThan(Long value) {
            addCriterion("COVERTNUM >", value, "covertnum");
            return this;
        }

        public Criteria andCovertnumGreaterThanOrEqualTo(Long value) {
            addCriterion("COVERTNUM >=", value, "covertnum");
            return this;
        }

        public Criteria andCovertnumLessThan(Long value) {
            addCriterion("COVERTNUM <", value, "covertnum");
            return this;
        }

        public Criteria andCovertnumLessThanOrEqualTo(Long value) {
            addCriterion("COVERTNUM <=", value, "covertnum");
            return this;
        }

        public Criteria andCovertnumIn(List values) {
            addCriterion("COVERTNUM in", values, "covertnum");
            return this;
        }

        public Criteria andCovertnumNotIn(List values) {
            addCriterion("COVERTNUM not in", values, "covertnum");
            return this;
        }

        public Criteria andCovertnumBetween(Long value1, Long value2) {
            addCriterion("COVERTNUM between", value1, value2, "covertnum");
            return this;
        }

        public Criteria andCovertnumNotBetween(Long value1, Long value2) {
            addCriterion("COVERTNUM not between", value1, value2, "covertnum");
            return this;
        }
        public Criteria andCovertuserIsNull() {
            addCriterion("COVERTUSER is null");
            return this;
        }

        public Criteria andCovertuserIsNotNull() {
            addCriterion("COVERTUSER is not null");
            return this;
        }

        public Criteria andCovertuserEqualTo(String value) {
            addCriterion("COVERTUSER =", value, "covertuser");
            return this;
        }

        public Criteria andCovertuserNotEqualTo(String value) {
            addCriterion("COVERTUSER <>", value, "covertuser");
            return this;
        }

        public Criteria andCovertuserGreaterThan(String value) {
            addCriterion("COVERTUSER >", value, "covertuser");
            return this;
        }

        public Criteria andCovertuserGreaterThanOrEqualTo(String value) {
            addCriterion("COVERTUSER >=", value, "covertuser");
            return this;
        }

        public Criteria andCovertuserLessThan(String value) {
            addCriterion("COVERTNUM <", value, "covertuser");
            return this;
        }

        public Criteria andCovertuserLessThanOrEqualTo(String value) {
            addCriterion("COVERTUSER <=", value, "covertuser");
            return this;
        }

        public Criteria andCovertuserIn(List values) {
            addCriterion("COVERTUSER in", values, "covertuser");
            return this;
        }

        public Criteria andCovertuserNotIn(List values) {
            addCriterion("COVERTUSER not in", values, "covertuser");
            return this;
        }

        public Criteria andCovertuserBetween(String value1, String value2) {
            addCriterion("COVERTUSER between", value1, value2, "covertuser");
            return this;
        }

        public Criteria andCovertuserNotBetween(String value1, String value2) {
            addCriterion("COVERTUSER not between", value1, value2, "covertuser");
            return this;
        }
        public Criteria andCovertgoodsIsNull() {
            addCriterion("COVERTGOODS is null");
            return this;
        }

        public Criteria andCovertgoodsIsNotNull() {
            addCriterion("COVERTGOODS is not null");
            return this;
        }

        public Criteria andCovertgoodsEqualTo(String value) {
            addCriterion("COVERTGOODS =", value, "covertgoods");
            return this;
        }

        public Criteria andCovertgoodsNotEqualTo(String value) {
            addCriterion("COVERTGOODS <>", value, "covertgoods");
            return this;
        }

        public Criteria andCovertgoodsGreaterThan(String value) {
            addCriterion("COVERTGOODS >", value, "covertgoods");
            return this;
        }

        public Criteria andCovertgoodsGreaterThanOrEqualTo(String value) {
            addCriterion("COVERTGOODS >=", value, "covertgoods");
            return this;
        }

        public Criteria andCovertgoodsLessThan(String value) {
            addCriterion("COVERTGOODS <", value, "covertgoods");
            return this;
        }

        public Criteria andCovertgoodsLessThanOrEqualTo(String value) {
            addCriterion("COVERTGOODS <=", value, "covertgoods");
            return this;
        }

        public Criteria andCovertgoodsIn(List values) {
            addCriterion("COVERTGOODS in", values, "covertgoods");
            return this;
        }

        public Criteria andCovertgoodsNotIn(List values) {
            addCriterion("COVERTGOODS not in", values, "covertgoods");
            return this;
        }

        public Criteria andCovertgoodsBetween(String value1, String value2) {
            addCriterion("COVERTGOODS between", value1, value2, "covertgoods");
            return this;
        }

        public Criteria andCovertgoodsNotBetween(String value1, String value2) {
            addCriterion("COVERTGOODS not between", value1, value2, "covertgoods");
            return this;
        }
        
        public Criteria andSingleScoreIsNull() {
            addCriterion("SINGLESCORE is null");
            return this;
        }

        public Criteria andSingleScoreIsNotNull() {
            addCriterion("SINGLESCORE is not null");
            return this;
        }

        public Criteria andSingleScoreEqualTo(Long value) {
            addCriterion("SINGLESCORE =", value, "singleScore");
            return this;
        }

        public Criteria andSingleScoreNotEqualTo(Long value) {
            addCriterion("SINGLESCORE <>", value, "singleScore");
            return this;
        }

        public Criteria andSingleScoreGreaterThan(Long value) {
            addCriterion("SINGLESCORE >", value, "singleScore");
            return this;
        }

        public Criteria andSingleScoreGreaterThanOrEqualTo(Long value) {
            addCriterion("SINGLESCORE >=", value, "singleScore");
            return this;
        }

        public Criteria andSingleScoreLessThan(Long value) {
            addCriterion("SINGLESCORE <", value, "singleScore");
            return this;
        }

        public Criteria andSingleScoreLessThanOrEqualTo(Long value) {
            addCriterion("SINGLESCORE <=", value, "singleScore");
            return this;
        }

        public Criteria andSingleScoreIn(List values) {
            addCriterion("SINGLESCORE in", values, "singleScore");
            return this;
        }

        public Criteria andSingleScoreNotIn(List values) {
            addCriterion("SINGLESCORE not in", values, "singleScore");
            return this;
        }

        public Criteria andSingleScoreBetween(Long value1, Long value2) {
            addCriterion("SINGLESCORE between", value1, value2, "singleScore");
            return this;
        }

        public Criteria andSingleScoreNotBetween(Long value1, Long value2) {
            addCriterion("SINGLESCORE not between", value1, value2, "singleScore");
            return this;
        }
        public Criteria andConvertTypeIsNull() {
            addCriterion("CONVERTTYPE is null");
            return this;
        }

        public Criteria andConvertTypeIsNotNull() {
            addCriterion("CONVERTTYPE is not null");
            return this;
        }

        public Criteria andConvertTypeEqualTo(Long value) {
            addCriterion("CONVERTTYPE =", value, "convertType");
            return this;
        }

        public Criteria andConvertTypeNotEqualTo(Long value) {
            addCriterion("CONVERTTYPE <>", value, "convertType");
            return this;
        }

        public Criteria andConvertTypeGreaterThan(Long value) {
            addCriterion("CONVERTTYPE >", value, "convertType");
            return this;
        }

        public Criteria andConvertTypeGreaterThanOrEqualTo(Long value) {
            addCriterion("CONVERTTYPE >=", value, "convertType");
            return this;
        }

        public Criteria andConvertTypeLessThan(Long value) {
            addCriterion("CONVERTTYPE <", value, "convertType");
            return this;
        }

        public Criteria andConvertTypeLessThanOrEqualTo(Long value) {
            addCriterion("CONVERTTYPE <=", value, "convertType");
            return this;
        }

        public Criteria andConvertTypeIn(List values) {
            addCriterion("CONVERTTYPE in", values, "convertType");
            return this;
        }

        public Criteria andConvertTypeNotIn(List values) {
            addCriterion("CONVERTTYPE not in", values, "convertType");
            return this;
        }

        public Criteria andConvertTypeBetween(Long value1, Long value2) {
            addCriterion("CONVERTTYPE between", value1, value2, "convertType");
            return this;
        }

        public Criteria andConvertTypeNotBetween(Long value1, Long value2) {
            addCriterion("CONVERTTYPE not between", value1, value2, "convertType");
            return this;
        }
        public Criteria andTotalScoreIsNull() {
            addCriterion("TOTALSCORE is null");
            return this;
        }

        public Criteria andTotalScoreIsNotNull() {
            addCriterion("TOTALSCORE is not null");
            return this;
        }

        public Criteria andTotalScoreEqualTo(Long value) {
            addCriterion("TOTALSCORE =", value, "totalScore");
            return this;
        }

        public Criteria andTotalScoreNotEqualTo(Long value) {
            addCriterion("TOTALSCORE <>", value, "totalScore");
            return this;
        }

        public Criteria andTotalScoreGreaterThan(Long value) {
            addCriterion("TOTALSCORE >", value, "totalScore");
            return this;
        }

        public Criteria andTotalScoreGreaterThanOrEqualTo(Long value) {
            addCriterion("TOTALSCORE >=", value, "totalScore");
            return this;
        }

        public Criteria andTotalScoreLessThan(Long value) {
            addCriterion("TOTALSCORE <", value, "totalScore");
            return this;
        }

        public Criteria andTotalScoreLessThanOrEqualTo(Long value) {
            addCriterion("TOTALSCORE <=", value, "totalScore");
            return this;
        }

        public Criteria andTotalScoreIn(List values) {
            addCriterion("TOTALSCORE in", values, "totalScore");
            return this;
        }

        public Criteria andTotalScoreNotIn(List values) {
            addCriterion("TOTALSCORE not in", values, "totalScore");
            return this;
        }

        public Criteria andTotalScoreBetween(Long value1, Long value2) {
            addCriterion("TOTALSCORE between", value1, value2, "totalScore");
            return this;
        }

        public Criteria andTotalScoreNotBetween(Long value1, Long value2) {
            addCriterion("TOTALSCORE not between", value1, value2, "totalScore");
            return this;
        }

    }
}