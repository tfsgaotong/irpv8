package com.tfs.irp.userlove.entity;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.math.BigDecimal;

public class IrpUserLoveExample {

	/**
	 * This field was generated by Apache iBATIS ibator. This field corresponds to the database table IRP_USER_LOVE
	 * @ibatorgenerated  Mon Sep 02 10:53:17 CST 2013
	 */
	protected String orderByClause;
	/**
	 * This field was generated by Apache iBATIS ibator. This field corresponds to the database table IRP_USER_LOVE
	 * @ibatorgenerated  Mon Sep 02 10:53:17 CST 2013
	 */
	protected List<Criteria> oredCriteria;

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table IRP_USER_LOVE
	 * @ibatorgenerated  Mon Sep 02 10:53:17 CST 2013
	 */
	public IrpUserLoveExample() {
		oredCriteria = new ArrayList<Criteria>();
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table IRP_USER_LOVE
	 * @ibatorgenerated  Mon Sep 02 10:53:17 CST 2013
	 */
	protected IrpUserLoveExample(IrpUserLoveExample example) {
		this.orderByClause = example.orderByClause;
		this.oredCriteria = example.oredCriteria;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table IRP_USER_LOVE
	 * @ibatorgenerated  Mon Sep 02 10:53:17 CST 2013
	 */
	public void setOrderByClause(String orderByClause) {
		this.orderByClause = orderByClause;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table IRP_USER_LOVE
	 * @ibatorgenerated  Mon Sep 02 10:53:17 CST 2013
	 */
	public String getOrderByClause() {
		return orderByClause;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table IRP_USER_LOVE
	 * @ibatorgenerated  Mon Sep 02 10:53:17 CST 2013
	 */
	public List<Criteria> getOredCriteria() {
		return oredCriteria;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table IRP_USER_LOVE
	 * @ibatorgenerated  Mon Sep 02 10:53:17 CST 2013
	 */
	public void or(Criteria criteria) {
		oredCriteria.add(criteria);
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table IRP_USER_LOVE
	 * @ibatorgenerated  Mon Sep 02 10:53:17 CST 2013
	 */
	public Criteria createCriteria() {
		Criteria criteria = createCriteriaInternal();
		if (oredCriteria.size() == 0) {
			oredCriteria.add(criteria);
		}
		return criteria;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table IRP_USER_LOVE
	 * @ibatorgenerated  Mon Sep 02 10:53:17 CST 2013
	 */
	protected Criteria createCriteriaInternal() {
		Criteria criteria = new Criteria();
		return criteria;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table IRP_USER_LOVE
	 * @ibatorgenerated  Mon Sep 02 10:53:17 CST 2013
	 */
	public void clear() {
		oredCriteria.clear();
	}

	/**
	 * This class was generated by Apache iBATIS ibator. This class corresponds to the database table IRP_USER_LOVE
	 * @ibatorgenerated  Mon Sep 02 10:53:17 CST 2013
	 */
	public static class Criteria {
		protected List<String> criteriaWithoutValue;
		protected List<Map<String, Object>> criteriaWithSingleValue;
		protected List<Map<String, Object>> criteriaWithListValue;
		protected List<Map<String, Object>> criteriaWithBetweenValue;

		protected Criteria() {
			super();
			criteriaWithoutValue = new ArrayList<String>();
			criteriaWithSingleValue = new ArrayList<Map<String, Object>>();
			criteriaWithListValue = new ArrayList<Map<String, Object>>();
			criteriaWithBetweenValue = new ArrayList<Map<String, Object>>();
		}

		public boolean isValid() {
			return criteriaWithoutValue.size() > 0
					|| criteriaWithSingleValue.size() > 0
					|| criteriaWithListValue.size() > 0
					|| criteriaWithBetweenValue.size() > 0;
		}

		public List<String> getCriteriaWithoutValue() {
			return criteriaWithoutValue;
		}

		public List<Map<String, Object>> getCriteriaWithSingleValue() {
			return criteriaWithSingleValue;
		}

		public List<Map<String, Object>> getCriteriaWithListValue() {
			return criteriaWithListValue;
		}

		public List<Map<String, Object>> getCriteriaWithBetweenValue() {
			return criteriaWithBetweenValue;
		}

		protected void addCriterion(String condition) {
			if (condition == null) {
				throw new RuntimeException("Value for condition cannot be null");
			}
			criteriaWithoutValue.add(condition);
		}

		protected void addCriterion(String condition, Object value,
				String property) {
			if (value == null) {
				throw new RuntimeException("Value for " + property
						+ " cannot be null");
			}
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("condition", condition);
			map.put("value", value);
			criteriaWithSingleValue.add(map);
		}

		protected void addCriterion(String condition,
				List<? extends Object> values, String property) {
			if (values == null || values.size() == 0) {
				throw new RuntimeException("Value list for " + property
						+ " cannot be null or empty");
			}
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("condition", condition);
			map.put("values", values);
			criteriaWithListValue.add(map);
		}

		protected void addCriterion(String condition, Object value1,
				Object value2, String property) {
			if (value1 == null || value2 == null) {
				throw new RuntimeException("Between values for " + property
						+ " cannot be null");
			}
			List<Object> list = new ArrayList<Object>();
			list.add(value1);
			list.add(value2);
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("condition", condition);
			map.put("values", list);
			criteriaWithBetweenValue.add(map);
		}

		public Criteria andUseridIsNull() {
			addCriterion("USERID is null");
			return this;
		}

		public Criteria andUseridIsNotNull() {
			addCriterion("USERID is not null");
			return this;
		}

		public Criteria andUseridEqualTo(Long value) {
			addCriterion("USERID =", value, "userid");
			return this;
		}

		public Criteria andUseridNotEqualTo(Long value) {
			addCriterion("USERID <>", value, "userid");
			return this;
		}

		public Criteria andUseridGreaterThan(Long value) {
			addCriterion("USERID >", value, "userid");
			return this;
		}

		public Criteria andUseridGreaterThanOrEqualTo(Long value) {
			addCriterion("USERID >=", value, "userid");
			return this;
		}

		public Criteria andUseridLessThan(Long value) {
			addCriterion("USERID <", value, "userid");
			return this;
		}

		public Criteria andUseridLessThanOrEqualTo(Long value) {
			addCriterion("USERID <=", value, "userid");
			return this;
		}

		public Criteria andUseridIn(List<Long> values) {
			addCriterion("USERID in", values, "userid");
			return this;
		}

		public Criteria andUseridNotIn(List<Long> values) {
			addCriterion("USERID not in", values, "userid");
			return this;
		}

		public Criteria andUseridBetween(Long value1, Long value2) {
			addCriterion("USERID between", value1, value2, "userid");
			return this;
		}

		public Criteria andUseridNotBetween(Long value1, Long value2) {
			addCriterion("USERID not between", value1, value2, "userid");
			return this;
		}

		public Criteria andDocidIsNull() {
			addCriterion("DOCID is null");
			return this;
		}

		public Criteria andDocidIsNotNull() {
			addCriterion("DOCID is not null");
			return this;
		}

		public Criteria andDocidEqualTo(Long value) {
			addCriterion("DOCID =", value, "docid");
			return this;
		}

		public Criteria andDocidNotEqualTo(Long value) {
			addCriterion("DOCID <>", value, "docid");
			return this;
		}

		public Criteria andDocidGreaterThan(Long value) {
			addCriterion("DOCID >", value, "docid");
			return this;
		}

		public Criteria andDocidGreaterThanOrEqualTo(Long value) {
			addCriterion("DOCID >=", value, "docid");
			return this;
		}

		public Criteria andDocidLessThan(Long value) {
			addCriterion("DOCID <", value, "docid");
			return this;
		}

		public Criteria andDocidLessThanOrEqualTo(Long value) {
			addCriterion("DOCID <=", value, "docid");
			return this;
		}

		public Criteria andDocidIn(List<Long> values) {
			addCriterion("DOCID in", values, "docid");
			return this;
		}

		public Criteria andDocidNotIn(List<Long> values) {
			addCriterion("DOCID not in", values, "docid");
			return this;
		}

		public Criteria andDocidBetween(Long value1, Long value2) {
			addCriterion("DOCID between", value1, value2, "docid");
			return this;
		}

		public Criteria andDocidNotBetween(Long value1, Long value2) {
			addCriterion("DOCID not between", value1, value2, "docid");
			return this;
		}

		public Criteria andStatusIsNull() {
			addCriterion("STATUS is null");
			return this;
		}

		public Criteria andStatusIsNotNull() {
			addCriterion("STATUS is not null");
			return this;
		}

		public Criteria andStatusEqualTo(BigDecimal value) {
			addCriterion("STATUS =", value, "status");
			return this;
		}

		public Criteria andStatusNotEqualTo(BigDecimal value) {
			addCriterion("STATUS <>", value, "status");
			return this;
		}

		public Criteria andStatusGreaterThan(BigDecimal value) {
			addCriterion("STATUS >", value, "status");
			return this;
		}

		public Criteria andStatusGreaterThanOrEqualTo(BigDecimal value) {
			addCriterion("STATUS >=", value, "status");
			return this;
		}

		public Criteria andStatusLessThan(BigDecimal value) {
			addCriterion("STATUS <", value, "status");
			return this;
		}

		public Criteria andStatusLessThanOrEqualTo(BigDecimal value) {
			addCriterion("STATUS <=", value, "status");
			return this;
		}

		public Criteria andStatusIn(List<BigDecimal> values) {
			addCriterion("STATUS in", values, "status");
			return this;
		}

		public Criteria andStatusNotIn(List<BigDecimal> values) {
			addCriterion("STATUS not in", values, "status");
			return this;
		}

		public Criteria andStatusBetween(BigDecimal value1, BigDecimal value2) {
			addCriterion("STATUS between", value1, value2, "status");
			return this;
		}

		public Criteria andStatusNotBetween(BigDecimal value1, BigDecimal value2) {
			addCriterion("STATUS not between", value1, value2, "status");
			return this;
		}

		public Criteria andXdocidIsNull() {
			addCriterion("XDOCID is null");
			return this;
		}

		public Criteria andXdocidIsNotNull() {
			addCriterion("XDOCID is not null");
			return this;
		}

		public Criteria andXdocidEqualTo(Long value) {
			addCriterion("XDOCID =", value, "xdocid");
			return this;
		}

		public Criteria andXdocidNotEqualTo(Long value) {
			addCriterion("XDOCID <>", value, "xdocid");
			return this;
		}

		public Criteria andXdocidGreaterThan(Long value) {
			addCriterion("XDOCID >", value, "xdocid");
			return this;
		}

		public Criteria andXdocidGreaterThanOrEqualTo(Long value) {
			addCriterion("XDOCID >=", value, "xdocid");
			return this;
		}

		public Criteria andXdocidLessThan(Long value) {
			addCriterion("XDOCID <", value, "xdocid");
			return this;
		}

		public Criteria andXdocidLessThanOrEqualTo(Long value) {
			addCriterion("XDOCID <=", value, "xdocid");
			return this;
		}

		public Criteria andXdocidIn(List<Long> values) {
			addCriterion("XDOCID in", values, "xdocid");
			return this;
		}

		public Criteria andXdocidNotIn(List<Long> values) {
			addCriterion("XDOCID not in", values, "xdocid");
			return this;
		}

		public Criteria andXdocidBetween(Long value1, Long value2) {
			addCriterion("XDOCID between", value1, value2, "xdocid");
			return this;
		}

		public Criteria andXdocidNotBetween(Long value1, Long value2) {
			addCriterion("XDOCID not between", value1, value2, "xdocid");
			return this;
		}
	}
}